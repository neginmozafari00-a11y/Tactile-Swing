; OM File Header - Saved 2025/09/11 22:10:35
; (7.06 :patc (om-make-point 10 10) (om-make-point 73 25) (om-make-point 1440 847) "" 183 0 "2025/08/23 12:29:34" "2025/09/11 22:10:35")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../Documents/My_Favorite_Things_MIDI_FrMelodyne.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "MIDI_to_OSC" (quote ((let ((box (om-load-boxcall (quote abstraction) "Note_Data 3" (om-load-lisp-abspatch "Note_Data" 7.06 "(lambda (note-data)$  (let ((prev-onset 0)$        (osc-bundles '()))    ;;creating the bundles fpr osc-send$    (loop for note in note-data $          for onset = (second note)$          for velocity = (fourth note)$          for gap = (- onset prev-onset)$          do (progn$               (when (> gap 0) ;;counting the silences$                 (sleep (/ gap 1000.0)))$               (let ((intensity (cond$                                 ((> velocity 80) 255)   ;;for diffrent types of vibraitions $                                 ((> velocity 60) 180)  $                                 (t 120))))             $                 (osc-send (list \"/vibration\" intensity) \"127.0.0.1\" 8000)$                 $                 ;; the function could also send osc alon without the object$                 (push (list \"/vibration\" intensity) osc-bundles))$               $               (setq prev-onset onset)))$    (first osc-bundles)))") (quote ((om-load-inputfun (quote input-funbox) "" "NOTE-DATA" nil))) (om-make-point 613 715) nil (list (list "/vibration" 120)) nil "Note_Data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 30) (quote "IP Address") nil (om-make-point 796 652) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 91 30) (quote "Port number") nil (om-make-point 958 660) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 962 698) (om-make-point 48 30) 8000 "8000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 795 683) (om-make-point 84 30) "127.0.0.1" "\"127.0.0.1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 16 30) (quote "") "" (om-make-point 388 94) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 16 30) (quote "") "" (om-make-point 428 91) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 68) (quote "pitch onset duration velocity into haptic vibrations data for the OSC Object$") "" (om-make-point 428 636) nil (om-make-color 0.0 0.55488027 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 182 81) (quote "Processing MIDI events into notes with velocity, pitch, onset and duration data") "" (om-make-point 209 624) nil (om-make-color 0.0 0.3288737 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 30) (quote "Rhythm to Voice Object") "" (om-make-point 439 332) nil (om-make-color 0.9390818 0.17501873 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 244 30) (quote "Loading the MIDI File in a Chord-Seq ") "" (om-make-point 572 22) nil (om-make-color 0.5256445 0.5802826 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSC-SEND" (quote osc-send) (quote ((om-load-inputfun (quote input-funbox) "OSC message" "BUNDLE" (list "/test" 0)) (om-load-inputfun (quote input-funbox) "IP address" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "port number" "PORT" 8000))) (om-make-point 799 728) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "MIDI_Events" (om-load-lisp-abspatch "MIDI_Events" 7.06 "$(lambda (midi-events)$  (let* ((note-events '())$         (keyon-events '()))$    $    (loop for event in midi-events$          for ev-type = (slot-value event 'ev-type)$          for ev-date = (slot-value event 'ev-date)$          for ev-fields = (slot-value event 'ev-fields)$          do$          (cond$            ((eq ev-type :keyon) ;;categorizing events in pitches, velocity$             (let ((pitch (first ev-fields))$                   (velocity (second ev-fields)))$               (push (list pitch velocity ev-date) keyon-events)))$            $            ((eq ev-type :keyoff)$             (let* ((pitch (first ev-fields))$                    (keyoff-time ev-date)$                    (matching-keyon (find-if (lambda (keyon)$                                               (= (first keyon) pitch))$                                             keyon-events)))$               (when matching-keyon$                 (let* ((keyon-time (third matching-keyon))$                        (velocity (second matching-keyon))$                        (duration (- keyoff-time keyon-time)))$                   (push (list pitch keyon-time duration velocity) note-events)$                   (setq keyon-events (remove matching-keyon keyon-events))))))))$    $    ;; (pitch onset duration velocity)$    (reverse note-events)))") (quote ((om-load-inputfun (quote input-funbox) "" "MIDI-EVENTS" nil))) (om-make-point 364 730) nil (list (append (list (list 47 625 125 91) (list 40 750 250 73) (list 64 1000 375 63) (list 59 1000 375 41) (list 52 1000 375 53) (list 76 1375 375 48) (list 47 1750 250 75) (list 40 1750 250 87) (list 57 2000 500 71) (list 47 2000 500 64) (list 69 2500 167 58) (list 38 2667 167 35) (list 47 2884 167 78) (list 39 2884 167 97) (list 54 2833 167 83) (list 40 3084 143 68) (list 55 3000 143 58) (list 60 3143 429 81) (list 60 3571 286 57) (list 47 3857 310 62) (list 40 3857 310 85) (list 54 4167 500 62) (list 66 4667 333 48) (list 54 5000 286 56) (list 47 5000 286 79) (list 40 5000 286 74) (list 36 5000 286 70) (list 64 5286 143 71) (list 52 5429 286 39) (list 52 5714 411 43) (list 47 6125 250 65) (list 40 6125 250 85) (list 57 6375 375 72) (list 57 6750 375 65) (list 67 7207 125 49) (list 47 7184 125 66) (list 54 7125 125 95) (list 40 7250 125 71) (list 55 7375 125 46) (list 60 7500 375 77) (list 60 7875 411 52) (list 47 8286 286 52) (list 40 8286 286 80) (list 54 8571 286 58) (list 54 8857 143 40) (list 66 9000 250 47) (list 47 9250 500 70) (list 40 9250 500 67) (list 69 9750 250 52) (list 52 10000 125 44) (list 69 10125 375 58) (list 39 10551 250 39) (list 54 10500 250 41) (list 47 10500 250 68) (list 40 10750 417 101) (list 40 11167 333 80) (list 52 11500 333 45) (list 47 11500 333 66) (list 69 11833 334 66) (list 59 12167 167 42) (list 52 12167 167 34) (list 47 12423 333 51) (list 69 12333 333 56) (list 55 12333 333 48) (list 54 12667 167 43) (list 47 12667 167 73) (list 45 12667 167 64) (list 47 12833 542 73) (list 40 12833 542 105) (list 47 13375 375 62) (list 40 13375 375 90) (list 47 13750 125 81) (list 52 13875 125 66) (list 69 14000 250 61) (list 40 14000 250 74) (list 52 14250 250 41) (list 69 14500 250 64) (list 66 14500 250 53) (list 55 14500 250 49) (list 54 14750 375 43) (list 47 14750 375 64) (list 38 14750 375 60) (list 71 15125 750 66) (list 40 15125 750 97) (list 40 15918 292 89) (list 47 15875 292 66) (list 40 16244 500 72) (list 69 16167 500 58) (list 69 16667 333 54) (list 66 16667 333 48) (list 52 16667 333 44) (list 54 17000 286 44) (list 47 17000 286 77) (list 38 17000 286 56) (list 40 17286 143 105) (list 47 17429 286 53) (list 40 17714 411 93) (list 47 18223 500 71) (list 64 18125 500 83) (list 59 18125 500 65) (list 47 18125 500 68) (list 47 18625 125 53) (list 64 18750 250 77) (list 47 19000 143 86) (list 66 19143 286 109) (list 40 19143 286 74) (list 59 19429 429 67) (list 67 19857 268 51) (list 64 19857 268 88) (list 59 19857 268 63) (list 47 20125 125 80) (list 59 20250 250 82) (list 40 20250 250 73) (list 64 20500 500 109) (list 67 21000 167 50) (list 59 21000 167 55) (list 61 21167 167 68) (list 47 21167 167 85) (list 37 21167 167 63) (list 66 21333 167 98) (list 40 21333 167 67) (list 64 21500 167 81) (list 59 21500 167 57) (list 39 21738 333 51) (list 66 21667 333 101) (list 67 22000 250 49) (list 64 22000 250 83) (list 59 22000 250 56) (list 55 22000 250 41) (list 47 22250 250 91) (list 40 22500 250 80) (list 64 22750 375 94) (list 67 23125 250 55) (list 64 23125 250 58) (list 60 23125 250 53) (list 59 23125 250 68) (list 47 23375 125 81) (list 40 23375 125 78) (list 66 23500 250 101) (list 57 23750 500 71) (list 64 24250 250 50) (list 60 24250 250 62) (list 57 24250 250 62) (list 64 24500 125 79) (list 52 24500 125 60) (list 47 24500 125 93) (list 40 24625 250 78) (list 64 24875 458 104) (list 67 25431 333 49) (list 60 25431 333 57) (list 59 25333 333 68) (list 61 25667 167 62) (list 52 25667 167 49) (list 47 25667 167 76) (list 40 25667 167 74) (list 66 25833 292 89) (list 40 25833 292 74) (list 66 26218 375 95) (list 64 26125 375 75) (list 60 26125 375 56) (list 57 26125 375 63) (list 67 26500 250 46) (list 64 26500 250 84) (list 60 26500 250 52) (list 57 26500 250 52) (list 47 26750 125 80) (list 45 26750 125 87) (list 64 26875 292 80) (list 40 26875 292 73) (list 71 27167 500 75) (list 60 27167 500 65) (list 59 27167 500 48) (list 59 27667 167 52) (list 52 27833 167 58) (list 47 27833 167 93) (list 40 28054 250 77) (list 64 28000 250 92) (list 78 28318 625 66) (list 66 28250 625 62) (list 59 28250 625 84) (list 47 28875 250 78) (list 40 28875 250 87) (list 62 29125 375 71) (list 69 29500 375 65) (list 66 29500 375 55) (list 59 29500 375 54) (list 52 29940 375 47) (list 67 29875 375 85) (list 54 30250 125 60) (list 46 30250 125 54) (list 39 30250 125 69) (list 57 30375 125 72) (list 53 30375 125 82) (list 47 30375 125 77) (list 40 30375 125 101) (list 60 30500 667 89) (list 60 31167 167 68) (list 53 31333 167 67) (list 40 31569 333 91) (list 47 31500 333 93) (list 60 31833 292 108) (list 62 32125 250 108) (list 47 32419 125 76) (list 38 32375 125 76) (list 64 32500 250 115) (list 40 32500 250 84) (list 60 32750 125 58) (list 57 32750 125 58) (list 66 32875 292 106) (list 67 33167 333 106) (list 47 33500 167 72) (list 40 33500 167 89) (list 69 33667 167 105) (list 40 33667 167 82) (list 57 33833 167 75) (list 71 34000 167 66) (list 52 34000 167 63) (list 83 34267 333 51) (list 52 34167 333 57) (list 66 34594 167 84) (list 57 34594 167 64) (list 41 34594 167 84) (list 69 34500 167 82) (list 52 34667 167 69) (list 60 34833 167 59) (list 57 34833 167 62) (list 54 34833 167 60) (list 51 34833 167 77) (list 45 34833 167 76) (list 63 35061 333 31) (list 47 35021 333 69) (list 35 35000 333 61) (list 45 35333 167 62) (list 47 35564 167 98) (list 40 35564 167 88) (list 64 35500 167 78) (list 55 35667 333 58) (list 59 36000 167 64) (list 52 36000 167 73) (list 55 36167 167 52) (list 52 36333 167 73) (list 47 36500 167 83) (list 57 36718 167 63) (list 45 36667 167 84) (list 40 36667 167 105) (list 54 36833 167 61) (list 57 37000 167 72) (list 40 37167 333 107) (list 52 37546 167 69) (list 47 37500 167 105) (list 40 37667 333 95) (list 47 38000 125 77) (list 59 38125 125 70) (list 52 38125 125 71) (list 55 38250 375 68) (list 47 38625 250 79) (list 40 38625 250 78) (list 40 38875 125 112) (list 54 39000 143 88) (list 38 39218 143 89) (list 54 39143 143 77) (list 40 39286 286 97) (list 55 39571 286 75) (list 47 39571 286 94) (list 40 39571 286 107) (list 55 39857 143 69) (list 47 40000 143 86) (list 40 40000 143 88) (list 55 40143 429 63) (list 47 40571 143 75) (list 46 40714 143 73) (list 54 40857 393 73) (list 40 40857 393 105) (list 54 41250 250 60) (list 38 41250 250 81) (list 51 41500 125 75) (list 54 41625 250 90) (list 47 41625 250 90) (list 40 41625 250 94) (list 47 41875 375 84) (list 59 42250 125 54) (list 52 42250 125 67) (list 47 42375 250 73) (list 52 42625 125 70) (list 40 42810 250 73) (list 47 42750 250 81) (list 54 43000 333 77) (list 40 43000 333 111) (list 54 43333 167 73) (list 40 43500 167 101) (list 59 43667 167 77) (list 52 43667 167 71) (list 64 43833 596 90) (list 47 43833 596 94) (list 40 44429 143 89) (list 64 44571 143 75) (list 59 44571 143 79) (list 39 44714 143 65) (list 47 44857 143 93) (list 67 45000 143 106) (list 63 45210 714 55) (list 66 45143 714 110) (list 59 45143 714 50) (list 40 45143 714 73) (list 39 45909 143 50) (list 67 45857 143 48) (list 64 45857 143 100) (list 59 45857 143 64) (list 47 46000 167 101) (list 40 46167 167 83) (list 64 46333 500 105) (list 67 46833 167 52) (list 59 46833 167 58) (list 39 47000 167 38) (list 61 47167 167 67) (list 47 47167 167 80) (list 45 47167 167 72) (list 66 47333 167 98) (list 40 47333 167 73) (list 64 47500 167 80) (list 59 47500 167 60) (list 66 47667 333 104) (list 67 48000 167 47) (list 64 48000 167 89) (list 59 48000 167 61) (list 47 48167 167 80) (list 39 48167 167 87) (list 40 48333 333 80) (list 64 48667 167 94) (list 59 48833 292 73) (list 67 49125 250 55) (list 64 49125 250 66) (list 60 49125 250 58) (list 59 49125 250 80) (list 52 49375 125 59) (list 47 49375 125 93) (list 47 49500 250 92) (list 40 49500 250 79) (list 64 49750 500 84) (list 57 49750 500 71) (list 66 50250 250 85) (list 64 50250 250 52) (list 60 50250 250 54) (list 57 50250 250 59) (list 52 50500 125 84) (list 47 50500 125 81) (list 40 50625 125 85) (list 71 50750 125 57) (list 64 50875 500 56) (list 59 50875 500 79) (list 64 51375 125 88) (list 39 51500 125 51) (list 61 51625 125 61) (list 47 51625 125 81) (list 66 51750 250 84) (list 40 51750 250 79) (list 57 52023 500 65) (list 78 52000 500 65) (list 64 52500 167 83) (list 60 52500 167 50) (list 57 52500 167 52) (list 45 52714 167 77) (list 39 52667 167 57) (list 64 52833 292 80) (list 47 52833 292 80) (list 40 52833 292 69) (list 71 53125 500 85) (list 67 53125 500 55) (list 60 53125 500 61) (list 71 53625 250 68) (list 69 53875 125 86) (list 52 53875 125 56) (list 47 53875 125 87) (list 64 54000 250 95) (list 40 54000 250 80) (list 66 54250 375 88) (list 59 54625 250 58) (list 64 54875 125 97) (list 52 54875 125 65) (list 47 54875 125 88) (list 62 55000 286 74) (list 40 55000 286 79) (list 69 55286 429 86) (list 66 55286 429 55) (list 59 55286 429 69) (list 67 55714 143 105) (list 57 55857 268 79) (list 60 56215 500 83) (list 57 56215 500 70) (list 53 56125 500 78) (list 47 56125 500 70) (list 40 56125 500 98) (list 60 56625 250 54) (list 60 56875 292 70) (list 53 56875 292 76) (list 47 57167 167 96) (list 40 57333 167 84) (list 60 57500 333 100) (list 62 57833 167 104) (list 59 57833 167 51) (list 39 58000 125 42) (list 52 58125 125 66) (list 47 58125 125 86) (list 64 58250 250 104) (list 40 58250 250 80) (list 57 58500 125 57) (list 66 58625 375 115) (list 67 59000 250 114) (list 69 59321 125 110) (list 54 59321 125 73) (list 47 59250 125 107) (list 47 59421 125 76) (list 40 59375 125 82) (list 83 59500 250 64) (list 57 59500 250 77) (list 71 59750 125 69) (list 59 59875 375 51) (list 52 59875 375 48) (list 69 60250 250 67) (list 54 60250 250 57) (list 52 60250 250 71) (list 52 60575 250 70) (list 57 60500 250 63) (list 41 60500 250 91) (list 57 60750 250 58) (list 54 60750 250 68) (list 51 60750 250 69) (list 45 60750 250 82) (list 36 60750 250 89) (list 47 61000 125 73) (list 35 61125 375 58) (list 45 61500 250 62) (list 83 61817 125 65) (list 68 61817 125 56) (list 47 61817 125 89) (list 75 61750 125 87) (list 56 61750 125 60) (list 40 61875 292 71) (list 63 62212 333 47) (list 71 62167 333 95) (list 75 62600 167 50) (list 59 62500 167 61) (list 56 62500 167 71) (list 71 62731 167 67) (list 56 62731 167 57) (list 54 62731 167 72) (list 51 62667 167 54) (list 47 62893 310 85) (list 39 62893 310 60) (list 44 62833 310 62) (list 75 63143 286 82) (list 66 63143 286 59) (list 57 63143 286 68) (list 45 63143 286 77) (list 40 63143 286 102) (list 47 63527 429 83) (list 75 63429 429 98) (list 68 63857 143 107) (list 76 64000 500 75) (list 47 64000 500 104) (list 40 64000 500 108) (list 56 64500 125 77) (list 47 64500 125 90) (list 63 64625 250 53) (list 56 64875 125 63) (list 47 65000 167 80) (list 44 65000 167 69) (list 39 65000 167 55) (list 75 65167 167 99) (list 66 65167 167 60) (list 57 65167 167 73) (list 40 65167 167 99) (list 71 65333 167 96) (list 75 65500 167 110) (list 40 65667 333 103) (list 75 66000 167 72) (list 56 66000 167 63) (list 47 66000 167 93) (list 66 66235 167 74) (list 63 66167 167 62) (list 66 66417 167 85) (list 40 66333 167 79) (list 59 66500 167 81) (list 56 66500 167 65) (list 63 66667 167 79) (list 47 66833 167 98) (list 39 66833 167 93) (list 66 67000 250 59) (list 57 67000 250 81) (list 40 67000 250 107) (list 75 67250 500 94) (list 78 67750 417 105) (list 75 67750 417 80) (list 47 67750 417 72) (list 40 67750 417 101) (list 75 68167 167 98) (list 56 68167 167 59) (list 47 68167 167 98) (list 40 68167 167 87) (list 73 68403 333 86) (list 63 68356 333 61) (list 47 68333 333 62) (list 59 68667 167 87) (list 56 68667 167 75) (list 74 68833 167 69) (list 56 68833 167 71) (list 47 69000 500 90) (list 39 69000 500 66) (list 57 69500 333 77) (list 40 69500 333 109) (list 40 69833 292 108) (list 47 70125 125 98) (list 40 70125 125 105) (list 73 70250 250 100) (list 75 70500 125 99) (list 68 70625 375 82) (list 59 70625 375 103) (list 56 70625 375 62) (list 47 71000 250 95) (list 83 71344 750 82) (list 85 71250 750 78) (list 47 71250 750 92) (list 44 71250 750 73) (list 40 71250 750 100) (list 47 72069 125 84) (list 57 72000 125 77) (list 83 72194 250 84) (list 47 72194 250 97) (list 68 72125 250 82) (list 40 72470 250 74) (list 56 72375 250 57) (list 80 72625 375 99) (list 75 73094 125 100) (list 47 73094 125 65) (list 68 73000 125 55) (list 63 73000 125 63) (list 59 73000 125 70) (list 56 73125 250 65) (list 47 73375 500 79) (list 44 73375 500 69) (list 66 73875 250 66) (list 57 73875 250 72) (list 40 73875 250 101) (list 75 74213 125 88) (list 73 74125 125 84) (list 47 74125 125 67) (list 40 74125 125 88) (list 47 74250 250 113) (list 75 74500 250 100) (list 56 74500 250 57) (list 52 74500 250 69) (list 47 74500 250 78) (list 75 74750 250 82) (list 59 75000 250 74) (list 56 75000 250 76) (list 75 75250 250 73) (list 75 75500 125 102) (list 47 75500 125 83) (list 39 75500 125 67) (list 69 75625 375 55) (list 40 75625 375 101) (list 57 76000 167 68) (list 47 76167 167 82) (list 40 76167 167 92) (list 73 76333 333 80) (list 47 76333 333 89) (list 71 76667 167 91) (list 54 76667 167 84) (list 47 76667 167 86) (list 68 76833 167 82) (list 56 76833 167 65) (list 63 77000 333 100) (list 59 77000 333 76) (list 56 77333 333 59) (list 47 77333 333 66) (list 47 77667 500 87) (list 44 77667 500 64) (list 39 77667 500 77) (list 57 78167 333 74) (list 47 78167 333 85) (list 39 78167 333 89) (list 47 78500 167 75) (list 40 78500 167 95) (list 47 78723 167 74) (list 64 78667 167 86) (list 56 78667 167 78) (list 83 78833 167 91) (list 59 79000 125 85) (list 78 79125 250 61) (list 71 79125 250 73) (list 64 79125 250 53) (list 56 79125 250 64) (list 47 79125 250 82) (list 83 79375 125 61) (list 37 79554 125 48) (list 47 79500 125 73) (list 40 79625 250 86) (list 57 79968 125 67) (list 54 79968 125 59) (list 71 79875 125 86) (list 63 80000 167 88) (list 71 80167 167 71) (list 61 80333 167 65) (list 40 80591 333 73) (list 71 80500 333 75) (list 63 80833 334 81) (list 47 80833 334 78) (list 40 80833 334 88) (list 56 81213 500 59) (list 52 81167 500 73) (list 59 81754 167 51) (list 71 81667 167 78) (list 64 81667 167 83) (list 47 81833 167 94) (list 71 82000 143 77) (list 40 82000 143 95) (list 68 82143 143 95) (list 83 82286 143 77) (list 66 82429 286 87) (list 71 82714 286 90) (list 64 83000 250 76) (list 52 83000 250 68) (list 47 83000 250 82) (list 71 83250 125 71) (list 59 83250 125 61) (list 56 83250 125 79) (list 56 83375 375 50) (list 83 83750 250 65) (list 68 84000 400 78) (list 47 84000 400 88) (list 40 84000 400 74) (list 63 84500 400 83) (list 57 84400 400 77) (list 40 84400 400 102) (list 40 84800 200 106) (list 47 85000 333 80) (list 40 85000 333 98) (list 59 85333 333 83) (list 71 85667 333 74) (list 56 85667 333 63) (list 59 86000 143 71) (list 47 86143 286 93) (list 71 86429 286 114) (list 57 86429 286 81) (list 47 86429 286 83) (list 40 86429 286 98) (list 47 86714 411 89) (list 40 87125 250 98) (list 64 87375 375 107) (list 47 87375 375 90) (list 56 87750 417 66) (list 52 87750 417 85) (list 52 88260 167 79) (list 40 88167 167 81) (list 66 88424 167 102) (list 47 88333 167 91) (list 40 88500 500 74) (list 64 89000 167 80) (list 57 89000 167 64) (list 54 89000 167 62) (list 64 89167 167 48) (list 61 89167 167 43) (list 57 89167 167 55) (list 54 89167 167 56) (list 64 89393 333 100) (list 47 89393 333 79) (list 52 89333 333 50) (list 59 89667 333 80) (list 40 89667 333 77) (list 64 90000 167 111) (list 56 90000 167 66) (list 52 90000 167 61) (list 52 90265 167 61) (list 83 90167 167 69) (list 64 90379 167 74) (list 56 90333 167 54) (list 61 90500 167 73) (list 47 90500 167 79) (list 40 90745 167 75) (list 66 90667 167 99) (list 64 90833 417 77) (list 57 90833 417 60) (list 54 90833 417 55) (list 66 91250 250 83) (list 64 91500 125 77) (list 57 91500 125 55) (list 54 91500 125 53) (list 40 91500 125 60) (list 47 91625 250 87) (list 40 91875 125 76) (list 64 92000 286 84) (list 61 92000 286 52) (list 57 92000 286 72) (list 83 92286 286 67) (list 71 92571 143 79) (list 57 92571 143 70) (list 52 92714 143 58) (list 47 92714 143 92) (list 40 92910 518 76) (list 67 92857 518 90) (list 78 93375 250 74) (list 69 93375 250 61) (list 66 93375 250 75) (list 69 93625 375 57) (list 64 93625 375 90) (list 40 94066 500 73) (list 47 94000 500 93) (list 64 94500 250 96) (list 57 94500 250 66) (list 68 94750 250 55) (list 57 94750 250 67) (list 61 95000 143 74) (list 47 95000 143 82) (list 66 95143 429 66) (list 40 95143 429 70) (list 64 95634 286 92) (list 69 95571 286 64) (list 62 95571 286 60) (list 69 95857 143 57) (list 64 95857 143 75) (list 62 95857 143 48) (list 59 95857 143 48) (list 47 96000 250 81) (list 40 96000 250 80) (list 64 96250 125 85) (list 40 96250 125 69) (list 71 96375 500 73) (list 67 96375 500 59) (list 60 96875 125 51) (list 69 97000 250 78) (list 52 97000 250 56) (list 47 97000 250 77) (list 64 97250 250 86) (list 40 97250 250 75) (list 71 97500 500 59) (list 66 97500 500 94) (list 63 97500 500 56) (list 66 98000 125 83) (list 64 98125 375 87) (list 52 98125 375 64) (list 47 98125 375 78) (list 62 98500 250 78) (list 40 98500 250 82) (list 69 98750 125 81) (list 66 98750 125 54) (list 62 98750 125 56) (list 59 98750 125 55) (list 52 98875 250 55) (list 52 99222 125 59) (list 67 99125 125 87) (list 54 99250 750 66) (list 57 100000 200 72) (list 47 100000 200 73) (list 41 100000 200 125) (list 40 100200 200 90) (list 46 100400 400 70) (list 40 100888 400 83) (list 47 100800 400 96) (list 60 101200 200 104) (list 62 101400 200 107) (list 47 101600 200 88) (list 64 101800 200 107) (list 47 101800 200 86) (list 40 101800 200 78) (list 57 102000 375 56) (list 66 102375 250 104) (list 67 102625 125 108) (list 47 102625 125 77) (list 69 102750 125 76) (list 47 102750 125 85) (list 40 102875 554 78) (list 70 103429 286 109) (list 57 103429 286 59) (list 83 103714 143 50) (list 71 103714 143 54) (list 52 103714 143 48) (list 64 103857 143 71) (list 38 103857 143 62) (list 72 104000 125 86) (list 60 104000 125 64) (list 57 104000 125 63) (list 52 104000 125 81) (list 41 104000 125 73) (list 60 104168 500 61) (list 51 104168 500 74) (list 35 104168 500 76) (list 39 104125 500 69) (list 47 104625 125 78) (list 45 104750 250 64) (list 40 105074 250 85) (list 45 105000 250 38) (list 47 105250 250 77) (list 40 105250 250 88) (list 59 105500 250 65) (list 52 105817 125 57) (list 55 105750 125 56) (list 67 105875 250 42) (list 64 105875 250 42) (list 59 105875 250 50) (list 47 106125 250 83) (list 45 106125 250 75) (list 66 106375 375 77) (list 40 106375 375 73) (list 67 106750 250 53) (list 64 106750 250 75) (list 59 106750 250 51) (list 67 107000 167 50) (list 63 107000 167 49) (list 47 107000 167 66) (list 64 107167 167 90) (list 52 107167 167 52) (list 47 107167 167 74) (list 40 107167 167 70) (list 59 107333 500 68) (list 67 107833 292 52) (list 64 107833 292 102) (list 62 107833 292 47) (list 67 108125 125 54) (list 59 108125 125 53) (list 64 108250 125 103) (list 47 108250 125 78) (list 40 108250 125 86) (list 66 108375 375 96) (list 40 108375 375 80) (list 64 108750 375 87) (list 59 108750 375 51) (list 52 108750 375 50) (list 67 109220 125 36) (list 63 109220 125 48) (list 59 109220 125 52) (list 39 109125 125 57) (list 64 109250 250 88) (list 47 109250 250 78) (list 40 109250 250 73) (list 40 109500 375 70) (list 71 109875 268 70) (list 67 109875 268 55) (list 59 109875 268 60) (list 67 110143 143 58) (list 59 110143 143 69) (list 47 110286 143 89) (list 67 110520 286 98) (list 66 110429 286 84) (list 40 110429 286 76) (list 66 110714 286 107) (list 57 110714 286 65) (list 64 111000 143 45) (list 67 111194 143 43) (list 57 111194 143 58) (list 64 111143 143 75) (list 60 111143 143 53) (list 47 111370 286 83) (list 52 111286 286 43) (list 59 111660 679 62) (list 40 111571 679 68) (list 64 112250 125 104) (list 61 112375 125 64) (list 47 112375 125 80) (list 64 112500 250 67) (list 40 112500 250 75) (list 71 112808 125 85) (list 57 112808 125 84) (list 67 112750 125 87) (list 66 112956 125 70) (list 67 112875 125 82) (list 39 113064 143 41) (list 64 113000 143 76) (list 67 113143 143 49) (list 60 113143 143 56) (list 57 113143 143 54) (list 64 113286 143 75) (list 47 113429 286 77) (list 40 113714 286 81) (list 71 114000 250 99) (list 60 114000 250 65) (list 59 114250 125 33) (list 47 114443 125 37) (list 69 114375 125 77) (list 64 114565 250 91) (list 47 114565 250 80) (list 45 114500 250 93) (list 40 114750 250 77) (list 71 115000 143 57) (list 66 115000 143 91) (list 59 115143 143 42) (list 78 115286 143 67) (list 64 115429 143 75) (list 67 115571 143 77) (list 62 115571 143 68) (list 52 115571 143 60) (list 47 115571 143 78) (list 40 115758 143 78) (list 61 115714 143 76) (list 65 115857 143 78) (list 69 116043 167 63) (list 67 116043 167 85) (list 59 116043 167 63) (list 70 116000 167 84) (list 68 116167 167 76) (list 72 116333 167 83) (list 52 116333 167 68) (list 75 116500 167 87) (list 39 116726 167 97) (list 80 116667 167 97) (list 52 116667 167 80) (list 57 116833 334 83) (list 47 116833 334 84) (list 41 116833 334 112) (list 72 117239 167 81) (list 74 117167 167 92) (list 64 117426 167 108) (list 65 117333 167 110) (list 60 117546 167 87) (list 62 117500 167 86) (list 59 117720 167 102) (list 39 117667 167 75) (list 53 117922 500 73) (list 47 117922 500 80) (list 59 117833 500 94) (list 52 117833 500 68) (list 40 118333 333 79) (list 59 118667 167 75) (list 60 118833 167 78) (list 47 118833 167 74) (list 76 119070 143 74) (list 62 119000 143 81) (list 40 119000 143 89) (list 35 119000 143 68) (list 57 119143 429 57) (list 66 119571 143 94) (list 67 119714 143 94) (list 47 119714 143 57) (list 52 119857 268 57) (list 47 119857 268 91) (list 69 120125 125 72) (list 47 120125 125 72) (list 40 120125 125 74) (list 64 120250 250 46) (list 57 120500 250 63) (list 52 120500 250 71) (list 83 120750 250 56) (list 52 120750 250 65) (list 39 121000 286 54) (list 57 121286 143 73) (list 52 121286 143 86) (list 41 121286 143 94) (list 57 121522 286 71) (list 60 121429 286 61) (list 54 121429 286 76) (list 51 121429 286 78) (list 47 121429 286 85) (list 35 121780 143 54) (list 47 121714 143 73) (list 45 121857 143 60) (list 52 122041 286 46) (list 54 122000 286 61) (list 40 122368 143 92) (list 55 122348 143 64) (list 69 122286 143 80) (list 47 122429 143 94) (list 54 122571 429 111) (list 40 123000 167 78) (list 66 123167 167 65) (list 59 123167 167 62) (list 52 123167 167 77) (list 47 123333 500 98) (list 40 123833 167 81) (list 57 124000 167 85) (list 47 124000 167 89) (list 40 124000 167 116) (list 40 124167 167 98) (list 63 124333 167 90) (list 62 124333 167 70) (list 47 124333 167 82) (list 59 124500 167 82) (list 52 124500 167 68) (list 59 124746 167 88) (list 60 124667 167 101) (list 47 124667 167 71) (list 60 124893 167 94) (list 59 124833 167 68) (list 52 125000 125 74) (list 59 125125 250 80) (list 55 125125 250 62) (list 59 125375 125 82) (list 47 125500 250 94) (list 64 125750 125 57) (list 59 125750 125 70) (list 57 125750 125 64) (list 47 125930 375 68) (list 54 125875 375 84) (list 59 126250 250 57) (list 54 126250 250 59) (list 40 126500 250 107) (list 47 126750 250 84) (list 40 126750 250 97) (list 64 127000 167 91) (list 55 127000 167 68) (list 69 127251 167 83) (list 59 127251 167 73) (list 52 127251 167 71) (list 47 127251 167 74) (list 67 127167 167 96) (list 74 127333 167 80) (list 73 127333 167 98) (list 79 127500 167 102) (list 52 127500 167 82) (list 85 127732 333 106) (list 39 127732 333 75) (list 83 127667 333 78) (list 81 127667 333 104) (list 47 127667 333 85) (list 54 128000 125 89) (list 40 128000 125 108) (list 47 128125 125 65) (list 54 128250 375 69) (list 40 128250 375 99) (list 47 128625 125 93) (list 52 128750 125 79) (list 47 128750 125 95) (list 74 128875 500 109) (list 73 129375 250 115) (list 52 129625 375 66) (list 47 129625 375 82) (list 47 130000 250 74) (list 39 130000 250 74) (list 54 130347 250 70) (list 61 130250 250 58) (list 40 130250 250 109) (list 40 130500 500 105) (list 73 131000 125 96) (list 69 131125 375 77) (list 52 131125 375 84) (list 47 131125 375 87) (list 69 131500 250 74) (list 66 131500 250 67) (list 40 131500 250 91) (list 55 131750 250 77) (list 47 132000 143 85) (list 71 132143 286 85) (list 54 132143 286 68) (list 40 132143 286 107) (list 52 132429 143 67) (list 40 132571 143 106) (list 64 132714 286 77) (list 47 133000 167 85) (list 40 133000 167 97) (list 60 133167 167 95) (list 59 133333 333 80) (list 60 133667 167 67) (list 59 133904 417 85) (list 69 133833 417 69) (list 52 133833 417 67) (list 59 134328 375 92) (list 60 134250 375 66) (list 60 134625 250 66) (list 47 134625 250 77) (list 40 134625 250 83) (list 59 134974 375 83) (list 54 134875 375 67) (list 40 134875 375 107) (list 40 135250 500 102) (list 69 135750 250 63) (list 52 135750 250 56) (list 47 135750 250 83) (list 59 136000 167 87) (list 71 136252 167 76) (list 69 136167 167 61) (list 52 136167 167 72) (list 47 136167 167 75) (list 47 136333 167 86) (list 40 136333 167 88) (list 71 136500 167 79) (list 57 136500 167 62) (list 40 136500 167 93) (list 83 136733 167 55) (list 54 136667 167 64) (list 47 136667 167 74) (list 52 136833 167 75) (list 40 137000 333 89) (list 47 137333 167 104) (list 52 137500 333 80) (list 47 137500 333 77) (list 45 137500 333 87) (list 59 137833 292 68) (list 55 137833 292 60) (list 52 137833 292 55) (list 69 138125 125 61) (list 62 138125 125 49) (list 55 138125 125 52) (list 52 138125 125 65) (list 47 138250 125 61) (list 47 138375 500 92) (list 71 138875 125 76) (list 57 138875 125 62) (list 54 138875 125 72) (list 46 138875 125 67) (list 40 138875 125 106) (list 47 139000 167 60) (list 40 139264 333 110) (list 54 139167 333 79) (list 47 139574 167 69) (list 40 139500 167 107) (list 55 139667 167 66) (list 71 139833 167 86) (list 52 140000 250 62) (list 71 140250 250 82) (list 40 140250 250 60) (list 52 140500 125 58) (list 47 140500 125 81) (list 57 140625 250 54) (list 54 140625 250 59) (list 40 140625 250 78) (list 57 140875 125 59) (list 64 141000 250 51) (list 61 141000 250 43) (list 47 141000 250 49) (list 54 141250 375 52) (list 47 141625 125 82) (list 45 141625 125 91) (list 54 141750 250 72) (list 40 141750 250 70) (list 76 142000 167 71) (list 66 142167 333 52) (list 62 142167 333 49) (list 59 142167 333 55) (list 76 142500 333 68) (list 47 142833 292 86) (list 38 142833 292 68) (list 40 143125 125 84) (list 71 143250 375 63) (list 67 143250 375 65) (list 64 143250 375 66) (list 59 143250 375 63) (list 69 143625 250 65) (list 60 143625 250 73) (list 47 143875 375 87) (list 39 143875 375 79) (list 47 144303 125 78) (list 69 144250 125 64) (list 54 144250 125 79) (list 40 144250 125 83) (list 71 144375 625 105) (list 71 145082 286 90) (list 69 145000 286 56) (list 66 145000 286 52) (list 59 145000 286 63) (list 47 145286 143 76) (list 38 145286 143 70) (list 40 145429 286 87) (list 71 145714 286 59) (list 67 145714 286 53) (list 52 145714 286 66) (list 69 146000 167 66) (list 47 146000 167 94) (list 40 146167 167 84) (list 76 146333 167 62) (list 69 146500 333 59) (list 66 146500 333 54) (list 62 146500 333 46) (list 76 146833 292 70) (list 47 146833 292 56) (list 47 147125 125 84) (list 38 147125 125 75) (list 40 147250 250 93) (list 71 147500 125 69) (list 52 147500 125 71) (list 55 147625 250 61) (list 52 147625 250 68) (list 76 147875 292 51) (list 72 147875 292 55) (list 69 147875 292 62) (list 57 147875 292 40) (list 47 148238 167 82) (list 45 148167 167 66) (list 40 148333 167 82) (list 71 148500 167 87) (list 67 148500 167 60) (list 64 148500 167 61) (list 60 148500 167 75) (list 52 148667 333 60) (list 60 149000 375 64) (list 57 149000 375 60) (list 38 149000 375 55) (list 47 149430 250 82) (list 45 149430 250 85) (list 38 149375 250 39) (list 69 149625 125 53) (list 40 149625 125 74) (list 71 149750 375 67) (list 64 149750 375 59) (list 60 149750 375 56) (list 74 150125 375 60) (list 71 150125 375 71) (list 67 150125 375 61) (list 47 150500 250 81) (list 62 150750 125 53) (list 40 150750 125 78) (list 67 150875 411 54) (list 59 150875 411 61) (list 62 151369 286 44) (list 59 151286 286 54) (list 55 151286 286 50) (list 55 151621 286 54) (list 39 151571 286 69) (list 57 151857 143 65) (list 47 151857 143 65) (list 41 151857 143 97) (list 40 152000 125 72) (list 60 152125 125 43) (list 60 152250 250 51) (list 57 152250 250 57) (list 47 152500 125 68) (list 40 152500 125 76) (list 52 152625 250 48) (list 57 152875 125 57) (list 53 152875 125 65) (list 41 153000 375 72) (list 62 153375 375 40) (list 59 153375 375 51) (list 52 153750 250 68) (list 40 154079 375 85) (list 47 154000 375 79) (list 45 154000 375 83) (list 66 154375 375 61) (list 39 154826 125 37) (list 67 154750 125 51) (list 64 154750 125 45) (list 60 154750 125 50) (list 47 154875 125 73) (list 39 154875 125 73) (list 69 155000 250 62) (list 40 155000 250 78) (list 71 155250 250 64) (list 69 155500 250 64) (list 66 155500 250 58) (list 62 155500 250 47) (list 54 155750 250 46) (list 52 156000 143 69) (list 41 156000 143 76) (list 60 156143 714 67) (list 57 156143 714 71) (list 54 156143 714 68) (list 45 156143 714 63) (list 35 156143 714 63) (list 47 156857 268 74) (list 53 157125 125 52) (list 45 157125 125 60) (list 59 157250 250 83) (list 64 157568 125 87) (list 52 157568 125 60) (list 47 157568 125 81) (list 40 157500 125 95) (list 64 157625 250 66) (list 59 157625 250 69) (list 66 157875 250 102) (list 47 157875 250 78) (list 40 157875 250 75) (list 40 158125 125 93) (list 59 158250 250 32) (list 39 158500 375 57) (list 64 158948 125 83) (list 39 158948 125 60) (list 47 158875 125 63) (list 40 158875 125 55) (list 47 159000 333 80) (list 59 159333 167 94) (list 40 159333 167 77) (list 64 159500 167 101) (list 40 159765 167 79) (list 47 159667 167 70) (list 61 159919 167 63) (list 47 159919 167 76) (list 39 159919 167 70) (list 45 159833 167 74) (list 66 160000 143 99) (list 40 160000 143 88) (list 64 160143 143 87) (list 66 160286 286 107) (list 47 160571 429 72) (list 40 161051 125 57) (list 64 161000 125 93) (list 47 161125 125 80) (list 47 161250 125 55) (list 40 161250 125 88) (list 64 161375 125 93) (list 64 161500 250 64) (list 60 161500 250 55) (list 59 161500 250 70) (list 55 161750 375 51) (list 47 162125 125 79) (list 45 162125 125 91) (list 78 162328 125 82) (list 66 162328 125 72) (list 67 162250 125 78) (list 66 162250 125 82) (list 40 162250 125 83) (list 57 162375 250 63) (list 59 162625 375 56) (list 64 163000 333 94) (list 60 163000 333 54) (list 57 163000 333 58) (list 47 163000 333 69) (list 47 163333 167 85) (list 45 163333 167 86) (list 59 163500 167 84) (list 47 163500 167 67) (list 40 163500 167 81) (list 64 163667 167 100) (list 59 163932 167 59) (list 47 163833 167 76) (list 61 164064 167 75) (list 37 164064 167 85) (list 47 164000 167 59) (list 78 164167 167 73) (list 47 164167 167 84) (list 40 164167 167 86) (list 57 164333 167 60) (list 64 164572 333 93) (list 71 164500 333 98) (list 47 164833 292 69) (list 40 164833 292 61) (list 64 165125 375 77) (list 60 165125 375 53) (list 40 165125 375 65) (list 52 165544 125 47) (list 47 165544 125 72) (list 45 165544 125 87) (list 48 165500 125 64) (list 59 165625 250 54) (list 39 165625 250 79) (list 71 165875 250 82) (list 40 165875 250 81) (list 47 166148 375 58) (list 83 166125 375 47) (list 69 166500 125 82) (list 47 166500 125 87) (list 40 166500 125 88) (list 64 166625 375 97) (list 59 166625 375 63) (list 66 167000 167 96) (list 47 167167 167 74) (list 40 167167 167 68) (list 64 167333 167 96) (list 52 167333 167 64) (list 47 167333 167 98) (list 62 167500 167 83) (list 40 167500 167 89) (list 69 167667 762 83) (list 47 168429 286 96) (list 67 168714 143 101) (list 57 168857 143 74) (list 39 168857 143 67) (list 47 169000 375 76) (list 41 169000 375 115) (list 40 169375 250 84) (list 40 169688 125 101) (list 54 169625 125 78) (list 47 169625 125 86) (list 59 169750 125 75) (list 60 169875 125 107) (list 62 170000 333 115) (list 40 170000 333 70) (list 47 170333 333 87) (list 64 170667 167 108) (list 40 170667 167 84) (list 57 170833 167 56) (list 66 171000 250 105) (list 67 171250 375 104) (list 47 171250 375 65) (list 40 171250 375 65) (list 47 171625 250 96) (list 69 171875 125 84) (list 40 171875 125 83) (list 57 172000 500 77) (list 71 172590 250 62) (list 47 172567 250 53) (list 83 172500 250 65) (list 52 172500 250 69) (list 57 172835 250 64) (list 52 172835 250 84) (list 41 172835 250 86) (list 69 172750 250 71) (list 54 173065 125 77) (list 51 173065 125 77) (list 36 173065 125 87) (list 45 173000 125 74) (list 57 173125 125 61) (list 47 173125 125 74) (list 35 173125 125 59) (list 45 173250 125 66) (list 47 173443 375 85) (list 40 173443 375 90) (list 71 173375 375 97) (list 71 173750 125 105) (list 55 173875 125 95) (list 71 174000 167 93) (list 71 174264 167 83) (list 69 174167 167 67) (list 59 174167 167 63) (list 55 174167 167 57) (list 52 174167 167 61) (list 71 174333 333 98) (list 45 174333 333 71) (list 45 174764 167 58) (list 47 174667 167 75) (list 40 174667 167 71) (list 71 174833 367 98) (list 40 174833 367 108) (list 47 175277 200 59) (list 54 175200 200 81) (list 54 175400 200 84) (list 64 175695 200 100) (list 67 175600 200 100) (list 40 175870 200 103) (list 47 175800 200 92) (list 67 176000 333 106) (list 71 176404 167 94) (list 69 176333 167 72) (list 64 176333 167 80) (list 52 176333 167 56) (list 64 176586 167 82) (list 67 176500 167 97) (list 67 176724 167 92) (list 55 176667 167 64) (list 52 176667 167 67) (list 47 176667 167 94) (list 71 176933 167 70) (list 47 176933 167 70) (list 40 176933 167 105) (list 78 176833 167 72) (list 66 176833 167 57) (list 57 176833 167 69) (list 40 176833 167 65) (list 76 177045 429 72) (list 74 177000 429 96) (list 81 177429 143 89) (list 40 177429 143 93) (list 85 177571 286 86) (list 47 177571 286 73) (list 86 177857 310 80) (list 52 177857 310 57) (list 45 177857 310 82) (list 85 178167 167 75) (list 47 178167 167 68) (list 66 178380 167 50) (list 69 178333 167 65) (list 59 178333 167 55) (list 52 178333 167 57) (list 55 178500 167 51) (list 47 178667 167 74) (list 45 178667 167 67) (list 40 178667 167 77) (list 71 178833 167 70) (list 54 178833 167 63) (list 40 178833 167 99) (list 47 179000 500 65) (list 54 179500 500 72) (list 40 180000 250 101) (list 81 180250 250 98) (list 76 180594 125 91) (list 40 180594 125 86) (list 79 180500 125 102) (list 55 180500 125 56) (list 52 180500 125 62) (list 47 180500 125 71) (list 69 180625 375 67) (list 52 180625 375 61) (list 47 181000 143 80) (list 40 181000 143 80) (list 83 181228 143 64) (list 71 181143 143 76) (list 54 181143 143 67) (list 47 181143 143 67) (list 40 181143 143 105) (list 54 181286 286 54) (list 47 181571 286 60) (list 45 181571 286 62) (list 40 181571 286 83) (list 52 181857 143 81) (list 47 181857 143 74) (list 55 182000 167 64) (list 71 182167 167 73) (list 76 182333 333 90) (list 69 182333 333 62) (list 66 182333 333 52) (list 59 182333 333 46) (list 55 182333 333 57) (list 52 182333 333 58) (list 45 182736 167 82) (list 54 182667 167 67) (list 45 182919 167 59) (list 76 182833 167 100) (list 47 182833 167 78) (list 47 183098 200 69) (list 71 183000 200 64) (list 57 183000 200 58) (list 40 183000 200 98) (list 54 183200 400 52) (list 40 183600 200 101) (list 79 183889 200 73) (list 71 183800 200 67) (list 76 184000 125 61) (list 47 184000 125 70) (list 40 184000 125 90) (list 59 184125 125 60) (list 55 184125 125 58) (list 52 184125 125 67) (list 69 184250 125 64) (list 52 184250 125 69) (list 45 184375 375 62) (list 52 184750 125 66) (list 47 184875 125 73) (list 38 184875 125 64) (list 45 185000 167 57) (list 71 185167 167 64) (list 40 185167 167 97) (list 54 185333 333 65) (list 47 185333 333 63) (list 47 185667 167 77) (list 40 185667 167 105) (list 71 185833 167 92) (list 45 186086 250 88) (list 40 186086 250 85) (list 76 186000 250 92) (list 52 186000 250 57) (list 47 186000 250 66) (list 79 186250 500 105) (list 81 186750 250 105) (list 69 187000 125 68) (list 59 187000 125 55) (list 52 187000 125 55) (list 55 187125 250 62) (list 47 187375 250 71) (list 45 187375 250 65) (list 39 187375 250 61) (list 54 187711 125 64) (list 47 187711 125 68) (list 71 187625 125 66) (list 40 187625 125 100) (list 40 187750 393 105) (list 55 188143 143 68) (list 47 188143 143 76) (list 83 188286 286 77) (list 40 188286 286 92) (list 47 188571 143 81) (list 69 188714 286 66) (list 59 188714 286 55) (list 52 188714 286 58) (list 55 189000 333 64) (list 46 189333 167 77) (list 45 189333 167 62) (list 71 189500 167 66) (list 54 189500 167 69) (list 40 189500 167 101) (list 54 189667 167 79) (list 47 189833 292 59) (list 40 189833 292 79) (list 83 190214 250 85) (list 52 190214 250 72) (list 47 190214 250 80) (list 54 190125 250 80) (list 52 190450 125 66) (list 86 190375 125 78) (list 85 190375 125 89) (list 55 190375 125 60) (list 47 190375 125 70) (list 83 190500 250 69) (list 69 190750 250 68) (list 64 190750 250 50) (list 59 190750 250 65) (list 55 191000 143 58) (list 47 191000 143 57) (list 40 191193 143 74) (list 46 191143 143 96) (list 79 191286 143 85) (list 71 191286 143 66) (list 54 191286 143 71) (list 45 191286 143 71) (list 40 191286 143 97) (list 86 191528 286 91) (list 83 191429 286 73) (list 47 191429 286 77) (list 83 191714 286 84) (list 47 191714 286 66) (list 40 191714 286 100) (list 86 192000 125 102) (list 83 192125 125 76) (list 52 192125 125 56) (list 47 192125 125 80) (list 45 192125 125 82) (list 47 192295 250 72) (list 86 192250 250 82) (list 55 192250 250 58) (list 40 192250 250 79) (list 85 192500 125 84) (list 83 192500 125 75) (list 69 192625 125 63) (list 59 192625 125 59) (list 52 192625 125 59) (list 79 192750 125 99) (list 76 192875 125 94) (list 47 192875 125 84) (list 71 193099 167 71) (list 54 193099 167 70) (list 40 193099 167 104) (list 78 193000 167 92) (list 74 193167 500 90) (list 73 193667 167 104) (list 45 193833 292 84) (list 76 194223 125 103) (list 40 194125 125 105) (list 73 194250 125 96) (list 79 194375 125 71) (list 66 194375 125 93) (list 47 194375 125 81) (list 40 194375 125 93) (list 66 194570 125 79) (list 52 194570 125 61) (list 69 194500 125 67) (list 59 194500 125 53) (list 64 194625 125 75) (list 47 194625 125 63) (list 66 194750 375 73) (list 47 194750 375 69) (list 61 195125 125 71) (list 46 195125 125 71) (list 39 195125 125 60) (list 40 195250 125 99) (list 64 195375 375 86) (list 60 195750 375 84) (list 47 195750 375 71) (list 47 196210 125 67) (list 40 196210 125 90) (list 59 196125 125 76) (list 54 196250 250 86) (list 52 196500 500 50) (list 47 196500 500 65) (list 45 196500 500 80) (list 47 197023 125 61) (list 55 197000 125 49) (list 69 197125 125 61) (list 52 197250 125 69) (list 46 197375 125 79) (list 45 197375 125 66) (list 54 197500 250 67) (list 40 197500 250 107) (list 64 197750 375 102) (list 74 198216 125 72) (list 69 198216 125 72) (list 67 198125 125 98) (list 47 198250 250 79) (list 83 198596 125 83) (list 81 198596 125 77) (list 78 198500 125 91) (list 55 198500 125 59) (list 40 198500 125 84) (list 85 198625 375 93) (list 52 199045 125 58) (list 69 199000 125 72) (list 59 199000 125 66) (list 54 199125 125 69) (list 45 199125 125 60) (list 40 199125 125 69) (list 40 199306 125 69) (list 47 199250 125 95) (list 54 199453 125 77) (list 71 199375 125 93) (list 46 199375 125 76) (list 40 199375 125 88) (list 47 199558 375 61) (list 83 199500 375 88) (list 47 199875 125 65) (list 40 199875 125 99) (list 81 200000 167 71) (list 40 200228 167 85) (list 79 200167 167 95) (list 69 200167 167 69) (list 55 200167 167 56) (list 46 200167 167 78) (list 47 200333 167 62) (list 76 200500 333 98) (list 69 200833 167 67) (list 59 200833 167 58) (list 55 200833 167 53) (list 52 200833 167 51) (list 47 201000 250 63) (list 55 201250 375 63) (list 45 201705 250 72) (list 46 201625 250 84) (list 83 201927 125 86) (list 71 201875 125 79) (list 54 201875 125 57) (list 40 201875 125 86) (list 47 202000 250 74) (list 40 202250 250 98) (list 55 202592 250 51) (list 69 202500 250 73) (list 46 202500 250 81) (list 45 202500 250 86) (list 83 202750 250 85) (list 47 202750 250 67) (list 55 203100 375 60) (list 52 203100 375 54) (list 69 203000 375 64) (list 59 203000 375 63) (list 83 203375 250 92) (list 46 203375 250 57) (list 83 203694 250 90) (list 38 203694 250 61) (list 46 203625 250 84) (list 47 203964 125 80) (list 86 203875 125 80) (list 71 203875 125 73) (list 40 203875 125 102) (list 47 204000 167 64) (list 40 204167 167 107) (list 69 204333 167 63) (list 47 204333 167 79) (list 40 204333 167 96) (list 47 204500 500 76) (list 79 205082 286 84) (list 55 205082 286 54) (list 69 205000 286 82) (list 52 205000 286 59) (list 47 205286 143 70) (list 76 205429 143 105) (list 45 205571 286 68) (list 40 205571 286 67) (list 71 205937 143 85) (list 54 205937 143 60) (list 40 205937 143 97) (list 46 205857 143 54) (list 40 206000 143 88) (list 69 206143 143 76) (list 47 206143 143 84) (list 78 206286 143 104) (list 54 206429 429 96) (list 69 206857 143 71) (list 59 206857 143 61) (list 52 206857 143 70) (list 76 207000 125 84) (list 55 207000 125 64) (list 47 207000 125 65) (list 74 207168 125 86) (list 71 207125 125 84) (list 46 207322 250 82) (list 38 207322 250 62) (list 78 207250 250 88) (list 46 207250 250 84) (list 54 207591 125 73) (list 76 207500 125 84) (list 71 207500 125 94) (list 40 207500 125 92) (list 54 207625 125 74) (list 47 207750 125 57) (list 40 207750 125 92) (list 55 207875 125 85) (list 69 208000 167 77) (list 52 208000 167 79) (list 46 208000 167 86) (list 74 208167 167 82) (list 47 208167 167 66) (list 78 208385 167 86) (list 76 208385 167 84) (list 47 208385 167 76) (list 54 208333 167 70) (list 74 208500 167 74) (list 40 208500 167 86) (list 74 208667 167 84) (list 69 208667 167 76) (list 59 208667 167 58) (list 78 208887 167 82) (list 55 208833 167 57) (list 46 208833 167 68) (list 81 209087 167 91) (list 47 209087 167 79) (list 83 209000 167 80) (list 40 209000 167 81) (list 74 209263 167 81) (list 76 209167 167 90) (list 71 209333 167 85) (list 54 209333 167 64) (list 40 209333 167 101) (list 74 209500 167 77) (list 78 209667 167 95) (list 40 209833 167 99) (list 76 210000 125 79) (list 69 210218 125 73) (list 52 210218 125 73) (list 47 210218 125 94) (list 74 210125 125 104) (list 78 210250 125 91) (list 83 210375 125 93) (list 47 210375 125 68) (list 69 210565 250 85) (list 59 210565 250 61) (list 85 210500 250 90) (list 76 210830 125 78) (list 55 210830 125 67) (list 52 210750 125 64) (list 74 210875 125 99) (list 71 210875 125 67) (list 74 211000 333 91) (list 38 211404 333 63) (list 76 211333 333 76) (list 47 211333 333 98) (list 71 211696 167 81) (list 47 211696 167 66) (list 40 211696 167 94) (list 45 211667 167 83) (list 76 211833 417 82) (list 54 211833 417 73) (list 73 212330 125 101) (list 47 212330 125 66) (list 74 212250 125 97) (list 85 212375 125 75) (list 40 212375 125 87) (list 47 212500 250 67) (list 45 212500 250 96) (list 64 212833 250 83) (list 55 212750 250 58) (list 54 212750 250 87) (list 52 212750 250 58) (list 69 213000 333 64) (list 62 213000 333 79) (list 59 213000 333 58) (list 64 213333 167 82) (list 40 213566 167 83) (list 46 213500 167 96) (list 71 213760 167 84) (list 40 213760 167 100) (list 47 213667 167 61) (list 54 213833 417 69) (list 47 213833 417 70) (list 40 214250 125 106) (list 46 214375 250 85) (list 40 214375 250 94) (list 67 214716 125 92) (list 47 214716 125 72) (list 64 214625 125 85) (list 83 214750 250 64) (list 54 214750 250 107) (list 71 215099 143 68) (list 59 215099 143 56) (list 52 215099 143 58) (list 55 215000 143 57) (list 52 215143 143 75) (list 40 215345 143 89) (list 47 215286 143 77) (list 45 215286 143 72) (list 76 215429 143 80) (list 47 215571 143 71) (list 54 215714 143 69) (list 40 215857 143 92) (list 47 216075 143 84) (list 67 216000 143 84) (list 64 216143 143 76) (list 47 216286 143 80) (list 67 216487 143 77) (list 55 216487 143 79) (list 54 216487 143 90) (list 39 216429 143 73) (list 64 216571 143 72) (list 69 216714 286 75) (list 52 216714 286 55) (list 67 217063 125 88) (list 55 217000 125 63) (list 47 217000 125 65) (list 64 217125 125 80) (list 71 217328 125 63) (list 67 217328 125 85) (list 46 217250 125 69) (list 45 217250 125 84) (list 40 217375 375 99) (list 67 217841 125 87) (list 47 217841 125 80) (list 64 217750 125 80) (list 64 217875 268 93) (list 40 218143 143 105) (list 67 218286 143 86) (list 47 218429 286 103) (list 55 218714 286 88) (list 47 218714 286 85) (list 52 219080 333 66) (list 79 219000 333 84) (list 59 219000 333 58) (list 47 219423 167 49) (list 55 219401 167 56) (list 85 219333 167 88) (list 45 219500 167 82) (list 54 219667 167 50) (list 46 219667 167 75) (list 39 219667 167 69) (list 47 219833 167 64) (list 40 219833 167 102) (list 54 220000 167 77) (list 83 220167 167 87) (list 40 220416 167 71) (list 52 220333 167 67) (list 47 220333 167 78) (list 83 220500 167 80) (list 55 220667 167 73) (list 54 220667 167 87) (list 59 220833 292 52) (list 55 221125 375 55) (list 52 221125 375 61) (list 47 221500 125 68) (list 46 221625 125 60) (list 40 221625 125 89) (list 45 221832 125 68) (list 47 221750 125 97) (list 40 221913 250 110) (list 47 221875 250 58) (list 47 222125 250 75) (list 40 222375 250 108) (list 46 222625 125 110) (list 83 222750 125 97) (list 86 222875 250 91) (list 69 222875 250 75) (list 54 222875 250 81) (list 47 223171 250 62) (list 40 223125 250 75) (list 46 223474 250 65) (list 59 223375 250 49) (list 52 223375 250 60) (list 83 223625 125 68) (list 55 223625 125 72) (list 86 223750 375 90) (list 54 223750 375 60) (list 47 223750 375 80) (list 71 224125 375 80) (list 40 224125 375 101) (list 47 224500 125 50) (list 47 224722 125 86) (list 40 224722 125 91) (list 54 224625 125 71) (list 79 224750 125 98) (list 76 224875 250 82) (list 47 224875 250 90) (list 76 225209 250 79) (list 54 225209 250 85) (list 47 225209 250 65) (list 69 225125 250 73) (list 59 225375 125 47) (list 52 225375 125 50) (list 55 225562 250 54) (list 46 225562 250 52) (list 76 225500 250 81) (list 76 225750 250 94) (list 64 225750 250 32) (list 54 225750 250 49) (list 46 225750 250 79) (list 45 225750 250 63) (list 38 225750 250 56) (list 47 226069 167 53) (list 47 226000 167 46) (list 71 226167 333 75) (list 40 226167 333 97) (list 47 226500 167 75) (list 40 226667 167 97) (list 47 226833 292 76) (list 46 227125 125 104) (list 76 227324 250 78) (list 55 227324 250 85) (list 69 227250 250 67) (list 47 227250 250 71) (list 55 227500 125 52) (list 76 227724 125 83) (list 59 227625 125 48) (list 52 227625 125 57) (list 54 227750 125 55) (list 46 227750 125 103) (list 38 227750 125 66) (list 40 227875 250 93) (list 71 228125 125 89) (list 47 228125 125 76) (list 64 228250 250 76) (list 54 228500 250 63) (list 40 228500 250 85) (list 67 228750 536 88) (list 52 228750 536 58) (list 47 228750 536 82) (list 45 228750 536 90) (list 55 229286 143 64) (list 47 229520 143 73) (list 69 229429 143 69) (list 64 229429 143 69) (list 47 229429 143 67) (list 55 229642 143 71) (list 52 229571 143 54) (list 52 229714 143 54) (list 40 229714 143 52) (list 62 229857 286 44) (list 55 229857 286 56) (list 54 230143 286 61) (list 46 230143 286 86) (list 45 230143 286 77) (list 40 230143 286 62) (list 71 230429 143 94) (list 40 230429 143 108) (list 40 230571 286 88) (list 64 230857 143 68) (list 52 230857 143 72) (list 67 231000 286 81) (list 52 231000 286 63) (list 47 231000 286 83) (list 69 231286 286 107) (list 55 231658 286 56) (list 52 231571 286 81) (list 47 231957 268 64) (list 59 231857 268 58) (list 55 231857 268 58) (list 52 231857 268 64) (list 46 232125 375 74) (list 45 232591 250 66) (list 47 232500 250 85) (list 74 232750 125 85) (list 54 232750 125 62) (list 40 232750 125 104) (list 47 232875 554 54) (list 40 233429 143 88) (list 59 233640 286 58) (list 55 233617 286 60) (list 71 233571 286 81) (list 52 233571 286 63) (list 47 233571 286 89) (list 55 233905 286 50) (list 52 233905 286 53) (list 54 233857 286 82) (list 47 233857 286 79) (list 55 234232 143 58) (list 47 234232 143 55) (list 66 234143 143 45) (list 59 234143 143 46) (list 52 234143 143 54) (list 40 234339 143 72) (list 46 234286 143 84) (list 45 234286 143 71) (list 47 234429 143 75) (list 40 234429 143 101) (list 54 234571 143 63) (list 47 234571 143 71) (list 46 234792 143 76) (list 64 234714 143 91) (list 69 234857 268 77) (list 40 234857 268 94)) (list (list 69 235125 125 78) (list 52 235125 125 53) (list 47 235125 125 71) (list 69 235250 125 81) (list 55 235250 125 59) (list 47 235375 250 61) (list 69 235625 375 88) (list 47 236000 167 81) (list 38 236000 167 70) (list 38 236167 167 76) (list 47 236416 167 76) (list 74 236333 167 78) (list 40 236333 167 98) (list 46 236500 167 74) (list 73 236667 167 68) (list 40 236667 167 87) (list 76 236833 310 74) (list 59 237143 286 62) (list 52 237143 286 68) (list 46 237143 286 98) (list 55 237429 143 59) (list 54 237429 143 83) (list 47 237429 143 65) (list 52 237571 143 76) (list 55 237714 143 66) (list 55 237857 143 53) (list 52 237857 143 56) (list 46 238000 375 80) (list 40 238000 375 63) (list 47 238375 125 67) (list 45 238375 125 76) (list 40 238375 125 98) (list 66 238592 125 88) (list 67 238500 125 82) (list 40 238625 125 105) (list 73 238750 125 95) (list 69 238875 250 78) (list 52 238875 250 74) (list 46 238875 250 90) (list 79 239125 500 92) (list 85 239722 375 76) (list 54 239722 375 79) (list 40 239722 375 75) (list 47 239625 375 77) (list 69 240000 250 65) (list 52 240000 250 63) (list 55 240250 125 49) (list 83 240375 250 71) (list 46 240625 125 82) (list 71 240797 125 64) (list 40 240750 125 90) (list 80 240875 125 94) (list 47 240875 125 72) (list 69 241091 250 60) (list 52 241091 250 57) (list 47 241091 250 86) (list 78 241000 250 79) (list 69 241326 500 70) (list 47 241326 500 64) (list 52 241250 500 103) (list 47 241811 250 69) (list 73 241750 250 90) (list 69 241750 250 65) (list 52 241750 250 71) (list 79 242000 125 77) (list 55 242000 125 89) (list 46 242179 125 81) (list 83 242125 125 82) (list 55 242125 125 60) (list 45 242125 125 68) (list 40 242250 125 79) (list 80 242375 250 91) (list 47 242375 250 84) (list 40 242375 250 100) (list 47 242625 125 80) (list 47 242750 125 69) (list 40 242750 125 92) (list 52 242875 458 61) (list 47 242875 458 91) (list 54 243333 167 73) (list 52 243333 167 64) (list 47 243333 167 73) (list 71 243500 167 89) (list 47 243734 167 70) (list 74 243667 167 71) (list 73 243667 167 90) (list 69 243667 167 58) (list 52 243667 167 53) (list 83 243917 167 80) (list 55 243917 167 56) (list 81 243833 167 73) (list 46 244000 143 75) (list 39 244000 143 52) (list 47 244228 143 68) (list 45 244143 143 85) (list 80 244379 286 86) (list 47 244379 286 70) (list 71 244286 286 73) (list 40 244286 286 102) (list 40 244571 143 87) (list 78 244714 143 93) (list 52 244912 143 51) (list 74 244857 143 86) (list 69 244857 143 60) (list 47 244857 143 87) (list 55 245000 333 57) (list 52 245379 333 48) (list 55 245333 333 76) (list 46 245333 333 75) (list 69 245667 167 65) (list 55 245667 167 48) (list 52 245667 167 56) (list 47 245833 167 63) (list 46 246000 286 76) (list 40 246000 286 69) (list 45 246286 286 71) (list 76 246571 143 74) (list 47 246571 143 71) (list 40 246571 143 101) (list 74 246714 143 83) (list 47 246714 143 69) (list 40 246857 143 105) (list 40 247043 167 86) (list 74 247000 167 76) (list 45 247000 167 91) (list 83 247191 167 62) (list 47 247167 167 55) (list 55 247414 167 49) (list 52 247414 167 52) (list 54 247333 167 99) (list 69 247500 167 58) (list 52 247500 167 75) (list 71 247667 167 75) (list 46 247833 167 87) (list 40 248000 167 104) (list 69 248167 167 66) (list 47 248167 167 74) (list 57 248333 167 62) (list 47 248500 333 67) (list 45 248500 333 55) (list 40 248500 333 92) (list 67 248833 542 75) (list 64 249375 250 83) (list 45 249375 250 72) (list 59 249625 125 71) (list 55 249625 125 62) (list 47 249625 125 66) (list 40 249625 125 61) (list 55 249750 250 59) (list 69 250000 250 53) (list 52 250000 250 51) (list 47 250250 250 66) (list 46 250500 125 72) (list 45 250500 125 68) (list 47 250670 250 73) (list 40 250625 250 105) (list 40 250875 458 102) (list 47 251333 167 82) (list 64 251500 167 75) (list 69 251745 167 104) (list 40 251745 167 73) (list 67 251667 167 92) (list 55 251667 167 80) (list 69 251929 167 106) (list 55 251833 167 54) (list 46 252000 167 89) (list 52 252167 167 55) (list 40 252167 167 78) (list 47 252333 333 76) (list 40 252333 333 103) (list 47 252667 167 69) (list 40 252667 167 98) (list 79 252833 167 66) (list 67 252833 167 67) (list 40 253072 250 91) (list 64 253000 250 84) (list 45 253000 250 86) (list 47 253319 125 55) (list 52 253250 125 52) (list 55 253375 125 79) (list 40 253375 125 76) (list 69 253500 125 52) (list 55 253500 125 56) (list 52 253500 125 54) (list 55 253625 125 56) (list 39 253836 250 56) (list 46 253750 250 88) (list 47 254000 333 85) (list 40 254000 333 107) (list 67 254333 333 91) (list 73 254667 167 99) (list 40 254833 167 110) (list 79 255000 125 94) (list 83 255125 250 94) (list 47 255375 250 100) (list 40 255375 250 99) (list 47 255688 125 71) (list 54 255625 125 108) (list 83 255750 125 55) (list 69 255750 125 63) (list 55 255750 125 60) (list 52 255750 125 66) (list 79 255875 375 71) (list 47 255875 375 63) (list 78 256250 250 97) (list 46 256250 250 64) (list 46 256500 125 103) (list 40 256696 125 108) (list 47 256625 125 81) (list 76 256750 125 101) (list 54 256875 125 84) (list 47 257095 167 61) (list 74 257050 167 67) (list 40 257000 167 95) (list 69 257257 167 66) (list 47 257257 167 79) (list 73 257167 167 106) (list 54 257333 333 70) (list 69 257760 167 62) (list 52 257760 167 65) (list 55 257667 167 74) (list 62 257833 167 61) (list 52 258045 250 52) (list 61 258000 250 74) (list 55 258000 250 63) (list 46 258337 250 90) (list 39 258337 250 70) (list 46 258250 250 59) (list 52 258500 250 52) (list 71 258750 250 63) (list 40 258750 250 99) (list 47 259000 167 72) (list 40 259217 167 94) (list 78 259167 167 105) (list 47 259167 167 88) (list 76 259333 167 100) (list 78 259500 333 99) (list 47 259500 333 81) (list 54 259833 292 109) (list 69 260125 125 62) (list 67 260125 125 82) (list 52 260125 125 51) (list 55 260333 375 51) (list 66 260250 375 93) (list 46 260625 250 97) (list 73 260875 125 109) (list 40 260875 125 105) (list 47 261000 333 77) (list 40 261418 167 98) (list 54 261333 167 54) (list 47 261552 167 82) (list 45 261552 167 85) (list 73 261500 167 81) (list 62 261667 167 77) (list 61 261667 167 78) (list 47 261922 417 61) (list 40 261922 417 62) (list 69 261833 417 57) (list 55 261833 417 49) (list 52 261833 417 52) (list 47 262250 375 88) (list 83 262625 125 84) (list 45 262625 125 67) (list 40 262625 125 106) (list 47 262750 125 67) (list 40 262875 125 103) (list 69 263077 250 69) (list 81 263000 250 73) (list 40 263347 250 68) (list 55 263250 250 63) (list 52 263250 250 67) (list 47 263250 250 86) (list 82 263500 250 76) (list 52 263818 375 71) (list 47 263818 375 68) (list 79 263750 375 77) (list 69 263750 375 65) (list 78 264125 125 95) (list 79 264250 125 68) (list 47 264250 125 81) (list 45 264250 125 88) (list 40 264474 125 102) (list 76 264375 125 77) (list 47 264375 125 78) (list 47 264500 250 80) (list 54 264750 250 87) (list 69 265000 167 80) (list 69 265167 333 77) (list 47 265167 333 101) (list 47 265568 167 85) (list 54 265500 167 98) (list 67 265723 167 87) (list 69 265667 167 64) (list 52 265667 167 63) (list 66 265833 167 97) (list 46 266000 143 59) (list 39 266204 143 67) (list 46 266143 143 102) (list 47 266286 143 75) (list 40 266286 143 108) (list 54 266429 143 55) (list 40 266571 143 102) (list 67 266796 286 88) (list 46 266796 286 98) (list 64 266714 286 105) (list 47 267000 167 54) (list 40 267264 167 95) (list 47 267167 167 73) (list 65 267333 333 84) (list 69 267667 167 64) (list 52 267667 167 67) (list 79 267881 167 106) (list 77 267833 167 87) (list 38 268033 125 76) (list 46 268000 125 106) (list 47 268125 250 84) (list 40 268125 250 112) (list 78 268375 250 79) (list 40 268625 375 107) (list 59 269071 125 63) (list 69 269000 125 67) (list 67 269000 125 84) (list 47 269125 250 81) (list 76 269375 625 78) (list 55 269375 625 77) (list 54 269375 625 75) (list 46 269375 625 60) (list 40 269375 625 78) (list 83 270000 167 85) (list 69 270000 167 76) (list 52 270000 167 60) (list 79 270167 333 101) (list 66 270573 167 74) (list 40 270573 167 88) (list 47 270500 167 77) (list 45 270500 167 81) (list 66 270667 167 79) (list 54 270667 167 59) (list 40 270667 167 105) (list 47 270833 310 86) (list 65 271220 143 74) (list 40 271143 143 107) (list 47 271286 143 90) (list 45 271286 143 94) (list 80 271429 143 89) (list 69 271429 143 67) (list 63 271642 286 94) (list 68 271571 286 82) (list 63 271947 429 85) (list 47 271857 429 107) (list 47 272286 143 92) (list 40 272286 143 112) (list 47 272429 143 98) (list 66 272571 286 88) (list 40 272571 286 112) (list 63 272857 268 104) (list 47 273125 125 105) (list 40 273250 375 99) (list 47 273720 250 81) (list 85 273625 250 95) (list 54 273625 250 109) (list 69 273875 375 66) (list 52 273875 375 74) (list 47 274250 125 94) (list 64 274375 125 89) (list 73 274500 250 96) (list 47 274500 250 101) (list 39 274500 250 76) (list 47 274750 125 86) (list 40 274750 125 112) (list 47 274875 125 95) (list 40 275000 167 104) (list 52 275167 333 73) (list 47 275167 333 105) (list 79 275551 167 72) (list 54 275500 167 89) (list 47 275500 167 90) (list 69 275667 167 77) (list 52 275667 167 72) (list 67 275916 167 81) (list 47 275833 167 65) (list 40 275833 167 78) (list 66 276000 167 82) (list 46 276167 167 72) (list 45 276167 167 78) (list 47 276407 167 80) (list 40 276407 167 105) (list 45 276333 167 72) (list 47 276500 333 79) (list 40 276833 167 104) (list 64 277000 250 86) (list 40 277306 250 95) (list 45 277250 250 97) (list 55 277500 250 71) (list 47 277500 250 68) (list 54 277750 250 96) (list 83 278000 125 65) (list 69 278000 125 66) (list 59 278000 125 55) (list 52 278125 250 61) (list 46 278375 250 81) (list 45 278375 250 80) (list 45 278625 125 85) (list 40 278625 125 112) (list 47 278750 375 77) (list 40 279125 500 113) (list 47 279625 125 81) (list 45 279625 125 99) (list 40 279625 125 93) (list 77 279848 125 67) (list 46 279848 125 58) (list 83 279750 125 68) (list 55 279750 125 64) (list 54 279750 125 88) (list 80 279875 250 79) (list 79 279875 250 91) (list 69 279875 250 63) (list 52 279875 250 67) (list 47 279875 250 61) (list 79 280125 250 84) (list 79 280375 125 76) (list 46 280375 125 88) (list 40 280375 125 80) (list 40 280567 125 105) (list 47 280500 125 84) (list 76 280625 125 94) (list 78 280750 125 55) (list 69 280750 125 66) (list 52 280750 125 71) (list 47 280750 125 75) (list 66 280875 250 70) (list 55 280875 250 73) (list 54 281194 125 56) (list 52 281125 125 64) (list 41 281125 125 69) (list 69 281250 375 59) (list 64 281250 375 70) (list 59 281250 375 52) (list 55 281250 375 53) (list 52 281250 375 54) (list 65 281625 125 68) (list 46 281832 125 57) (list 59 281750 125 66) (list 45 281750 125 64) (list 40 281750 125 59) (list 47 281875 125 68) (list 40 281875 125 61) (list 40 282096 125 102) (list 52 282000 125 56) (list 52 282125 375 73) (list 47 282500 125 70) (list 40 282625 125 89) (list 45 282750 125 92) (list 69 282971 375 96) (list 67 282971 375 95) (list 64 282875 375 88) (list 47 283250 375 77) (list 55 283625 125 60) (list 69 283750 250 82) (list 59 283750 250 45) (list 52 283750 250 55) (list 81 284000 125 74) (list 45 284000 125 77) (list 74 284125 125 95) (list 46 284125 125 81) (list 36 284125 125 58) (list 55 284250 250 50) (list 39 284250 250 48) (list 47 284500 125 69) (list 40 284500 125 101) (list 55 284719 125 63) (list 40 284625 125 95) (list 52 284750 125 65) (list 46 284750 125 89) (list 83 284969 375 61) (list 55 284875 375 55) (list 54 285250 250 73) (list 47 285250 250 64) (list 40 285250 250 67) (list 69 285500 125 61) (list 52 285500 125 54) (list 55 285687 375 53) (list 47 285625 375 72) (list 55 286000 167 62) (list 46 286167 333 90) (list 47 286500 167 77) (list 71 286667 167 87) (list 40 286667 167 106) (list 40 286833 167 103) (list 76 287000 143 94) (list 47 287143 143 97) (list 83 287286 143 79) (list 47 287286 143 71) (list 69 287429 143 58) (list 59 287429 143 47) (list 55 287429 143 57) (list 52 287429 143 55) (list 71 287571 286 86) (list 71 287947 143 87) (list 47 287857 143 74) (list 45 287857 143 75) (list 40 288000 125 99) (list 76 288125 250 86) (list 52 288375 125 71) (list 47 288375 125 66) (list 40 288500 125 90) (list 83 288625 125 80) (list 52 288750 250 57) (list 45 288750 250 94) (list 47 289022 250 75) (list 39 289022 250 69) (list 55 289000 250 62) (list 54 289250 250 89) (list 69 289500 250 63) (list 52 289500 250 63) (list 40 289500 250 59) (list 81 289796 250 77) (list 47 289750 250 58) (list 46 290000 125 81) (list 81 290125 250 104) (list 40 290125 250 75) (list 40 290430 125 101) (list 83 290375 125 86) (list 47 290375 125 76) (list 47 290500 250 79) (list 40 290750 679 92) (list 45 291429 143 89) (list 55 291571 143 75) (list 52 291571 143 79) (list 47 291571 143 73) (list 76 291714 143 104) (list 83 291901 268 82) (list 47 291901 268 57) (list 69 291857 268 62) (list 52 291857 268 53) (list 55 292125 125 53) (list 47 292348 375 93) (list 40 292250 375 85) (list 47 292683 125 74) (list 40 292683 125 98) (list 71 292625 125 66) (list 69 292814 500 63) (list 46 292814 500 89) (list 81 292750 500 95) (list 81 293250 375 66) (list 52 293625 250 56) (list 46 293625 250 71) (list 55 293971 268 85) (list 50 293971 268 59) (list 40 293971 268 71) (list 83 293875 268 72) (list 50 293875 268 70) (list 47 293875 268 59) (list 39 293875 268 65) (list 69 294143 143 59) (list 59 294143 143 53) (list 52 294143 143 62) (list 55 294286 286 59) (list 47 294571 143 94) (list 71 294714 143 62) (list 47 294714 143 76) (list 40 294714 143 106) (list 40 294857 268 101) (list 47 295125 125 101) (list 76 295303 375 81) (list 55 295250 375 63) (list 54 295250 375 88) (list 47 295250 375 75) (list 76 295719 125 81) (list 55 295719 125 55) (list 69 295625 125 60) (list 52 295625 125 54) (list 47 295750 125 64) (list 52 295957 125 34) (list 76 295875 125 89) (list 46 295875 125 86) (list 39 295875 125 57) (list 45 296084 200 68) (list 40 296084 200 99) (list 48 296000 200 56) (list 52 296200 200 91) (list 54 296400 200 75) (list 47 296600 200 73) (list 40 296600 200 103) (list 76 296800 700 87) (list 47 296800 700 92) (list 50 297593 250 67) (list 40 297593 250 87) (list 40 297500 250 107) (list 55 297750 125 69) (list 47 297750 125 67) (list 52 297938 125 58) (list 69 297875 125 61) (list 47 298000 167 58) (list 46 298167 333 91) (list 40 298500 167 87) (list 47 298667 458 84) (list 40 298667 458 94) (list 52 299125 125 69) (list 47 299125 125 91) (list 55 299250 125 64) (list 54 299250 125 90) (list 38 299250 125 78) (list 83 299375 250 60) (list 47 299375 250 70) (list 69 299625 375 57) (list 59 299625 375 61) (list 55 299625 375 52) (list 52 299625 375 58) (list 47 300071 333 64) (list 83 300000 333 62) (list 46 300333 333 88) (list 40 300333 333 81) (list 71 300667 458 71) (list 47 300667 458 70) (list 46 300667 458 68) (list 40 300667 458 104) (list 40 301125 125 92) (list 69 301250 125 77) (list 67 301375 250 86) (list 52 301375 250 62) (list 47 301375 250 87) (list 64 301625 375 82) (list 47 301625 375 66) (list 69 302000 167 63) (list 52 302000 167 58) (list 55 302167 333 55) (list 47 302167 333 62) (list 46 302500 167 70) (list 39 302500 167 68) (list 66 302667 167 105) (list 47 302667 167 71) (list 40 302667 167 107) (list 40 302833 167 94) (list 64 303000 250 105) (list 62 303000 250 72) (list 59 303250 250 78) (list 47 303250 250 88) (list 47 303500 625 72) (list 69 304125 125 57) (list 52 304125 125 55) (list 55 304335 375 46) (list 59 304250 375 63) (list 47 304250 375 57) (list 40 304703 250 77) (list 47 304625 250 76) (list 62 304875 125 66) (list 40 304875 125 98) (list 66 305000 286 75) (list 64 305000 286 69) (list 54 305286 429 64) (list 47 305714 286 57) (list 47 306000 250 73) (list 45 306000 250 92) (list 40 306000 250 93) (list 69 306250 125 56) (list 59 306250 125 53) (list 52 306250 125 50) (list 55 306375 375 61) (list 47 306750 250 82) (list 40 306750 250 75) (list 66 307000 125 86) (list 57 307000 125 58) (list 40 307000 125 104) (list 47 307125 250 67) (list 40 307375 250 108) (list 47 307625 375 72) (list 45 307625 375 84) (list 40 307625 375 93) (list 54 308000 167 79) (list 47 308000 167 67) (list 69 308167 167 56) (list 55 308167 167 50) (list 52 308167 167 49) (list 66 308333 167 75) (list 66 308500 167 80) (list 47 308500 167 91) (list 47 308667 167 72) (list 40 308667 167 96) (list 47 308833 167 66) (list 40 309084 500 83) (list 54 309000 500 68) (list 59 309572 250 75) (list 55 309572 250 54) (list 45 309572 250 87) (list 64 309500 250 82) (list 52 309750 125 45) (list 47 309750 125 62) (list 59 309875 292 75) (list 54 309875 292 77) (list 69 310167 333 50) (list 52 310167 333 52) (list 40 310167 333 45) (list 47 310500 167 61) (list 41 310667 167 65) (list 46 310833 167 81) (list 39 310833 167 71) (list 71 311000 143 105) (list 54 311000 143 75) (list 40 311000 143 98) (list 54 311143 429 57) (list 47 311143 429 67) (list 40 311143 429 99) (list 76 311661 286 78) (list 66 311661 286 92) (list 47 311661 286 86) (list 67 311571 286 97) (list 40 311857 143 103) (list 47 312000 250 70) (list 71 312250 250 59) (list 52 312250 250 62) (list 67 312500 250 35) (list 64 312500 250 48) (list 59 312500 250 50) (list 47 312750 250 87) (list 66 313000 167 93) (list 40 313000 167 81) (list 64 313167 167 93) (list 55 313380 167 40) (list 47 313333 167 66) (list 39 313333 167 60) (list 64 313500 167 88) (list 47 313500 167 95) (list 40 313667 167 79) (list 64 313833 167 96) (list 47 314000 143 54) (list 59 314143 286 63) (list 66 314518 286 79) (list 39 314518 286 82) (list 61 314429 286 58) (list 47 314429 286 83) (list 59 314714 143 25) (list 64 314857 268 66) (list 59 314857 268 42) (list 78 315125 125 63) (list 66 315125 125 59) (list 47 315250 125 63) (list 39 315250 125 59) (list 67 315375 125 43) (list 63 315375 125 43) (list 59 315375 125 55) (list 40 315375 125 69) (list 47 315500 250 84) (list 39 315500 250 72) (list 40 315750 125 89) (list 64 315875 125 95) (list 55 315875 125 61) (list 47 316000 167 66) (list 40 316000 167 63) (list 64 316167 167 70) (list 55 316333 167 57) (list 52 316333 167 61) (list 47 316333 167 70) (list 66 316500 333 81) (list 40 316500 333 79) (list 66 316906 167 87) (list 57 316906 167 56) (list 67 316833 167 83) (list 66 317055 167 96) (list 79 317000 167 82) (list 66 317247 167 92) (list 79 317167 167 78) (list 67 317167 167 75) (list 66 317433 167 77) (list 60 317433 167 50) (list 47 317433 167 56) (list 67 317333 167 97) (list 78 317588 500 65) (list 67 317500 500 83) (list 64 318000 143 69) (list 59 318000 143 63) (list 52 318000 143 50) (list 47 318000 143 82) (list 71 318143 143 53) (list 40 318143 143 74) (list 64 318286 143 93) (list 76 318429 286 46) (list 64 318801 286 67) (list 60 318714 286 49) (list 47 318714 286 62) (list 40 318714 286 48) (list 61 319065 250 54) (list 46 319065 250 94) (list 39 319065 250 63) (list 52 319000 250 45) (list 40 319250 250 101) (list 64 319523 250 64) (list 57 319500 250 54) (list 64 319849 250 57) (list 60 319849 250 50) (list 47 319750 250 58) (list 40 319750 250 58) (list 57 320000 167 46) (list 47 320167 167 91) (list 40 320333 167 79) (list 71 320500 167 78) (list 64 320500 167 61) (list 83 320667 167 55) (list 47 320667 167 61) (list 47 320833 167 115) (list 64 321000 167 90) (list 47 321000 167 81) (list 40 321000 167 81) (list 71 321167 167 55) (list 66 321167 167 78) (list 59 321167 167 59) (list 59 321333 167 36) (list 47 321500 625 75) (list 64 322125 250 81) (list 52 322125 250 51) (list 47 322125 250 84) (list 62 322375 250 68) (list 40 322375 250 75) (list 59 322625 250 78) (list 69 322875 375 72) (list 59 322875 375 67) (list 47 323250 250 73) (list 79 323500 500 70) (list 67 323500 500 71) (list 52 323500 500 50) (list 51 324080 286 53) (list 38 324080 286 74) (list 57 324000 286 60) (list 54 324286 143 78) (list 47 324286 143 71) (list 41 324286 143 106) (list 71 324498 143 61) (list 72 324429 143 73) (list 60 324650 286 92) (list 64 324571 286 73) (list 71 324857 143 61) (list 47 324857 143 85) (list 40 324857 143 85) (list 60 325000 250 81) (list 62 325250 375 83) (list 76 325704 250 67) (list 40 325704 250 90) (list 59 325625 250 61) (list 47 325625 250 76) (list 66 325875 125 94) (list 79 326000 250 73) (list 67 326000 250 70) (list 45 326250 250 49) (list 69 326587 125 91) (list 47 326587 125 74) (list 40 326587 125 77) (list 46 326500 125 106) (list 83 326625 375 63) (list 69 326625 375 61) (list 59 327000 167 52) (list 57 327000 167 57) (list 52 327000 167 54) (list 47 327167 167 53) (list 57 327333 167 65) (list 52 327333 167 80) (list 41 327333 167 90) (list 47 327587 167 81) (list 54 327500 167 88) (list 36 327500 167 89) (list 35 327690 167 55) (list 51 327667 167 69) (list 45 327833 167 66) (list 75 328000 167 72) (list 40 328237 167 80) (list 56 328167 167 75) (list 47 328167 167 92) (list 56 328333 167 51) (list 68 328500 167 60) (list 59 328500 167 85) (list 80 328667 500 78) (list 56 328667 500 52) (list 47 329167 500 88) (list 40 329735 167 55) (list 59 329667 167 73) (list 45 329833 167 91) (list 40 329833 167 101) (list 78 330000 143 82) (list 47 330000 143 78) (list 80 330143 143 104) (list 78 330286 286 81) (list 40 330286 286 95) (list 75 330670 286 76) (list 83 330571 286 85) (list 47 330571 286 62) (list 47 330857 310 84) (list 73 331265 333 69) (list 71 331167 333 74) (list 59 331167 333 40) (list 56 331167 333 62) (list 47 331500 167 89) (list 57 331667 167 62) (list 40 331667 167 80) (list 75 331833 167 70) (list 47 331833 167 66) (list 78 332000 167 73) (list 75 332266 167 56) (list 47 332266 167 57) (list 83 332167 167 73) (list 78 332423 333 64) (list 73 332333 333 65) (list 47 332333 333 67) (list 54 332737 167 62) (list 75 332667 167 62) (list 59 332667 167 38) (list 71 332833 417 42) (list 56 332833 417 49) (list 83 333250 250 67) (list 75 333500 125 59) (list 47 333500 125 64) (list 39 333500 125 51) (list 40 333706 125 67) (list 45 333625 125 53) (list 71 333750 125 57) (list 57 333750 125 48) (list 47 333875 458 50) (list 45 334333 333 43) (list 40 334333 333 56) (list 56 334667 476 40) (list 47 334667 476 52) (list 39 335197 286 35) (list 68 335143 286 31) (list 63 335143 286 44) (list 63 335429 571 31) (list 59 335429 571 40) (list 56 335429 571 38)))) nil "MIDI_Events"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-MIDIEVENTS" (quote get-midievents) (quote ((om-load-inputfun (quote input-funbox) "score element object" "SELF" nil))) (om-make-point 120 662) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CSEQ+TEMPO->VOICE" (quote cseq+tempo->voice) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "SELF" nil) (om-load-inputfun (quote input-funbox) "a tempo-map" "TMAP" nil))) (om-make-point 302 296) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (quote n)) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 90 416) (om-make-point 969 111) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (84 (((4 4) ((1 (-4 -1.0 1 2)) (1 (3 3 2)) (1 (3 1 1 1)) (1 (1 3 2 1)))) ((4 4) ((1 (1.0 3 2)) (1 (2 1 2 2)) (1 (1.0 2 3 2)) (1 (1.0 1 1 1 3 1)))) ((4 4) ((1 (2.0 2 2 1)) (1 (1 2 1)) (1 (1 3 2 2)) (1 (1.0 2 2 1)))) ((4 4) ((1 (1.0 1 2 1 1)) (1 (3.0 3 1 1)) (1 (1 1 1 1)) (1 (1.0 6 1)))) ((4 4) ((1 (1.0 3 2)) (1 (2 1 2 2)) (1 (1.0 4 1 2)) (1 (1 2 3 1)))) ((4 4) ((1 (1.0 1 2 4)) (1 (1 1 1 1 2)) (1 (1 1 1 1)) (1 (1.0 2 1 2 2)))) ((4 4) ((1 (2.0 2 1 2 1)) (1 (2.0 2 1 1)) (1 (1.0 3 2 1 1)) (1 (1.0 3 1 1)))) ((4 4) ((1 (2 4 1.0 1)) (1 (1.0 3 3 1)) (1 (2.0 1 1 4)) (1 (1.0 1 1 2 1)))) ((4 4) ((1 (1.0 2 1 2 1 1)) (1 (1.0 2 1 1 1)) (1 (1 2 1 1 1)) (1 (2 1 1 2)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1 2 1 2)) (1 (1 1 3 2 1)) (1 (1 1 2 2 1)))) ((4 4) ((1 (1 3 1 1 1)) (1 (2.0 2 1 2 1)) (1 (2.0 1 2 1 2)) (1 (2 1 1 1 1)))) ((4 4) ((1 (3.0 1 1 1 1)) (1 (1 4 1.0 1)) (1 (1 1 3 1)) (1 (1 1 1 1 2)))) ((4 4) ((1 (1 1 2 1 1)) (1 (1.0 2 1 2 2)) (1 (2.0 2 1 1 1 1)) (1 (3.0 1 1 1 2)))) ((4 4) ((1 (3 1 1 1)) (1 (1.0 4 2 1)) (1 (2 3 2 1)) (1 (2 3 1 1)))) ((4 4) ((1 (1.0 4 2 1)) (1 (1.0 1 1 2 1)) (1 (1 1 2 1 3)) (1 (2 1 1 2 1 1)))) ((4 4) ((1 (1.0 1 1 1)) (1 (1 3 2 1 1)) (1 (1.0 2 1 1 1)) (1 (1.0 2 3 1)))) ((4 4) ((1 (4 1 2 1)) (1 (1 1 1 1 2)) (1 (1 1 1 1 1 1)) (1 (1 2 1)))) ((4 4) ((1 (1.0 1 2 1 1)) (1 (3 2 1)) (1 (1.0 1 2 1 3)) (1 (1 3)))) ((4 4) ((1 (1 2 2 3)) (1 (1 2 4 1)) (1 (1.0 1 2 2 2)) (1 (2 2 1 3)))) ((4 4) ((1 (1 1 2 1 1)) (1 (1 1 1)) (1 (1.0 2 1 1 1)) (1 (1 2 1 1 2 1)))) ((4 4) ((1 (1 1 1 2 1)) (1 (1.0 3 1 1)) (1 (1 1 1 2 2)) (1 (2 1 3 2)))) ((4 4) ((1 (2 2 1)) (1 (1 1 1)) (1 (1 2 2 2)) (1 (1.0 2 3 2)))) ((4 4) ((1 (1.0 1 1 3)) (1 (1 1 2 2)) (1 (1 1 1 1 1 1)) (1 (2.0 2 1 2 1)))) ((4 4) ((1 (2 2 1 1 1)) (1 (3.0 2 3)) (1 (2 1 1)) (1 (1 3 2 1)))) ((4 4) ((1 (2 1 4 1)) (1 (1 1 2)) (1 (1 3 2 1 1)) (1 (1.0 1 6)))) ((4 4) ((1 (1 1 2 1)) (1 (1.0 1 1 1 1)) (1 (3 2 1 1 1)) (1 (3.0 2 1 1)))) ((4 4) ((1 (1 4 1 2)) (1 (2 2 2 1 1)) (1 (1.0 2 3 2)) (1 (1 1 3 1)))) ((4 4) ((1 (1.0 1 1 3 2)) (1 (1.0 1 2 3 1)) (1 (1.0 1 1 2 2)) (1 (1 1 2 3)))) ((4 4) ((1 (2.0 1 1 2 1 1)) (1 (1 1 1 2 2)) (1 (2 1 1 2 2)) (1 (1 1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1.0 1 1 1 1 1)) (1 (2.0 2 1 1)) (1 (1 3 1 1 1)))) ((4 4) ((1 (1.0 1 2 2 2)) (1 (2 1 2 1 1)) (1 (2 1 1 3)) (1 (1 1 3 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1 2 1 2 1 1)) (1 (1.0 1 1 1)) (1 (1 1 1 1 2)))) ((4 4) ((1 (1 1 3 1 1 1)) (1 (3.0 2 3)) (1 (1 1 2)) (1 (1 3 2 2)))) ((4 4) ((1 (1 2 1 1 2)) (1 (1 1 2 1 1)) (1 (2.0 3 2 1)) (1 (1.0 2 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (2 1 2 1)) (1 (1.0 1 1 4 1)) (1 (1 2 1 1 1)))) ((4 4) ((1 (2 2 1 2 1)) (1 (2 3 1 2)) (1 (1 2 2 1)) (1 (1.0 1 3 2 1)))) ((4 4) ((1 (2.0 1 4 1.0)) (1 (2 1 2 2)) (1 (1 1 1 2 1)) (1 (1.0 1 2 1 2 1)))) ((4 4) ((1 (1.0 1 1 1 2)) (1 (3 2 1 2)) (1 (1.0 3 2 1 1)) (1 (2.0 2 2 1)))) ((4 4) ((1 (1 1 2 1 2 1)) (1 (3 3 2)) (1 (3 3 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 4 1.0 1)) (1 (1.0 1 2 1 2 1)) (1 (1.0 1 2 3 1)) (1 (2 1 1 1 1)))) ((4 4) ((1 (1 1 2 3)) (1 (1 1 1 1 2 2)) (1 (1.0 1 1 2 3)) (1 (2 1 1 1 1)))) ((4 4) ((1 (1 1 1 2 1)) (1 (1.0 3 1 2 1)) (1 (1.0 3 1 3)) (1 (1 1 1 1 2)))) ((4 4) ((1 (3.0 2 1 1)) (1 (3 2 1 1 1)) (1 (2 2 1 1)) (1 (2 3 2 1)))) ((4 4) ((1 (2 1 1)) (1 (1 1 1 3 1 1)) (1 (1 1 2 1 1)) (1 (1.0 1 1 1 1)))) ((4 4) ((1 (2 1 1 1 1)) (1 (3 1 2 1)) (1 (1.0 1 1 1 1 1)) (1 (1 1)))) ((4 4) ((1 (2 2 1 3)) (1 (1 1 2 2 1)) (1 (1 1 2 1 1)) (1 (1 2 1 1)))) ((4 4) ((1 (1 1 1 3 1 1)) (1 (1 1 2 1 1)) (1 (1 2 1)) (1 (1 2 2 1 2)))) ((4 4) ((1 (1.0 1 2 1 2)) (1 (2 1 1 1 1)) (1 (1.0 2 1 2 2)) (1 (1 1 1 2 2)))) ((4 4) ((1 (1 1 2 1 1 1 1)) (1 (1 3 1 1)) (1 (1.0 1 1 1 1 1 2)) (1 (1.0 1 1 3 2)))) ((4 4) ((1 (1.0 1 2 4)) (1 (1 1 1 1 2 2)) (1 (1.0 1 2 1 3)) (1 (1 1 1 1 3 1)))) ((4 4) ((1 (1 1 1 2 1)) (1 (2 3 2 1)) (1 (1 1 1 1)) (1 (3 2 2 1)))) ((4 4) ((1 (1 1 1 3)) (1 (2 1 1 2 1)) (1 (1 1 1 3 1)) (1 (1 1 2 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 1 1 1 2 1 1)) (1 (2 2 1 1)))) ((4 4) ((1 (2.0 1 1 2 2)) (1 (2 1 1 1 1)) (1 (2.0 1 2 1 2)) (1 (1 1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 2)) (1 (1 1 1 3 1 1)) (1 (1.0 1 1 2 2)) (1 (2 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1.0 3 1 1 1 1)) (1 (1.0 2 2 1 1 1)) (1 (1.0 2 2 1 2)))) ((4 4) ((1 (1.0 3 1 1 1 1)) (1 (1.0 2 1 2 2)) (1 (1 2 1 1 1)) (1 (1.0 1 2 1 1 1 1)))) ((4 4) ((1 (1.0 1 2 2 2)) (1 (2.0 1 1 1 1 1)) (1 (1.0 2 1 2 1)) (1 (2 2 2 1)))) ((4 4) ((1 (1.0 3 2 1 1)) (1 (3.0 1 2 1)) (1 (1.0 1 1 1 1 1 1)) (1 (1.0 1 1 2 3)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1.0 2 1 1 1 1)) (1 (3 1 1 1 1 1)) (1 (1.0 4 3)))) ((4 4) ((1 (2 1 2 1 1 1)) (1 (1 2 1)) (1 (1 1 1 2 1 1 1)) (1 (2.0 1 1 1 1)))) ((4 4) ((1 (1 1 2 1 1 1)) (1 (2 2 1 1)) (1 (2 2 1 1 1)) (1 (1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 2 1)) (1 (3.0 2 1 2)) (1 (2 2 1 2 1)) (1 (2.0 1 1 1 1)))) ((4 4) ((1 (1 1 2 1 1)) (1 (2 1 1 1 1 2)) (1 (2 2 1 1)) (1 (1 2 2 1 1 1)))) ((4 4) ((1 (2.0 2 1 1 1 1)) (1 (1 1 2 1 1)) (1 (1 1 1 1)) (1 (1 1 1 2 1)))) ((4 4) ((1 (1.0 1 3 2 1)) (1 (2 1 1 1 1)) (1 (2.0 3 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1.0 1 1 1 2 2)) (1 (1 2 1 1 1)) (1 (1 1 1 1 1 2)) (1 (1 1 2 1 1)))) ((4 4) ((1 (1 2 2 3)) (1 (1 2 4 1.0)) (1 (1 2 1 1 1)) (1 (1.0 1 1 1 2 1)))) ((4 4) ((1 (2.0 1 1 2 1)) (1 (1.0 1 3 2 1)) (1 (2.0 1 1 2 1 1)) (1 (1 2 1 1 1)))) ((4 4) ((1 (1 1 1 2 1)) (1 (1 1 1 1)) (1 (1 2 2 1 2)) (1 (1.0 4 1 1 1)))) ((4 4) ((1 (1.0 2 1 1 1 1 1)) (1 (1.0 1 3 1 1 1)) (1 (1 3 1 1 1 1)) (1 (2.0 3 1 2)))) ((4 4) ((1 (1 1 2 1 1 1 1)) (1 (2.0 2 1 3)) (1 (1 2 1 1 1)) (1 (1 1 1 1 2 1)))) ((4 4) ((1 (1 2 1 1 1 2)) (1 (1 1 1 1)) (1 (1 2 1 2 2)) (1 (3.0 1 1 1 1)))) ((4 4) ((1 (1.0 1 3 1 2)) (1 (2.0 3 2 1)) (1 (1.0 1 2 1 1 1)) (1 (1.0 1 3 1 1 1)))) ((4 4) ((1 (1 1 1 1 1)) (1 (4.0 2 1 1)) (1 (1 2 1 2)) (1 (1.0 1 1 2 3)))) ((4 4) ((1 (1 1 1)) (1 (1.0 1 1 2 3)) (1 (1 2 1 1 1)) (1 (1 1 2)))) ((4 4) ((1 (1.0 1 3 2 1)) (1 (2 3 2)) (1 (2 1 3 2)) (1 (1 2 2 3)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (4 2 1 1)) (1 (1.0 2 1 1 1)) (1 (1 3 2 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1 1 1)) (1 (1 2 2 1 1)) (1 (1.0 1 1 1 2 1 1)))) ((4 4) ((1 (1 1 1 2 1)) (1 (1 1 1 3)) (1 (1 1 1 2 2)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 3)) (1 (1.0 2 2 2 1)) (1 (1.0 1 2)))) ((4 4) ((1 (2 1 1 2 1)) (1 (2 3 2 1)) (1 (2 2 1 3)) (1 (1 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 2)) (1 (1.0 3 1 1)) (1 (1 1 2 2 1)) (1 (1.0 2 1 1 1)))) ((4 4) ((1 (1 1 2 1 1)) (1 (2.0 2 1 1 1 1)) (1 (1.0 1 1)) (1 (1.0 2 4))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900 5200)) :ldur (quote (375 375 375)) :lvel (quote (63 41 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (375)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (75 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700)) :ldur (quote (500 500)) :lvel (quote (71 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (35)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900 5400)) :ldur (quote (167 167 167)) :lvel (quote (78 97 83)) :loffset (quote (51 51 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5500)) :ldur (quote (143 143)) :lvel (quote (68 58)) :loffset (quote (84 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (429)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (286)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (143 143)) :lvel (quote (62 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (333)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 4000 3600)) :ldur (quote (286 286 286 286)) :lvel (quote (56 79 74 70)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (286)) :lvel (quote (39)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (286)) :lvel (quote (43)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (65 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (375)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700 5400)) :ldur (quote (125 125 125)) :lvel (quote (49 66 95)) :loffset (quote (82 59 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (375)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (125)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (286 286)) :lvel (quote (52 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (286)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (143)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (500 500)) :lvel (quote (70 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (44)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (375)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 5400 4700)) :ldur (quote (250 250 250)) :lvel (quote (39 41 68)) :loffset (quote (51 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (333 333)) :lvel (quote (45 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (167 167)) :lvel (quote (42 34)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6900 5500)) :ldur (quote (333 333 333)) :lvel (quote (51 56 48)) :loffset (quote (90 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 4500)) :ldur (quote (167 167 167)) :lvel (quote (43 73 64)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (73 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (375 375)) :lvel (quote (62 90)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (250 250)) :lvel (quote (61 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (41)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 5500)) :ldur (quote (250 250 250)) :lvel (quote (64 53 49)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 3800)) :ldur (quote (250 250 250)) :lvel (quote (43 64 60)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (750 750)) :lvel (quote (66 97)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (125 125)) :lvel (quote (89 66)) :loffset (quote (43 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6900)) :ldur (quote (500 500)) :lvel (quote (72 58)) :loffset (quote (77 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 5200)) :ldur (quote (333 333 333)) :lvel (quote (54 48 44)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 3800)) :ldur (quote (286 286 286)) :lvel (quote (44 77 56)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (286)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6400 5900 4700)) :ldur (quote (500 500 500 500)) :lvel (quote (71 83 65 68)) :loffset (quote (98 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (286 286)) :lvel (quote (109 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (429)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 5900)) :ldur (quote (143 143 143)) :lvel (quote (51 88 63)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4000)) :ldur (quote (250 250)) :lvel (quote (82 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (109)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5900)) :ldur (quote (167 167)) :lvel (quote (50 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700 3700)) :ldur (quote (167 167 167)) :lvel (quote (68 85 63)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (167 167)) :lvel (quote (98 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (167 167)) :lvel (quote (81 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 6600)) :ldur (quote (333 333)) :lvel (quote (51 101)) :loffset (quote (71 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 5900 5500)) :ldur (quote (250 250 250 250)) :lvel (quote (49 83 56 41)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 6000 5900)) :ldur (quote (250 250 250 250)) :lvel (quote (55 58 53 68)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (81 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 5700)) :ldur (quote (250 250 250)) :lvel (quote (50 62 62)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700)) :ldur (quote (125 125 125)) :lvel (quote (79 60 93)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6000 5900)) :ldur (quote (333 333 333)) :lvel (quote (49 57 68)) :loffset (quote (98 98 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 5200 4700 4000)) :ldur (quote (167 167 167 167)) :lvel (quote (62 49 76 74)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (167 167)) :lvel (quote (89 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6400 6000 5700)) :ldur (quote (375 375 375 375)) :lvel (quote (95 75 56 63)) :loffset (quote (93 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 6000 5700)) :ldur (quote (250 250 250 250)) :lvel (quote (46 84 52 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (125 125)) :lvel (quote (80 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (125 125)) :lvel (quote (80 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6000 5900)) :ldur (quote (500 500 500)) :lvel (quote (75 65 48)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (167 167)) :lvel (quote (58 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6400)) :ldur (quote (250 250)) :lvel (quote (77 92)) :loffset (quote (54 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6600 5900)) :ldur (quote (500 500 500)) :lvel (quote (66 62 84)) :loffset (quote (68 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (78 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (375)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 5900)) :ldur (quote (375 375 375)) :lvel (quote (65 55 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 6700)) :ldur (quote (125 125)) :lvel (quote (47 85)) :loffset (quote (65 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4600 3900)) :ldur (quote (125 125 125)) :lvel (quote (60 54 69)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300 4700 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (72 82 77 101)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (333 333)) :lvel (quote (91 93)) :loffset (quote (69 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (108)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (108)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3800)) :ldur (quote (125 125)) :lvel (quote (76 76)) :loffset (quote (44 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (250 250)) :lvel (quote (115 84)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (125 125)) :lvel (quote (58 58)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (72 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (167 167)) :lvel (quote (105 82)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5200)) :ldur (quote (167 167)) :lvel (quote (66 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5200)) :ldur (quote (333 333)) :lvel (quote (51 57)) :loffset (quote (100 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5700 4100 6900)) :ldur (quote (167 167 167 167)) :lvel (quote (84 64 84 82)) :loffset (quote (94 94 94 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700 5400 5100 4500)) :ldur (quote (167 167 167 167 167)) :lvel (quote (59 62 60 77 76)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 4700 3500)) :ldur (quote (333 333 333)) :lvel (quote (31 69 61)) :loffset (quote (61 21 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 6400)) :ldur (quote (167 167 167)) :lvel (quote (98 88 78)) :loffset (quote (64 64 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (167 167)) :lvel (quote (64 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4500 4000)) :ldur (quote (167 167 167)) :lvel (quote (63 84 105)) :loffset (quote (51 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (167 167)) :lvel (quote (69 105)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (125 125)) :lvel (quote (70 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (375)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (79 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (112)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (143)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 5400)) :ldur (quote (143 143)) :lvel (quote (89 77)) :loffset (quote (75 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (286)) :lvel (quote (97)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700 4000)) :ldur (quote (286 286 286)) :lvel (quote (75 94 107)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (143)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (143 143)) :lvel (quote (86 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (429)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (143)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (143 143)) :lvel (quote (73 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 3800)) :ldur (quote (250 250)) :lvel (quote (60 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (125)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 4000)) :ldur (quote (250 250 250)) :lvel (quote (90 90 94)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (125 125)) :lvel (quote (54 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (250 250)) :lvel (quote (73 81)) :loffset (quote (60 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (333 333)) :lvel (quote (77 111)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (167 167)) :lvel (quote (77 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700)) :ldur (quote (167 167)) :lvel (quote (90 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (143 143)) :lvel (quote (75 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (143)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (143)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6600 5900 4000)) :ldur (quote (571 571 571 571)) :lvel (quote (55 110 50 73)) :loffset (quote (67 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 6700 6400 5900)) :ldur (quote (143 143 143 143)) :lvel (quote (50 48 100 64)) :loffset (quote (52 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5900)) :ldur (quote (167 167)) :lvel (quote (52 58)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (167)) :lvel (quote (38)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700 4500)) :ldur (quote (167 167 167)) :lvel (quote (67 80 72)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (167 167)) :lvel (quote (98 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (167 167)) :lvel (quote (80 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (333)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 5900)) :ldur (quote (167 167 167)) :lvel (quote (47 89 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (167 167)) :lvel (quote (80 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 6000 5900)) :ldur (quote (250 250 250 250)) :lvel (quote (55 66 58 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (59 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (92 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700)) :ldur (quote (250 250)) :lvel (quote (84 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6400 6000 5700)) :ldur (quote (250 250 250 250)) :lvel (quote (85 52 54 59)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (84 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (125 125)) :lvel (quote (56 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (125)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700)) :ldur (quote (125 125)) :lvel (quote (61 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (250 250)) :lvel (quote (84 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 7800)) :ldur (quote (500 500)) :lvel (quote (65 65)) :loffset (quote (23 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 5700)) :ldur (quote (167 167 167)) :lvel (quote (83 50 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 3900)) :ldur (quote (167 167)) :lvel (quote (77 57)) :loffset (quote (47 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (80 80 69)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700 6000)) :ldur (quote (500 500 500)) :lvel (quote (85 55 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700)) :ldur (quote (125 125 125)) :lvel (quote (86 56 87)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (250 250)) :lvel (quote (95 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (375)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700)) :ldur (quote (125 125 125)) :lvel (quote (97 65 88)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (286 286)) :lvel (quote (74 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 5900)) :ldur (quote (429 429 429)) :lvel (quote (86 55 69)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (143)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (143)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700 5300 4700 4000)) :ldur (quote (500 500 500 500 500)) :lvel (quote (83 70 78 70 98)) :loffset (quote (90 90 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5300)) :ldur (quote (125 125)) :lvel (quote (70 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5900)) :ldur (quote (167 167)) :lvel (quote (104 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (125)) :lvel (quote (42)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (66 86)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (250 250)) :lvel (quote (104 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (125)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (114)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5400 4700)) :ldur (quote (125 125 125)) :lvel (quote (110 73 107)) :loffset (quote (71 71 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (76 82)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5700)) :ldur (quote (250 250)) :lvel (quote (64 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (125 125)) :lvel (quote (51 48)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5400 5200)) :ldur (quote (250 250 250)) :lvel (quote (67 57 71)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 5700 4100)) :ldur (quote (250 250 250)) :lvel (quote (70 63 91)) :loffset (quote (75 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5400 5100 4500 3600)) :ldur (quote (250 250 250 250 250)) :lvel (quote (58 68 69 82 89)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (375)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 6800 4700 7500 5600)) :ldur (quote (125 125 125 125 125)) :lvel (quote (65 56 89 87 60)) :loffset (quote (67 67 67 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 7100)) :ldur (quote (333 333)) :lvel (quote (47 95)) :loffset (quote (45 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 5900 5600)) :ldur (quote (167 167 167)) :lvel (quote (50 61 71)) :loffset (quote (100 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5600 5400 5100)) :ldur (quote (167 167 167 167)) :lvel (quote (67 57 72 54)) :loffset (quote (64 64 64 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900 4400)) :ldur (quote (167 167 167)) :lvel (quote (85 60 62)) :loffset (quote (60 60 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 6600 5700 4500 4000)) :ldur (quote (286 286 286 286 286)) :lvel (quote (82 59 68 77 102)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7500)) :ldur (quote (429 429)) :lvel (quote (83 98)) :loffset (quote (98 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (143)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700 4000)) :ldur (quote (500 500 500)) :lvel (quote (75 104 108)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 4700)) :ldur (quote (125 125)) :lvel (quote (77 90)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (125)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4400 3900)) :ldur (quote (167 167 167)) :lvel (quote (80 69 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 6600 5700 4000)) :ldur (quote (167 167 167 167)) :lvel (quote (99 60 73 99)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 5600 4700)) :ldur (quote (167 167 167)) :lvel (quote (72 63 93)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6300)) :ldur (quote (167 167)) :lvel (quote (74 62)) :loffset (quote (68 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (167 167)) :lvel (quote (85 79)) :loffset (quote (84 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5600)) :ldur (quote (167 167)) :lvel (quote (81 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (167 167)) :lvel (quote (98 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5700 4000)) :ldur (quote (250 250 250)) :lvel (quote (59 81 107)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7500 4700 4000)) :ldur (quote (250 250 250 250)) :lvel (quote (105 80 72 101)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 5600 4700 4000)) :ldur (quote (167 167 167 167)) :lvel (quote (98 59 98 87)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 6300 4700)) :ldur (quote (333 333 333)) :lvel (quote (86 61 62)) :loffset (quote (70 23 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5600)) :ldur (quote (167 167)) :lvel (quote (87 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 5600)) :ldur (quote (167 167)) :lvel (quote (69 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (500 500)) :lvel (quote (90 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4000)) :ldur (quote (333 333)) :lvel (quote (77 109)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (108)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (98 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (125)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 5900 5600)) :ldur (quote (375 375 375)) :lvel (quote (82 103 62)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8500 4700 4400 4000)) :ldur (quote (750 750 750 750 750)) :lvel (quote (82 78 92 73 100)) :loffset (quote (94 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5700)) :ldur (quote (125 125)) :lvel (quote (84 77)) :loffset (quote (69 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700 6800)) :ldur (quote (250 250 250)) :lvel (quote (84 97 82)) :loffset (quote (69 69 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5600)) :ldur (quote (250 250)) :lvel (quote (74 57)) :loffset (quote (95 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (375)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 4700 6800 6300 5900)) :ldur (quote (125 125 125 125 125)) :lvel (quote (100 65 55 63 70)) :loffset (quote (94 94 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4400)) :ldur (quote (500 500)) :lvel (quote (79 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5700 4000)) :ldur (quote (125 125 125)) :lvel (quote (66 72 101)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 7300 4700 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (88 84 67 88)) :loffset (quote (88 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 5600 5200 4700)) :ldur (quote (250 250 250 250)) :lvel (quote (100 57 69 78)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5600)) :ldur (quote (250 250)) :lvel (quote (74 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 4700 3900)) :ldur (quote (125 125 125)) :lvel (quote (102 83 67)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (375 375)) :lvel (quote (55 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (82 92)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 4700)) :ldur (quote (333 333)) :lvel (quote (80 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4700)) :ldur (quote (167 167 167)) :lvel (quote (91 84 86)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 5600)) :ldur (quote (167 167)) :lvel (quote (82 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 5900)) :ldur (quote (333 333)) :lvel (quote (100 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 4700)) :ldur (quote (333 333)) :lvel (quote (59 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4400 3900)) :ldur (quote (333 333 333)) :lvel (quote (87 64 77)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 3900)) :ldur (quote (333 333 333)) :lvel (quote (74 85 89)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (75 95)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6400 5600)) :ldur (quote (167 167 167)) :lvel (quote (74 86 78)) :loffset (quote (56 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7100 6400 5600 4700)) :ldur (quote (250 250 250 250 250)) :lvel (quote (61 73 53 64 82)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (125)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700 4700)) :ldur (quote (125 125)) :lvel (quote (48 73)) :loffset (quote (54 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5400 7100)) :ldur (quote (125 125 125)) :lvel (quote (67 59 86)) :loffset (quote (93 93 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 7100)) :ldur (quote (333 333)) :lvel (quote (73 75)) :loffset (quote (91 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (81 78 88)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5200)) :ldur (quote (500 500)) :lvel (quote (59 73)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 7100 6400)) :ldur (quote (167 167 167)) :lvel (quote (51 78 83)) :loffset (quote (87 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (143 143)) :lvel (quote (77 95)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (143)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (143)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (286)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (286)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700)) :ldur (quote (250 250 250)) :lvel (quote (76 68 82)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5900 5600)) :ldur (quote (125 125 125)) :lvel (quote (71 61 79)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (375)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 4700 4000)) :ldur (quote (400 400 400)) :lvel (quote (78 88 74)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 5700 4000)) :ldur (quote (400 400 400)) :lvel (quote (83 77 102)) :loffset (quote (100 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (200)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (333 333)) :lvel (quote (80 98)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5600)) :ldur (quote (333 333)) :lvel (quote (74 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (143)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5700 4700 4000)) :ldur (quote (286 286 286 286)) :lvel (quote (114 81 83 98)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700)) :ldur (quote (375 375)) :lvel (quote (107 90)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5200)) :ldur (quote (250 250)) :lvel (quote (66 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4000)) :ldur (quote (167 167)) :lvel (quote (79 81)) :loffset (quote (93 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4700)) :ldur (quote (167 167)) :lvel (quote (102 91)) :loffset (quote (91 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700 5400)) :ldur (quote (167 167 167)) :lvel (quote (80 64 62)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6100 5700 5400)) :ldur (quote (167 167 167 167)) :lvel (quote (48 43 55 56)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 5200)) :ldur (quote (333 333 333)) :lvel (quote (100 79 50)) :loffset (quote (60 60 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4000)) :ldur (quote (333 333)) :lvel (quote (80 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5600 5200)) :ldur (quote (167 167 167)) :lvel (quote (111 66 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 8300)) :ldur (quote (167 167)) :lvel (quote (61 69)) :loffset (quote (98 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5600)) :ldur (quote (167 167)) :lvel (quote (74 54)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700)) :ldur (quote (167 167)) :lvel (quote (73 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6600)) :ldur (quote (167 167)) :lvel (quote (75 99)) :loffset (quote (78 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700 5400)) :ldur (quote (167 167 167)) :lvel (quote (77 60 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700 5400 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (77 55 53 60)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6100 5700)) :ldur (quote (286 286 286)) :lvel (quote (84 52 72)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (286)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5700)) :ldur (quote (143 143)) :lvel (quote (79 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (143 143)) :lvel (quote (58 92)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6700)) :ldur (quote (143 143)) :lvel (quote (76 90)) :loffset (quote (53 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6900 6600)) :ldur (quote (250 250 250)) :lvel (quote (74 61 75)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6400)) :ldur (quote (375 375)) :lvel (quote (57 90)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (500 500)) :lvel (quote (73 93)) :loffset (quote (66 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700)) :ldur (quote (250 250)) :lvel (quote (96 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 5700)) :ldur (quote (250 250)) :lvel (quote (55 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700)) :ldur (quote (143 143)) :lvel (quote (74 82)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (429 429)) :lvel (quote (66 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6900 6200)) :ldur (quote (286 286 286)) :lvel (quote (92 64 60)) :loffset (quote (63 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6400 6200 5900)) :ldur (quote (143 143 143 143)) :lvel (quote (57 75 48 48)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (81 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (125 125)) :lvel (quote (85 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700)) :ldur (quote (500 500)) :lvel (quote (73 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (125)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700)) :ldur (quote (250 250 250)) :lvel (quote (78 56 77)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (250 250)) :lvel (quote (86 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6600 6300)) :ldur (quote (500 500 500)) :lvel (quote (59 94 56)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700)) :ldur (quote (375 375 375)) :lvel (quote (87 64 78)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (250 250)) :lvel (quote (78 82)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 6200 5900)) :ldur (quote (125 125 125 125)) :lvel (quote (81 54 56 55)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 6700)) :ldur (quote (125 125)) :lvel (quote (59 87)) :loffset (quote (97 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (750)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 4100)) :ldur (quote (200 200 200)) :lvel (quote (72 73 125)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (200)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (400)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (200 200)) :lvel (quote (83 96)) :loffset (quote (88 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (200)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 4000)) :ldur (quote (200 200 200)) :lvel (quote (107 86 78)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (375)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700)) :ldur (quote (125 125)) :lvel (quote (108 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700)) :ldur (quote (125 125)) :lvel (quote (76 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000 5700)) :ldur (quote (286 286)) :lvel (quote (109 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7100 5200)) :ldur (quote (143 143 143)) :lvel (quote (50 54 48)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 3800)) :ldur (quote (143 143)) :lvel (quote (71 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 6000 5700 5200 4100)) :ldur (quote (125 125 125 125 125)) :lvel (quote (86 64 63 81 73)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5100 3500 3900)) :ldur (quote (500 500 500 500)) :lvel (quote (61 74 76 69)) :loffset (quote (43 43 43 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4500)) :ldur (quote (250 250)) :lvel (quote (85 38)) :loffset (quote (74 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (77 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 5500)) :ldur (quote (125 125)) :lvel (quote (57 56)) :loffset (quote (67 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 5900)) :ldur (quote (125 125 125)) :lvel (quote (42 42 50)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (250 250)) :lvel (quote (83 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (375 375)) :lvel (quote (77 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 5900)) :ldur (quote (250 250 250)) :lvel (quote (53 75 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6300 4700)) :ldur (quote (167 167 167)) :lvel (quote (50 49 66)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700 4000)) :ldur (quote (167 167 167 167)) :lvel (quote (90 52 74 70)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 6200)) :ldur (quote (167 167 167)) :lvel (quote (52 102 47)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5900)) :ldur (quote (125 125)) :lvel (quote (54 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 4000)) :ldur (quote (125 125 125)) :lvel (quote (103 78 86)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (375 375)) :lvel (quote (96 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900 5200)) :ldur (quote (250 250 250)) :lvel (quote (87 51 50)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6300 5900 3900)) :ldur (quote (125 125 125 125)) :lvel (quote (36 48 52 57)) :loffset (quote (95 95 95 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 4000)) :ldur (quote (250 250 250)) :lvel (quote (88 78 73)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (375)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700 5900)) :ldur (quote (125 125 125)) :lvel (quote (70 55 60)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5900)) :ldur (quote (143 143)) :lvel (quote (58 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6600 4000)) :ldur (quote (286 286 286)) :lvel (quote (98 84 76)) :loffset (quote (91 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5700)) :ldur (quote (286 286)) :lvel (quote (107 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5700 6400 6000)) :ldur (quote (143 143 143 143)) :lvel (quote (43 58 75 53)) :loffset (quote (51 51 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5200)) :ldur (quote (286 286)) :lvel (quote (83 43)) :loffset (quote (84 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4000)) :ldur (quote (429 429)) :lvel (quote (62 68)) :loffset (quote (89 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700)) :ldur (quote (125 125)) :lvel (quote (64 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (250 250)) :lvel (quote (67 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5700 6700)) :ldur (quote (125 125 125)) :lvel (quote (85 84 87)) :loffset (quote (58 58 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6700)) :ldur (quote (125 125)) :lvel (quote (70 82)) :loffset (quote (81 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 6400)) :ldur (quote (143 143)) :lvel (quote (41 76)) :loffset (quote (64 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6000 5700)) :ldur (quote (143 143 143)) :lvel (quote (49 56 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (286)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6000)) :ldur (quote (250 250)) :lvel (quote (99 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (125)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6900)) :ldur (quote (125 125)) :lvel (quote (37 77)) :loffset (quote (68 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 4500)) :ldur (quote (250 250 250)) :lvel (quote (91 80 93)) :loffset (quote (65 65 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6600)) :ldur (quote (143 143)) :lvel (quote (57 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (143)) :lvel (quote (42)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (143)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6200 5200 4700)) :ldur (quote (143 143 143 143)) :lvel (quote (77 68 60 78)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6100)) :ldur (quote (143 143)) :lvel (quote (78 76)) :loffset (quote (44 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (143)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6700 5900 7000)) :ldur (quote (167 167 167 167)) :lvel (quote (63 85 63 84)) :loffset (quote (43 43 43 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (167)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 5200)) :ldur (quote (167 167)) :lvel (quote (83 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 8000 5200)) :ldur (quote (167 167 167)) :lvel (quote (97 97 80)) :loffset (quote (59 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 4100)) :ldur (quote (167 167 167)) :lvel (quote (83 84 112)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7400)) :ldur (quote (167 167)) :lvel (quote (81 92)) :loffset (quote (72 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6500)) :ldur (quote (167 167)) :lvel (quote (108 110)) :loffset (quote (93 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200)) :ldur (quote (167 167)) :lvel (quote (87 86)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 3900)) :ldur (quote (167 167)) :lvel (quote (102 75)) :loffset (quote (53 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 4700 5900 5200)) :ldur (quote (167 167 167 167)) :lvel (quote (73 80 94 68)) :loffset (quote (89 89 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4700)) :ldur (quote (167 167)) :lvel (quote (78 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 6200 4000 3500)) :ldur (quote (143 143 143 143)) :lvel (quote (74 81 89 68)) :loffset (quote (70 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (429)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (143)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700)) :ldur (quote (143 143)) :lvel (quote (94 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (143 143)) :lvel (quote (57 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700 4000)) :ldur (quote (125 125 125)) :lvel (quote (72 72 74)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5200)) :ldur (quote (250 250)) :lvel (quote (63 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5200)) :ldur (quote (250 250)) :lvel (quote (56 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (286)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5200 4100)) :ldur (quote (143 143 143)) :lvel (quote (73 86 94)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 5400 5100 4700)) :ldur (quote (286 286 286 286 286)) :lvel (quote (71 61 76 78 85)) :loffset (quote (93 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 4700)) :ldur (quote (143 143)) :lvel (quote (54 73)) :loffset (quote (66 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (143)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 5400)) :ldur (quote (286 286)) :lvel (quote (46 61)) :loffset (quote (41 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5500 6900)) :ldur (quote (143 143 143)) :lvel (quote (92 64 80)) :loffset (quote (82 62 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (429)) :lvel (quote (111)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5900 5200)) :ldur (quote (167 167 167)) :lvel (quote (65 62 77)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (85 89 116)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6200 4700)) :ldur (quote (167 167 167)) :lvel (quote (90 70 82)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (167 167)) :lvel (quote (82 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6000 4700)) :ldur (quote (167 167 167)) :lvel (quote (88 101 71)) :loffset (quote (79 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5900)) :ldur (quote (167 167)) :lvel (quote (94 68)) :loffset (quote (60 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500)) :ldur (quote (250 250)) :lvel (quote (80 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (125)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900 5700)) :ldur (quote (125 125 125)) :lvel (quote (57 70 64)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5400)) :ldur (quote (125 125)) :lvel (quote (68 84)) :loffset (quote (55 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5400)) :ldur (quote (250 250)) :lvel (quote (57 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (84 97)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5500)) :ldur (quote (167 167)) :lvel (quote (91 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200 4700 6700)) :ldur (quote (167 167 167 167 167)) :lvel (quote (83 73 71 74 96)) :loffset (quote (84 84 84 84 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7300)) :ldur (quote (167 167)) :lvel (quote (80 98)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 5200)) :ldur (quote (167 167)) :lvel (quote (102 82)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 3900 8300 8100 4700)) :ldur (quote (333 333 333 333 333)) :lvel (quote (106 75 78 104 85)) :loffset (quote (65 65 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (125 125)) :lvel (quote (89 108)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (375 375)) :lvel (quote (69 99)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (79 95)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (125)) :lvel (quote (109)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (375 375)) :lvel (quote (66 82)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (250 250)) :lvel (quote (74 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 6100 4000)) :ldur (quote (250 250 250)) :lvel (quote (70 58 109)) :loffset (quote (97 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700)) :ldur (quote (375 375 375)) :lvel (quote (77 84 87)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 4000)) :ldur (quote (250 250 250)) :lvel (quote (74 67 91)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000)) :ldur (quote (286 286 286)) :lvel (quote (85 68 107)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (143)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (286)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (85 97)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6900 5200)) :ldur (quote (167 167 167)) :lvel (quote (85 69 67)) :loffset (quote (71 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6000)) :ldur (quote (375 375)) :lvel (quote (92 66)) :loffset (quote (78 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4700 4000)) :ldur (quote (250 250 250)) :lvel (quote (66 77 83)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5400 4000)) :ldur (quote (125 125 125)) :lvel (quote (83 67 107)) :loffset (quote (99 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700)) :ldur (quote (250 250 250)) :lvel (quote (63 56 83)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6900 5200 4700)) :ldur (quote (167 167 167 167)) :lvel (quote (76 61 72 75)) :loffset (quote (85 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (86 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5700 4000)) :ldur (quote (167 167 167)) :lvel (quote (79 62 93)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5400 4700)) :ldur (quote (167 167 167)) :lvel (quote (55 64 74)) :loffset (quote (66 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (333)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700 4500)) :ldur (quote (333 333 333)) :lvel (quote (80 77 87)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 5200)) :ldur (quote (167 167 167)) :lvel (quote (68 60 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6200 5500 5200)) :ldur (quote (125 125 125 125)) :lvel (quote (61 49 52 65)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5700 5400 4600 4000)) :ldur (quote (125 125 125 125 125)) :lvel (quote (76 62 72 67 106)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5400)) :ldur (quote (333 333)) :lvel (quote (110 79)) :loffset (quote (97 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (69 107)) :loffset (quote (74 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (250 250)) :lvel (quote (82 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (58 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5400 4000)) :ldur (quote (250 250 250)) :lvel (quote (54 59 78)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (125)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6100 4700)) :ldur (quote (250 250 250)) :lvel (quote (51 43 49)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (375)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (125 125)) :lvel (quote (82 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (250 250)) :lvel (quote (72 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6200 5900)) :ldur (quote (333 333 333)) :lvel (quote (52 49 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (333)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3800)) :ldur (quote (167 167)) :lvel (quote (86 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700 6400 5900)) :ldur (quote (375 375 375 375)) :lvel (quote (63 65 66 63)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6000)) :ldur (quote (250 250)) :lvel (quote (65 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (125 125)) :lvel (quote (87 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6900 5400 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (78 64 79 83)) :loffset (quote (53 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6900 6600 5900)) :ldur (quote (286 286 286 286)) :lvel (quote (90 56 52 63)) :loffset (quote (82 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3800)) :ldur (quote (143 143)) :lvel (quote (76 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (286)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700 5200)) :ldur (quote (286 286 286)) :lvel (quote (59 53 66)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700)) :ldur (quote (167 167)) :lvel (quote (66 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 6200)) :ldur (quote (333 333 333)) :lvel (quote (59 54 46)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700)) :ldur (quote (167 167)) :lvel (quote (70 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3800)) :ldur (quote (125 125)) :lvel (quote (84 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5200)) :ldur (quote (125 125)) :lvel (quote (69 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200)) :ldur (quote (250 250)) :lvel (quote (61 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 7200 6900 5700)) :ldur (quote (125 125 125 125)) :lvel (quote (51 55 62 40)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (167 167)) :lvel (quote (82 66)) :loffset (quote (71 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700 6400 6000)) :ldur (quote (167 167 167 167)) :lvel (quote (87 60 61 75)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (333)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700 3800)) :ldur (quote (375 375 375)) :lvel (quote (64 60 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 3800)) :ldur (quote (250 250 250)) :lvel (quote (82 85 39)) :loffset (quote (55 55 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (125 125)) :lvel (quote (53 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6400 6000)) :ldur (quote (250 250 250)) :lvel (quote (67 59 56)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7100 6700)) :ldur (quote (375 375 375)) :lvel (quote (60 71 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (125 125)) :lvel (quote (53 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5900)) :ldur (quote (125 125)) :lvel (quote (54 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5900 5500)) :ldur (quote (286 286 286)) :lvel (quote (44 54 50)) :loffset (quote (83 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 3900)) :ldur (quote (286 286)) :lvel (quote (54 69)) :loffset (quote (50 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 4100)) :ldur (quote (143 143 143)) :lvel (quote (65 65 97)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (125)) :lvel (quote (43)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700)) :ldur (quote (250 250)) :lvel (quote (51 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (68 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5300)) :ldur (quote (125 125)) :lvel (quote (57 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (375)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5900)) :ldur (quote (375 375)) :lvel (quote (40 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700 4500)) :ldur (quote (375 375 375)) :lvel (quote (85 79 83)) :loffset (quote (79 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (375)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 6700 6400 6000)) :ldur (quote (125 125 125 125)) :lvel (quote (37 51 45 50)) :loffset (quote (76 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (125 125)) :lvel (quote (73 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (250 250)) :lvel (quote (62 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6600 6200)) :ldur (quote (250 250 250)) :lvel (quote (64 58 47)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4100)) :ldur (quote (143 143)) :lvel (quote (69 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5700 5400 4500 3500)) :ldur (quote (571 571 571 571 571)) :lvel (quote (67 71 68 63 63)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300 4500)) :ldur (quote (125 125)) :lvel (quote (52 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (87 60 81 95)) :loffset (quote (68 68 68 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (250 250)) :lvel (quote (66 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4700 4000)) :ldur (quote (125 125 125)) :lvel (quote (102 78 75)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (32)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (375)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 3900 4700 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (83 60 63 55)) :loffset (quote (73 73 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4000)) :ldur (quote (167 167)) :lvel (quote (94 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (167 167)) :lvel (quote (79 70)) :loffset (quote (98 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4700 3900 4500)) :ldur (quote (167 167 167 167)) :lvel (quote (63 76 70 74)) :loffset (quote (86 86 86 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (143 143)) :lvel (quote (99 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (286)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (429)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6400)) :ldur (quote (125 125)) :lvel (quote (57 93)) :loffset (quote (51 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (55 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 5900)) :ldur (quote (250 250 250)) :lvel (quote (64 55 70)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (125 125)) :lvel (quote (79 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6600 6700 6600 4000)) :ldur (quote (125 125 125 125 125)) :lvel (quote (82 72 78 82 83)) :loffset (quote (78 78 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (375)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 5700 4700)) :ldur (quote (333 333 333 333)) :lvel (quote (94 54 58 69)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (167 167)) :lvel (quote (85 86)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (84 67 81)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4700)) :ldur (quote (167 167)) :lvel (quote (59 76)) :loffset (quote (99 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 3700 4700)) :ldur (quote (167 167 167)) :lvel (quote (75 85 59)) :loffset (quote (64 64 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (73 84 86)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 7100)) :ldur (quote (333 333)) :lvel (quote (93 98)) :loffset (quote (72 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (69 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 4000)) :ldur (quote (375 375 375)) :lvel (quote (77 53 65)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700 4500 4800)) :ldur (quote (125 125 125 125)) :lvel (quote (47 72 87 64)) :loffset (quote (44 44 44 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 3900)) :ldur (quote (250 250)) :lvel (quote (54 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (125 125)) :lvel (quote (82 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 8300)) :ldur (quote (375 375)) :lvel (quote (58 47)) :loffset (quote (23 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700 4000)) :ldur (quote (125 125 125)) :lvel (quote (82 87 88)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (375 375)) :lvel (quote (97 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (74 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700)) :ldur (quote (167 167 167)) :lvel (quote (96 64 98)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (167 167)) :lvel (quote (83 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (333)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (143)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 3900)) :ldur (quote (143 143)) :lvel (quote (74 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4100)) :ldur (quote (375 375)) :lvel (quote (76 115)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5400 4700)) :ldur (quote (125 125 125)) :lvel (quote (101 78 86)) :loffset (quote (63 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (125)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (125)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (333 333)) :lvel (quote (115 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (167 167)) :lvel (quote (108 84)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700 4000)) :ldur (quote (375 375 375)) :lvel (quote (104 65 65)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (125 125)) :lvel (quote (84 83)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 8300 5200)) :ldur (quote (250 250 250 250)) :lvel (quote (62 53 65 69)) :loffset (quote (90 67 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5200 4100 6900)) :ldur (quote (250 250 250 250)) :lvel (quote (64 84 86 71)) :loffset (quote (85 85 85 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5100 3600 4500)) :ldur (quote (125 125 125 125)) :lvel (quote (77 77 87 74)) :loffset (quote (65 65 65 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4700 3500)) :ldur (quote (125 125 125)) :lvel (quote (61 74 59)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 7100)) :ldur (quote (375 375 375)) :lvel (quote (85 90 97)) :loffset (quote (68 68 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6900 5900 5500 5200)) :ldur (quote (167 167 167 167 167)) :lvel (quote (83 67 63 57 61)) :loffset (quote (97 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4500)) :ldur (quote (333 333)) :lvel (quote (98 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (58 75 71)) :loffset (quote (97 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (167 167)) :lvel (quote (98 108)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5400)) :ldur (quote (200 200)) :lvel (quote (59 81)) :loffset (quote (77 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (200)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6700)) :ldur (quote (200 200)) :lvel (quote (100 100)) :loffset (quote (95 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (200 200)) :lvel (quote (103 92)) :loffset (quote (70 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6900 6400 5200)) :ldur (quote (167 167 167 167)) :lvel (quote (94 72 80 56)) :loffset (quote (71 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6700)) :ldur (quote (167 167)) :lvel (quote (82 97)) :loffset (quote (86 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5500 5200 4700)) :ldur (quote (167 167 167 167)) :lvel (quote (92 64 67 94)) :loffset (quote (57 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 4000 7800 6600 5700 4000)) :ldur (quote (167 167 167 167 167 167 167)) :lvel (quote (70 70 105 72 57 69 65)) :loffset (quote (100 100 100 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 7400)) :ldur (quote (429 429)) :lvel (quote (72 96)) :loffset (quote (45 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 4000)) :ldur (quote (143 143)) :lvel (quote (89 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 4700)) :ldur (quote (286 286)) :lvel (quote (86 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600 5200 4500)) :ldur (quote (143 143 143)) :lvel (quote (80 57 82)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 4700)) :ldur (quote (167 167)) :lvel (quote (75 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6900 5900 5200)) :ldur (quote (167 167 167 167)) :lvel (quote (50 65 55 57)) :loffset (quote (47 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (167 167 167)) :lvel (quote (74 67 77)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000)) :ldur (quote (167 167 167)) :lvel (quote (70 63 99)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (250)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4000 7900 5500 5200 4700)) :ldur (quote (125 125 125 125 125 125)) :lvel (quote (91 86 102 56 62 71)) :loffset (quote (94 94 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (375 375)) :lvel (quote (67 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (143 143)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7100 5400 4700 4000)) :ldur (quote (143 143 143 143 143)) :lvel (quote (64 76 67 67 105)) :loffset (quote (85 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (286)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (286 286 286)) :lvel (quote (60 62 83)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (143 143)) :lvel (quote (81 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 6900 6600 5900 5500 5200)) :ldur (quote (333 333 333 333 333 333)) :lvel (quote (90 62 52 46 57 58)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 5400)) :ldur (quote (167 167)) :lvel (quote (82 67)) :loffset (quote (69 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 7600 4700)) :ldur (quote (167 167 167)) :lvel (quote (59 100 78)) :loffset (quote (86 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7100 5700 4000)) :ldur (quote (200 200 200 200)) :lvel (quote (69 64 58 98)) :loffset (quote (98 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (200)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7100)) :ldur (quote (200 200)) :lvel (quote (73 67)) :loffset (quote (89 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700 4000)) :ldur (quote (125 125 125)) :lvel (quote (61 70 90)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 5200)) :ldur (quote (125 125 125)) :lvel (quote (60 58 67)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (125 125)) :lvel (quote (64 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (375)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3800)) :ldur (quote (125 125)) :lvel (quote (73 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (167 167)) :lvel (quote (64 97)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700)) :ldur (quote (333 333)) :lvel (quote (65 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (77 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4000 7600 5200 4700)) :ldur (quote (250 250 250 250 250)) :lvel (quote (88 85 92 57 66)) :loffset (quote (86 86 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (500)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (250)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (125 125 125)) :lvel (quote (68 55 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 3900)) :ldur (quote (250 250 250)) :lvel (quote (71 65 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 7100 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (64 68 66 100)) :loffset (quote (86 86 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (143 143)) :lvel (quote (68 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4000)) :ldur (quote (286 286)) :lvel (quote (77 92)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (286 286 286)) :lvel (quote (66 55 58)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4500)) :ldur (quote (167 167)) :lvel (quote (77 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000)) :ldur (quote (167 167 167)) :lvel (quote (66 69 101)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (59 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5200 4700 5400)) :ldur (quote (250 250 250 250)) :lvel (quote (85 72 80 80)) :loffset (quote (89 89 89 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 8600 8500 5500 4700)) :ldur (quote (125 125 125 125 125)) :lvel (quote (66 78 89 60 70)) :loffset (quote (75 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6400 5900)) :ldur (quote (250 250 250)) :lvel (quote (68 50 65)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (143 143)) :lvel (quote (58 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4600)) :ldur (quote (143 143)) :lvel (quote (74 96)) :loffset (quote (50 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7100 5400 4500 4000)) :ldur (quote (143 143 143 143 143)) :lvel (quote (85 66 71 71 97)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600 8300 4700)) :ldur (quote (286 286 286)) :lvel (quote (91 73 77)) :loffset (quote (99 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700 4000)) :ldur (quote (286 286 286)) :lvel (quote (84 66 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (125)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5200 4700 4500)) :ldur (quote (125 125 125 125)) :lvel (quote (76 56 80 82)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 8600 5500 4000)) :ldur (quote (250 250 250 250)) :lvel (quote (72 82 58 79)) :loffset (quote (45 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 8300)) :ldur (quote (125 125)) :lvel (quote (84 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (125 125 125)) :lvel (quote (63 59 59)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700)) :ldur (quote (125 125)) :lvel (quote (94 84)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000 7800)) :ldur (quote (167 167 167 167)) :lvel (quote (71 70 104 92)) :loffset (quote (99 99 99 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4000)) :ldur (quote (125 125)) :lvel (quote (103 105)) :loffset (quote (98 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 6600 4700 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (71 93 81 93)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5200 6900 5900)) :ldur (quote (125 125 125 125)) :lvel (quote (79 61 67 53)) :loffset (quote (70 70 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700)) :ldur (quote (125 125)) :lvel (quote (75 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4700)) :ldur (quote (250 250)) :lvel (quote (73 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4600 3900)) :ldur (quote (125 125 125)) :lvel (quote (71 71 60)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (375)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4700)) :ldur (quote (250 250)) :lvel (quote (84 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 5900)) :ldur (quote (125 125 125)) :lvel (quote (67 90 76)) :loffset (quote (85 85 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700 4500)) :ldur (quote (500 500 500)) :lvel (quote (50 65 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5500)) :ldur (quote (125 125)) :lvel (quote (61 49)) :loffset (quote (23 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (125)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4500)) :ldur (quote (125 125)) :lvel (quote (79 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (250 250)) :lvel (quote (67 107)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 6900 6700)) :ldur (quote (125 125 125)) :lvel (quote (72 72 98)) :loffset (quote (91 91 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8100 7800 5500 4000)) :ldur (quote (125 125 125 125 125)) :lvel (quote (83 77 91 59 84)) :loffset (quote (96 96 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 6900 5900)) :ldur (quote (125 125 125)) :lvel (quote (58 72 66)) :loffset (quote (45 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4500 4000)) :ldur (quote (125 125 125)) :lvel (quote (69 60 69)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (125 125)) :lvel (quote (69 95)) :loffset (quote (56 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 7100 4600 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (77 93 76 88)) :loffset (quote (78 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 8300)) :ldur (quote (375 375)) :lvel (quote (61 88)) :loffset (quote (58 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (65 99)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (167)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 7900 6900 5500 4600)) :ldur (quote (167 167 167 167 167)) :lvel (quote (85 95 69 56 78)) :loffset (quote (61 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (333)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5500 5200)) :ldur (quote (167 167 167 167)) :lvel (quote (67 58 53 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (375)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4600)) :ldur (quote (250 250)) :lvel (quote (72 84)) :loffset (quote (80 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7100 5400 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (86 79 57 86)) :loffset (quote (52 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6900 4600 4500)) :ldur (quote (250 250 250 250)) :lvel (quote (51 73 81 86)) :loffset (quote (92 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700)) :ldur (quote (250 250)) :lvel (quote (85 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200 6900 5900)) :ldur (quote (375 375 375 375)) :lvel (quote (60 54 64 63)) :loffset (quote (100 100 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4600)) :ldur (quote (250 250)) :lvel (quote (92 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 3800 4600)) :ldur (quote (250 250 250)) :lvel (quote (90 61 84)) :loffset (quote (69 69 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 8600 7100 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (80 80 73 102)) :loffset (quote (89 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (63 79 96)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 5500 6900 5200)) :ldur (quote (286 286 286 286)) :lvel (quote (84 54 82 59)) :loffset (quote (82 82 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4000)) :ldur (quote (286 286)) :lvel (quote (68 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000 4600)) :ldur (quote (143 143 143 143)) :lvel (quote (85 60 97 54)) :loffset (quote (80 80 80 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700)) :ldur (quote (143 143)) :lvel (quote (76 84)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (143)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (429)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (143 143 143)) :lvel (quote (71 61 70)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5500 4700)) :ldur (quote (125 125 125)) :lvel (quote (84 64 65)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7100)) :ldur (quote (125 125)) :lvel (quote (86 84)) :loffset (quote (43 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 3800 7800 4600)) :ldur (quote (250 250 250 250)) :lvel (quote (82 62 88 84)) :loffset (quote (72 72 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 7600 7100 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (73 84 94 92)) :loffset (quote (91 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (125)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (57 92)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4600)) :ldur (quote (167 167 167)) :lvel (quote (77 79 86)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 4700)) :ldur (quote (167 167)) :lvel (quote (82 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7600 4700 5400)) :ldur (quote (167 167 167 167)) :lvel (quote (86 84 76 70)) :loffset (quote (52 52 52 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 4000)) :ldur (quote (167 167)) :lvel (quote (74 86)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 6900 5900)) :ldur (quote (167 167 167)) :lvel (quote (84 76 58)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 5500 4600)) :ldur (quote (167 167 167)) :lvel (quote (82 57 68)) :loffset (quote (54 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 4700 8300 4000)) :ldur (quote (167 167 167 167)) :lvel (quote (91 79 80 81)) :loffset (quote (87 87 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7600)) :ldur (quote (167 167)) :lvel (quote (81 90)) :loffset (quote (96 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000)) :ldur (quote (167 167 167)) :lvel (quote (85 64 101)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (167)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700 7400)) :ldur (quote (125 125 125 125)) :lvel (quote (73 73 94 104)) :loffset (quote (93 93 93 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700)) :ldur (quote (125 125)) :lvel (quote (93 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 8500)) :ldur (quote (250 250 250)) :lvel (quote (85 61 90)) :loffset (quote (65 65 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5500 5200)) :ldur (quote (125 125 125)) :lvel (quote (78 67 64)) :loffset (quote (80 80 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7100)) :ldur (quote (125 125)) :lvel (quote (99 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (333)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 7600 4700)) :ldur (quote (333 333 333)) :lvel (quote (63 76 98)) :loffset (quote (71 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 4000 4500)) :ldur (quote (167 167 167 167)) :lvel (quote (81 66 94 83)) :loffset (quote (29 29 29 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5400)) :ldur (quote (167 167)) :lvel (quote (82 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 4700 7400)) :ldur (quote (125 125 125)) :lvel (quote (101 66 97)) :loffset (quote (80 80 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 4000)) :ldur (quote (125 125)) :lvel (quote (75 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (250 250)) :lvel (quote (67 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5500 5400 5200)) :ldur (quote (250 250 250 250)) :lvel (quote (83 58 87 58)) :loffset (quote (83 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6200 5900)) :ldur (quote (333 333 333)) :lvel (quote (64 79 58)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4600)) :ldur (quote (167 167)) :lvel (quote (83 96)) :loffset (quote (66 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000 4700)) :ldur (quote (167 167 167)) :lvel (quote (84 100 61)) :loffset (quote (93 93 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700)) :ldur (quote (167 167)) :lvel (quote (69 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (106)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4000)) :ldur (quote (250 250)) :lvel (quote (85 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700 6400)) :ldur (quote (125 125 125)) :lvel (quote (92 72 85)) :loffset (quote (91 91 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5400)) :ldur (quote (250 250)) :lvel (quote (64 107)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5900 5200 5500)) :ldur (quote (143 143 143 143)) :lvel (quote (68 56 58 57)) :loffset (quote (99 99 99 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (143)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700 4500)) :ldur (quote (143 143 143)) :lvel (quote (89 77 72)) :loffset (quote (59 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (143)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6700)) :ldur (quote (143 143)) :lvel (quote (84 84)) :loffset (quote (75 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5500 5400 3900)) :ldur (quote (143 143 143 143)) :lvel (quote (77 79 90 73)) :loffset (quote (58 58 58 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (286 286)) :lvel (quote (75 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5500 4700)) :ldur (quote (125 125 125)) :lvel (quote (88 63 65)) :loffset (quote (63 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6700 4600 4500)) :ldur (quote (125 125 125 125)) :lvel (quote (63 85 69 84)) :loffset (quote (78 78 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (375)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700 6400)) :ldur (quote (125 125 125)) :lvel (quote (87 80 80)) :loffset (quote (91 91 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (143)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (286 286)) :lvel (quote (88 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 7900 5900)) :ldur (quote (333 333 333)) :lvel (quote (66 84 58)) :loffset (quote (80 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5500 8500)) :ldur (quote (167 167 167)) :lvel (quote (49 56 88)) :loffset (quote (90 68 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4600 3900)) :ldur (quote (167 167 167)) :lvel (quote (50 75 69)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (64 102)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5200 4700)) :ldur (quote (167 167 167)) :lvel (quote (71 67 78)) :loffset (quote (83 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5400)) :ldur (quote (167 167)) :lvel (quote (73 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200)) :ldur (quote (375 375)) :lvel (quote (55 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4000)) :ldur (quote (125 125)) :lvel (quote (60 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4700)) :ldur (quote (125 125)) :lvel (quote (68 97)) :loffset (quote (82 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (125 125)) :lvel (quote (110 58)) :loffset (quote (38 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (108)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (125)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (125)) :lvel (quote (97)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600 6900 5400)) :ldur (quote (125 125 125)) :lvel (quote (91 75 81)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (62 75)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 5900 5200)) :ldur (quote (250 250 250)) :lvel (quote (65 49 60)) :loffset (quote (99 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5500)) :ldur (quote (125 125)) :lvel (quote (68 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600 5400 4700)) :ldur (quote (250 250 250)) :lvel (quote (90 60 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (375 375)) :lvel (quote (80 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 5400)) :ldur (quote (125 125 125)) :lvel (quote (86 91 71)) :loffset (quote (97 97 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700)) :ldur (quote (125 125)) :lvel (quote (82 90)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5400 4700 6900)) :ldur (quote (250 250 250 250)) :lvel (quote (79 85 65 73)) :loffset (quote (84 84 84 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200)) :ldur (quote (125 125)) :lvel (quote (47 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4600 7600)) :ldur (quote (250 250 250)) :lvel (quote (54 52 81)) :loffset (quote (62 62 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 6400 5400 4600 4500 3800)) :ldur (quote (250 250 250 250 250 250)) :lvel (quote (94 32 49 79 63 56)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4700)) :ldur (quote (167 167)) :lvel (quote (53 46)) :loffset (quote (69 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (333 333)) :lvel (quote (75 97)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (97)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (125)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5500 6900 4700)) :ldur (quote (250 250 250 250)) :lvel (quote (78 85 67 71)) :loffset (quote (74 74 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5900 5200)) :ldur (quote (125 125 125)) :lvel (quote (83 48 57)) :loffset (quote (99 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4600 3800)) :ldur (quote (125 125 125)) :lvel (quote (55 103 66)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700)) :ldur (quote (125 125)) :lvel (quote (89 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4000)) :ldur (quote (250 250)) :lvel (quote (63 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5200 4700 4500)) :ldur (quote (250 250 250 250)) :lvel (quote (88 58 82 90)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (143)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6900 6400 4700)) :ldur (quote (143 143 143 143)) :lvel (quote (73 69 69 67)) :loffset (quote (91 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200)) :ldur (quote (143 143)) :lvel (quote (71 54)) :loffset (quote (71 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4000)) :ldur (quote (143 143)) :lvel (quote (54 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5500)) :ldur (quote (143 143)) :lvel (quote (44 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4600 4500 4000)) :ldur (quote (286 286 286 286)) :lvel (quote (61 86 77 62)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (143 143)) :lvel (quote (94 108)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (286)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200)) :ldur (quote (143 143)) :lvel (quote (68 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5200 4700)) :ldur (quote (286 286 286)) :lvel (quote (81 63 83)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (286)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200)) :ldur (quote (286 286)) :lvel (quote (56 81)) :loffset (quote (87 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5900 5500 5200)) :ldur (quote (143 143 143 143)) :lvel (quote (64 58 58 64)) :loffset (quote (100 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (375)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4700)) :ldur (quote (250 250)) :lvel (quote (66 85)) :loffset (quote (91 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 5400 4000)) :ldur (quote (125 125 125)) :lvel (quote (85 62 104)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 7100 5200 4700)) :ldur (quote (286 286 286 286 286)) :lvel (quote (58 60 81 63 89)) :loffset (quote (69 46 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200 5400 4700)) :ldur (quote (143 143 143 143)) :lvel (quote (50 53 82 79)) :loffset (quote (48 48 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700 6600 5900 5200)) :ldur (quote (143 143 143 143 143)) :lvel (quote (58 55 45 46 54)) :loffset (quote (89 89 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4600 4500)) :ldur (quote (143 143 143)) :lvel (quote (72 84 71)) :loffset (quote (53 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (143 143)) :lvel (quote (75 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700)) :ldur (quote (143 143)) :lvel (quote (63 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 6400)) :ldur (quote (143 143)) :lvel (quote (76 91)) :loffset (quote (78 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000)) :ldur (quote (143 143)) :lvel (quote (77 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700)) :ldur (quote (125 125 125)) :lvel (quote (78 53 71)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5500)) :ldur (quote (125 125)) :lvel (quote (81 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (375)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3800)) :ldur (quote (167 167)) :lvel (quote (81 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (167)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7400 4000)) :ldur (quote (167 167 167)) :lvel (quote (76 78 98)) :loffset (quote (83 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 4000)) :ldur (quote (167 167)) :lvel (quote (68 87)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200 4600)) :ldur (quote (286 286 286)) :lvel (quote (62 68 98)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5400 4700)) :ldur (quote (143 143 143)) :lvel (quote (59 83 65)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (143)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (143)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200)) :ldur (quote (143 143)) :lvel (quote (53 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4000)) :ldur (quote (375 375)) :lvel (quote (80 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (125 125 125)) :lvel (quote (67 76 98)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6700)) :ldur (quote (125 125)) :lvel (quote (88 82)) :loffset (quote (92 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4600)) :ldur (quote (125 125 125)) :lvel (quote (78 74 90)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (500)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 5400 4000 4700)) :ldur (quote (375 375 375 375)) :lvel (quote (76 79 75 77)) :loffset (quote (97 97 97 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (250 250)) :lvel (quote (65 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (49)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (125)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (125 125)) :lvel (quote (64 90)) :loffset (quote (47 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 4700)) :ldur (quote (125 125)) :lvel (quote (94 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4700 7800)) :ldur (quote (250 250 250 250)) :lvel (quote (60 57 86 79)) :loffset (quote (91 91 91 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700 5200)) :ldur (quote (500 500 500)) :lvel (quote (70 64 103)) :loffset (quote (76 76 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7300 6900 5200)) :ldur (quote (250 250 250 250)) :lvel (quote (69 90 65 71)) :loffset (quote (61 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 5500)) :ldur (quote (125 125)) :lvel (quote (77 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 8300 5500 4500)) :ldur (quote (125 125 125 125)) :lvel (quote (81 82 60 68)) :loffset (quote (54 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 4700 4000)) :ldur (quote (250 250 250)) :lvel (quote (91 84 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (69 92)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (61 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5200 4700)) :ldur (quote (167 167 167)) :lvel (quote (73 64 73)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7400 7300 6900 5200)) :ldur (quote (167 167 167 167 167)) :lvel (quote (70 71 90 58 53)) :loffset (quote (67 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5500 8100)) :ldur (quote (167 167 167)) :lvel (quote (80 56 73)) :loffset (quote (84 84 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 3900)) :ldur (quote (143 143)) :lvel (quote (75 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (143 143)) :lvel (quote (68 85)) :loffset (quote (85 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 4700 7100 4000)) :ldur (quote (286 286 286 286)) :lvel (quote (86 70 73 102)) :loffset (quote (93 93 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (143)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 7400 6900 4700)) :ldur (quote (143 143 143 143)) :lvel (quote (51 86 60 87)) :loffset (quote (55 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 5500 4600)) :ldur (quote (333 333 333)) :lvel (quote (48 76 75)) :loffset (quote (46 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5500 5200)) :ldur (quote (167 167 167)) :lvel (quote (65 48 56)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4000)) :ldur (quote (286 286)) :lvel (quote (76 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (286)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700 4000)) :ldur (quote (143 143 143)) :lvel (quote (74 71 101)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 4700)) :ldur (quote (143 143)) :lvel (quote (83 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 7400 4500)) :ldur (quote (167 167 167)) :lvel (quote (86 76 91)) :loffset (quote (43 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700)) :ldur (quote (167 167)) :lvel (quote (62 55)) :loffset (quote (24 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200 5400)) :ldur (quote (167 167 167)) :lvel (quote (49 52 99)) :loffset (quote (81 81 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (167 167)) :lvel (quote (58 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700)) :ldur (quote (167 167)) :lvel (quote (66 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (333 333 333)) :lvel (quote (67 55 92)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4500)) :ldur (quote (250 250)) :lvel (quote (83 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 4700 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (71 62 66 61)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (250 250)) :lvel (quote (53 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4500)) :ldur (quote (125 125)) :lvel (quote (72 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (73 105)) :loffset (quote (45 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4000 6700 5500)) :ldur (quote (167 167 167 167)) :lvel (quote (104 73 92 80)) :loffset (quote (78 78 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5500)) :ldur (quote (167 167)) :lvel (quote (106 54)) :loffset (quote (96 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (167)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4000)) :ldur (quote (167 167)) :lvel (quote (55 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (333 333)) :lvel (quote (76 103)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (69 98)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 6700)) :ldur (quote (167 167)) :lvel (quote (66 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 6400 4500)) :ldur (quote (250 250 250)) :lvel (quote (91 84 86)) :loffset (quote (72 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5200)) :ldur (quote (125 125)) :lvel (quote (55 52)) :loffset (quote (69 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4000)) :ldur (quote (125 125)) :lvel (quote (79 76)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5500 5200)) :ldur (quote (125 125 125)) :lvel (quote (52 56 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 4600)) :ldur (quote (250 250)) :lvel (quote (56 88)) :loffset (quote (86 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (333 333)) :lvel (quote (85 107)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (333)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (100 99)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5400)) :ldur (quote (125 125)) :lvel (quote (71 108)) :loffset (quote (63 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 6900 5500 5200)) :ldur (quote (125 125 125 125)) :lvel (quote (55 63 60 66)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 4700)) :ldur (quote (125 125)) :lvel (quote (71 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 4600)) :ldur (quote (250 250)) :lvel (quote (97 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (125)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (125 125)) :lvel (quote (108 81)) :loffset (quote (71 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (125)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7400 4000)) :ldur (quote (167 167 167)) :lvel (quote (61 67 95)) :loffset (quote (95 50 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700 7300)) :ldur (quote (167 167 167)) :lvel (quote (66 79 106)) :loffset (quote (90 90 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 5500)) :ldur (quote (167 167 167)) :lvel (quote (62 65 74)) :loffset (quote (93 93 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 6100 5500)) :ldur (quote (250 250 250)) :lvel (quote (52 74 63)) :loffset (quote (45 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 3900 4600)) :ldur (quote (250 250 250)) :lvel (quote (90 70 59)) :loffset (quote (87 87 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (250 250)) :lvel (quote (63 99)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 7800 4700)) :ldur (quote (167 167 167)) :lvel (quote (94 105 88)) :loffset (quote (50 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 4700)) :ldur (quote (333 333)) :lvel (quote (99 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (167)) :lvel (quote (109)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6700 5200)) :ldur (quote (125 125 125)) :lvel (quote (62 82 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6600)) :ldur (quote (375 375)) :lvel (quote (51 93)) :loffset (quote (83 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (97)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 4000)) :ldur (quote (125 125)) :lvel (quote (109 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5400)) :ldur (quote (167 167)) :lvel (quote (98 54)) :loffset (quote (85 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 7300)) :ldur (quote (167 167 167)) :lvel (quote (82 85 81)) :loffset (quote (52 52 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6100)) :ldur (quote (167 167)) :lvel (quote (77 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 6900 5500 5200)) :ldur (quote (167 167 167 167 167)) :lvel (quote (61 62 57 49 52)) :loffset (quote (89 89 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (375)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4500 4000)) :ldur (quote (125 125 125)) :lvel (quote (84 67 106)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 8100)) :ldur (quote (250 250)) :lvel (quote (69 73)) :loffset (quote (77 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5500 5200 4700)) :ldur (quote (250 250 250 250)) :lvel (quote (68 63 67 86)) :loffset (quote (97 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (250)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700 7900 6900)) :ldur (quote (250 250 250 250)) :lvel (quote (71 68 77 65)) :loffset (quote (68 68 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 4700 4500)) :ldur (quote (125 125 125)) :lvel (quote (68 81 88)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 7600 4700)) :ldur (quote (125 125 125)) :lvel (quote (102 77 78)) :loffset (quote (99 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (167)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700)) :ldur (quote (333 333)) :lvel (quote (77 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5400)) :ldur (quote (167 167)) :lvel (quote (85 98)) :loffset (quote (68 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6900 5200)) :ldur (quote (167 167 167)) :lvel (quote (87 64 63)) :loffset (quote (56 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (97)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (143)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 4600)) :ldur (quote (143 143)) :lvel (quote (67 102)) :loffset (quote (61 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (143 143)) :lvel (quote (75 108)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (143)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4600 6400)) :ldur (quote (286 286 286)) :lvel (quote (88 98 105)) :loffset (quote (82 82 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (167 167)) :lvel (quote (95 73)) :loffset (quote (97 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (167 167)) :lvel (quote (64 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7700)) :ldur (quote (167 167)) :lvel (quote (106 87)) :loffset (quote (48 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 4600)) :ldur (quote (125 125)) :lvel (quote (76 106)) :loffset (quote (33 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (84 112)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (375)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6900 6700)) :ldur (quote (125 125 125)) :lvel (quote (63 67 84)) :loffset (quote (71 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5500 5400 4600 4000)) :ldur (quote (500 500 500 500 500)) :lvel (quote (78 77 75 60 78)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 6900 5200)) :ldur (quote (167 167 167)) :lvel (quote (85 76 60)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (333)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000 4700 4500)) :ldur (quote (167 167 167 167)) :lvel (quote (74 88 77 81)) :loffset (quote (73 73 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5400 4000)) :ldur (quote (167 167 167)) :lvel (quote (79 59 105)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 4000)) :ldur (quote (143 143)) :lvel (quote (74 107)) :loffset (quote (77 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500)) :ldur (quote (143 143)) :lvel (quote (90 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6900)) :ldur (quote (143 143)) :lvel (quote (89 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6800)) :ldur (quote (286 286)) :lvel (quote (94 82)) :loffset (quote (71 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 4700)) :ldur (quote (143 143)) :lvel (quote (85 107)) :loffset (quote (90 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (143 143)) :lvel (quote (92 112)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (98)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (286 286)) :lvel (quote (88 112)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (143)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (375)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 8500 5400)) :ldur (quote (250 250 250)) :lvel (quote (81 95 109)) :loffset (quote (95 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (125 125)) :lvel (quote (66 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 4700 3900)) :ldur (quote (250 250 250)) :lvel (quote (96 101 76)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (86 112)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (333 333)) :lvel (quote (73 105)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 5400 4700)) :ldur (quote (167 167 167)) :lvel (quote (72 89 90)) :loffset (quote (51 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (167 167)) :lvel (quote (77 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (81 65 78)) :loffset (quote (83 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4500)) :ldur (quote (167 167)) :lvel (quote (72 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 4500)) :ldur (quote (167 167 167)) :lvel (quote (80 105 72)) :loffset (quote (74 74 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4500)) :ldur (quote (250 250)) :lvel (quote (95 97)) :loffset (quote (56 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (250 250)) :lvel (quote (71 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 6900 5900)) :ldur (quote (125 125 125)) :lvel (quote (65 66 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4500)) :ldur (quote (250 250)) :lvel (quote (81 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4000)) :ldur (quote (125 125)) :lvel (quote (85 112)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (125 125 125)) :lvel (quote (81 99 93)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 4600 8300 5500 5400)) :ldur (quote (125 125 125 125 125)) :lvel (quote (67 58 68 64 88)) :loffset (quote (98 98 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 7900 6900 5200 4700)) :ldur (quote (125 125 125 125 125)) :lvel (quote (79 91 63 67 61)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 4600 4000)) :ldur (quote (125 125 125)) :lvel (quote (76 88 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (125 125)) :lvel (quote (105 84)) :loffset (quote (67 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (125)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6900 5200 4700)) :ldur (quote (125 125 125 125)) :lvel (quote (55 66 71 75)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5500)) :ldur (quote (125 125)) :lvel (quote (70 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5200 4100)) :ldur (quote (125 125 125)) :lvel (quote (56 64 69)) :loffset (quote (69 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6400 5900 5500 5200)) :ldur (quote (375 375 375 375 375)) :lvel (quote (59 70 52 53 54)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (125)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 5900 4500 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (57 66 64 59)) :loffset (quote (82 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (68 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5200)) :ldur (quote (125 125)) :lvel (quote (102 56)) :loffset (quote (96 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (375)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (125)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6700 6400)) :ldur (quote (125 125 125)) :lvel (quote (96 95 88)) :loffset (quote (96 96 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (375)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (250 250 250)) :lvel (quote (82 45 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 4500)) :ldur (quote (125 125)) :lvel (quote (74 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 4600 3600)) :ldur (quote (125 125 125)) :lvel (quote (95 81 58)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 3900)) :ldur (quote (250 250)) :lvel (quote (50 48)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (125 125)) :lvel (quote (69 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4000)) :ldur (quote (125 125)) :lvel (quote (63 95)) :loffset (quote (94 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4600)) :ldur (quote (125 125)) :lvel (quote (65 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 5500)) :ldur (quote (125 125)) :lvel (quote (61 55)) :loffset (quote (94 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 4000)) :ldur (quote (250 250 250)) :lvel (quote (73 64 67)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (125 125)) :lvel (quote (61 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (375 375)) :lvel (quote (53 72)) :loffset (quote (62 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (167)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (167 167)) :lvel (quote (87 106)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (97)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700)) :ldur (quote (143 143)) :lvel (quote (79 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5500 5200)) :ldur (quote (143 143 143 143)) :lvel (quote (58 47 57 55)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (286)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 4500)) :ldur (quote (143 143 143)) :lvel (quote (87 74 75)) :loffset (quote (90 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (71 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4500)) :ldur (quote (250 250)) :lvel (quote (57 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900 5500)) :ldur (quote (250 250 250)) :lvel (quote (75 69 62)) :loffset (quote (22 22 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4000)) :ldur (quote (250 250 250)) :lvel (quote (63 63 59)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 4700)) :ldur (quote (250 250)) :lvel (quote (77 58)) :loffset (quote (46 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (125)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100 4000)) :ldur (quote (250 250)) :lvel (quote (104 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 8300 4700)) :ldur (quote (125 125 125)) :lvel (quote (101 86 76)) :loffset (quote (55 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (143)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200 4700)) :ldur (quote (143 143 143)) :lvel (quote (75 79 73)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (143)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700 6900 5200)) :ldur (quote (143 143 143 143)) :lvel (quote (82 57 62 53)) :loffset (quote (44 44 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (125)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (375 375)) :lvel (quote (93 85)) :loffset (quote (98 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000 7100)) :ldur (quote (125 125 125)) :lvel (quote (74 98 66)) :loffset (quote (58 58 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4600 8100)) :ldur (quote (250 250 250)) :lvel (quote (63 89 95)) :loffset (quote (64 64 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (375)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4600)) :ldur (quote (250 250)) :lvel (quote (56 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5000 4000 8300 5000 4700 3900)) :ldur (quote (125 125 125 125 125 125 125)) :lvel (quote (85 59 71 72 70 59 65)) :loffset (quote (96 96 96 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (143 143 143)) :lvel (quote (59 53 62)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (286)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 4000)) :ldur (quote (143 143 143)) :lvel (quote (62 76 106)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5500 5400 4700)) :ldur (quote (375 375 375 375)) :lvel (quote (81 63 88 75)) :loffset (quote (53 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 5500 6900 5200)) :ldur (quote (125 125 125 125)) :lvel (quote (81 55 60 54)) :loffset (quote (94 94 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 7600 4600 3900)) :ldur (quote (125 125 125 125)) :lvel (quote (34 89 86 57)) :loffset (quote (82 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4000 4800)) :ldur (quote (200 200 200)) :lvel (quote (68 99 56)) :loffset (quote (84 84 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (200)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (200 200)) :lvel (quote (73 103)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4700)) :ldur (quote (200 200)) :lvel (quote (87 92)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 4000 4000)) :ldur (quote (250 250 250)) :lvel (quote (67 87 107)) :loffset (quote (93 93 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (125 125)) :lvel (quote (69 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 6900)) :ldur (quote (125 125)) :lvel (quote (58 61)) :loffset (quote (63 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (333 333)) :lvel (quote (84 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (69 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5400 3800)) :ldur (quote (125 125 125)) :lvel (quote (64 90 78)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700)) :ldur (quote (250 250)) :lvel (quote (60 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5500 5200)) :ldur (quote (375 375 375 375)) :lvel (quote (57 61 52 58)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 8300)) :ldur (quote (333 333)) :lvel (quote (64 62)) :loffset (quote (71 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4000)) :ldur (quote (333 333)) :lvel (quote (88 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 4600 4000)) :ldur (quote (333 333 333 333)) :lvel (quote (71 70 68 104)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5200 4700)) :ldur (quote (250 250 250)) :lvel (quote (86 62 87)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700)) :ldur (quote (375 375)) :lvel (quote (82 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (167 167)) :lvel (quote (63 58)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700)) :ldur (quote (333 333)) :lvel (quote (55 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 3900)) :ldur (quote (167 167)) :lvel (quote (70 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (105 71 107)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6200)) :ldur (quote (250 250)) :lvel (quote (105 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4700)) :ldur (quote (250 250)) :lvel (quote (78 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200)) :ldur (quote (125 125)) :lvel (quote (57 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 4700)) :ldur (quote (375 375 375)) :lvel (quote (46 63 57)) :loffset (quote (85 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4700)) :ldur (quote (250 250)) :lvel (quote (77 76)) :loffset (quote (78 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (125 125)) :lvel (quote (66 98)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6400)) :ldur (quote (286 286)) :lvel (quote (75 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (429)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (286)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (250 250 250)) :lvel (quote (73 92 93)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900 5200)) :ldur (quote (125 125 125)) :lvel (quote (56 53 50)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (375)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (250 250)) :lvel (quote (82 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5700 4000)) :ldur (quote (125 125 125)) :lvel (quote (86 58 104)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (108)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4500 4000)) :ldur (quote (375 375 375)) :lvel (quote (72 84 93)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700)) :ldur (quote (167 167)) :lvel (quote (79 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5500 5200)) :ldur (quote (167 167 167)) :lvel (quote (56 50 49)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (167)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4700)) :ldur (quote (167 167)) :lvel (quote (80 91)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (72 96)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5400)) :ldur (quote (500 500)) :lvel (quote (83 68)) :loffset (quote (84 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5500 4500 6400)) :ldur (quote (250 250 250 250)) :lvel (quote (75 54 87 82)) :loffset (quote (72 72 72 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4700)) :ldur (quote (125 125)) :lvel (quote (45 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5400)) :ldur (quote (125 125)) :lvel (quote (75 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5200 4000)) :ldur (quote (333 333 333)) :lvel (quote (50 52 45)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (167)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 3900)) :ldur (quote (167 167)) :lvel (quote (81 71)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5400 4000)) :ldur (quote (143 143 143)) :lvel (quote (105 75 98)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 4000)) :ldur (quote (429 429 429)) :lvel (quote (57 67 99)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 6600 4700 6700)) :ldur (quote (286 286 286 286)) :lvel (quote (78 92 86 97)) :loffset (quote (90 90 90 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (143)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5200)) :ldur (quote (250 250)) :lvel (quote (59 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6400 5900)) :ldur (quote (250 250 250)) :lvel (quote (35 48 50)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (167 167)) :lvel (quote (93 81)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4700 3900)) :ldur (quote (167 167 167)) :lvel (quote (40 66 60)) :loffset (quote (47 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700)) :ldur (quote (167 167)) :lvel (quote (88 95)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (286)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 3900 6100 4700)) :ldur (quote (286 286 286 286)) :lvel (quote (79 82 58 83)) :loffset (quote (89 89 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (143)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900)) :ldur (quote (143 143)) :lvel (quote (66 42)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6600)) :ldur (quote (125 125)) :lvel (quote (63 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (125 125)) :lvel (quote (63 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6300 5900 4000)) :ldur (quote (125 125 125 125)) :lvel (quote (43 43 55 69)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 3900)) :ldur (quote (250 250)) :lvel (quote (84 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (125)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5500)) :ldur (quote (125 125)) :lvel (quote (95 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 4000)) :ldur (quote (167 167)) :lvel (quote (66 63)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (167)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5200 4700)) :ldur (quote (167 167 167)) :lvel (quote (57 61 70)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 4000)) :ldur (quote (333 333)) :lvel (quote (81 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5700 6700)) :ldur (quote (167 167 167)) :lvel (quote (87 56 83)) :loffset (quote (73 73 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 7900)) :ldur (quote (167 167)) :lvel (quote (96 82)) :loffset (quote (55 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 7900 6700)) :ldur (quote (167 167 167)) :lvel (quote (92 78 75)) :loffset (quote (80 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6000 4700 6700)) :ldur (quote (167 167 167 167)) :lvel (quote (77 50 56 97)) :loffset (quote (100 100 100 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6700)) :ldur (quote (500 500)) :lvel (quote (65 83)) :loffset (quote (88 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5900 5200 4700)) :ldur (quote (143 143 143 143)) :lvel (quote (69 63 50 82)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4000)) :ldur (quote (143 143)) :lvel (quote (53 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (143)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (286)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 4700 4000)) :ldur (quote (286 286 286 286)) :lvel (quote (67 49 62 48)) :loffset (quote (87 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 4600 3900 5200)) :ldur (quote (250 250 250 250)) :lvel (quote (54 94 63 45)) :loffset (quote (65 65 65 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (250)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5700)) :ldur (quote (250 250)) :lvel (quote (64 54)) :loffset (quote (23 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 4700 4000)) :ldur (quote (250 250 250 250)) :lvel (quote (57 50 58 58)) :loffset (quote (99 99 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (167)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (91)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (167)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6400)) :ldur (quote (167 167)) :lvel (quote (78 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 4700)) :ldur (quote (167 167)) :lvel (quote (55 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4700 4000)) :ldur (quote (167 167 167)) :lvel (quote (90 81 81)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6600 5900)) :ldur (quote (167 167 167)) :lvel (quote (55 78 59)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (167)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5200 4700)) :ldur (quote (250 250 250)) :lvel (quote (81 51 84)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (250 250)) :lvel (quote (68 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5900)) :ldur (quote (125 125)) :lvel (quote (72 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (250)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 6700 5200)) :ldur (quote (500 500 500)) :lvel (quote (70 71 50)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 3800 5700)) :ldur (quote (286 286 286)) :lvel (quote (53 74 60)) :loffset (quote (80 80 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 4700 4100)) :ldur (quote (143 143 143)) :lvel (quote (78 71 106)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 7200)) :ldur (quote (143 143)) :lvel (quote (61 73)) :loffset (quote (69 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400)) :ldur (quote (286 286)) :lvel (quote (92 73)) :loffset (quote (79 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 4700 4000)) :ldur (quote (143 143 143)) :lvel (quote (61 85 85)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (375)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 4000 5900 4700)) :ldur (quote (250 250 250 250)) :lvel (quote (67 90 61 76)) :loffset (quote (79 79 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (125)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 6700)) :ldur (quote (250 250)) :lvel (quote (73 70)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (49)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 4700 4000 4600)) :ldur (quote (125 125 125 125)) :lvel (quote (91 74 77 106)) :loffset (quote (87 87 87 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 6900)) :ldur (quote (375 375)) :lvel (quote (63 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5700 5200)) :ldur (quote (167 167 167)) :lvel (quote (52 57 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5200 4100)) :ldur (quote (167 167 167)) :lvel (quote (65 80 90)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 5400 3600)) :ldur (quote (167 167 167)) :lvel (quote (81 88 89)) :loffset (quote (87 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 5100)) :ldur (quote (167 167)) :lvel (quote (55 69)) :loffset (quote (23 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (167)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5600 4700)) :ldur (quote (167 167 167)) :lvel (quote (80 75 92)) :loffset (quote (70 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (167)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 5900)) :ldur (quote (167 167)) :lvel (quote (60 85)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 5600)) :ldur (quote (333 333)) :lvel (quote (78 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 5900)) :ldur (quote (167 167)) :lvel (quote (55 73)) :loffset (quote (68 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4000)) :ldur (quote (167 167)) :lvel (quote (91 101)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 4700)) :ldur (quote (143 143)) :lvel (quote (82 78)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (143)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 4000)) :ldur (quote (286 286)) :lvel (quote (81 95)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 8300 4700)) :ldur (quote (286 286 286)) :lvel (quote (76 85 62)) :loffset (quote (99 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (143)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 7100 5900 5600)) :ldur (quote (333 333 333 333)) :lvel (quote (69 74 40 62)) :loffset (quote (98 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (89)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4000)) :ldur (quote (167 167)) :lvel (quote (62 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 4700)) :ldur (quote (167 167)) :lvel (quote (70 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (167)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 4700 8300)) :ldur (quote (167 167 167)) :lvel (quote (56 57 73)) :loffset (quote (99 99 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7300 4700)) :ldur (quote (333 333 333)) :lvel (quote (64 65 67)) :loffset (quote (90 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 7500 5900)) :ldur (quote (167 167 167)) :lvel (quote (62 62 38)) :loffset (quote (70 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5600)) :ldur (quote (167 167)) :lvel (quote (42 49)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300)) :ldur (quote (250)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 4700 3900)) :ldur (quote (125 125 125)) :lvel (quote (59 64 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4500)) :ldur (quote (125 125)) :lvel (quote (67 53)) :loffset (quote (81 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 5700)) :ldur (quote (125 125)) :lvel (quote (57 48)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4000)) :ldur (quote (333 333)) :lvel (quote (43 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 4700)) :ldur (quote (333 333)) :lvel (quote (40 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900 6800 6300)) :ldur (quote (286 286 286)) :lvel (quote (35 31 44)) :loffset (quote (54 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 5900 5600)) :ldur (quote (571 571 571)) :lvel (quote (31 40 38)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((nil nil (0) (0)) ((0 0 0) (0) (0 0)) ((0 0) (0) (0) (0 0 0)) ((0 0) (0) (0) (0 0))) (((0 0) (0) (0)) ((0 0 0 0) (0) (0) (0)) ((0) (0 0) (0) (0)) ((0) (0 0 0) (0) (0) (0) (0))) (((0) (0 0) (0) (0)) ((0) (0 0) (0)) ((0) (0) (0 0 0) (0)) ((0) (0) (0 0) (0))) (((0) (0 0) (0 0 0) (0 0 0) (0 0)) ((0 0) (0 0) (0) (0)) ((0 0) (0) (0 0 0) (0 0 0)) ((0 0 0) (0 0) (0 0))) (((0 0) (0 0) (0 0 0)) ((0 0 0) (0) (0) (0)) ((0) (0 0 0 0) (0) (0)) ((0) (0 0) (0) (0 0 0))) (((0 0 0) (0) (0 0) (0)) ((0 0) (0 0 0) (0 0) (0 0) (0 0)) ((0 0 0 0) (0) (0) (0)) ((0) (0 0 0 0) (0 0) (0) (0))) (((0) (0 0 0) (0 0 0) (0) (0)) ((0) (0 0 0) (0 0 0 0) (0 0)) ((0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0)) ((0 0) (0 0 0) (0) (0 0))) (((0 0) (0 0 0) (0 0 0) (0 0)) ((0 0) (0) (0 0 0) (0 0)) ((0 0) (0 0 0) (0 0 0 0) (0)) ((0) (0) (0) (0 0) (0))) (((0) (0) (0 0) (0 0) (0 0) (0)) ((0) (0) (0 0) (0 0) (0)) ((0 0) (0 0) (0 0 0 0) (0) (0 0 0 0 0)) ((0 0 0) (0) (0 0 0) (0))) (((0 0) (0) (0) (0) (0 0 0) (0)) ((0) (0) (0 0) (0)) ((0) (0 0) (0) (0 0) (0)) ((0) (0 0) (0) (0 0 0) (0))) (((0 0) (0) (0) (0) (0 0)) ((0 0) (0 0) (0) (0 0 0) (0)) ((0) (0 0) (0) (0) (0 0)) ((0 0) (0) (0) (0 0) (0 0))) (((0 0) (0) (0 0) (0) (0)) ((0) (0 0 0 0) (0 0 0 0) (0 0 0 0)) ((0) (0) (0) (0 0)) ((0) (0 0 0) (0 0) (0 0) (0))) (((0 0 0) (0 0) (0) (0) (0)) ((0) (0 0 0 0) (0 0) (0 0) (0 0)) ((0 0) (0 0 0 0) (0 0) (0) (0) (0 0)) ((0 0) (0) (0) (0 0) (0 0))) (((0 0) (0 0 0) (0 0) (0 0 0)) ((0 0 0) (0 0 0) (0) (0 0 0)) ((0 0) (0) (0) (0 0 0)) ((0 0) (0 0 0) (0) (0))) (((0) (0 0 0 0 0) (0) (0 0)) ((0 0) (0) (0) (0) (0 0)) ((0) (0 0) (0 0) (0) (0)) ((0) (0 0 0) (0 0) (0 0) (0) (0 0))) (((0 0) (0 0 0) (0 0 0) (0 0 0 0 0)) ((0) (0) (0) (0 0 0 0 0) (0)) ((0) (0 0) (0 0 0) (0 0 0 0) (0 0 0)) ((0 0 0) (0 0 0 0 0) (0 0) (0))) (((0 0 0) (0 0) (0) (0)) ((0 0 0) (0 0 0 0) (0) (0) (0)) ((0 0 0) (0 0) (0 0) (0 0) (0) (0 0)) ((0 0 0) (0) (0 0 0 0))) (((0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0)) ((0 0) (0 0) (0)) ((0) (0 0) (0) (0) (0 0 0)) ((0) (0 0 0 0 0))) (((0 0) (0 0 0) (0 0) (0)) ((0 0 0 0 0) (0) (0 0) (0 0 0)) ((0 0 0) (0 0 0 0) (0) (0 0 0 0) (0)) ((0 0) (0) (0 0 0) (0 0))) (((0) (0 0) (0 0) (0 0 0) (0 0)) ((0 0) (0 0) (0 0 0)) ((0 0 0) (0 0 0) (0 0) (0 0 0) (0)) ((0) (0 0 0 0 0) (0) (0 0) (0) (0 0 0))) (((0) (0) (0) (0 0) (0 0 0)) ((0 0 0) (0 0) (0 0 0) (0)) ((0 0) (0) (0) (0) (0)) ((0 0 0) (0 0 0) (0) (0))) (((0 0 0) (0 0 0) (0)) ((0 0) (0) (0 0)) ((0) (0) (0 0 0 0) (0)) ((0) (0) (0 0) (0 0))) (((0 0) (0 0) (0 0) (0)) ((0 0 0) (0 0 0 0) (0 0 0) (0 0)) ((0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0)) ((0 0 0) (0) (0 0 0 0) (0) (0))) (((0 0 0) (0) (0 0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0)) ((0 0) (0 0) (0 0)) ((0 0) (0 0) (0 0 0) (0 0 0 0))) (((0 0) (0 0) (0 0) (0)) ((0 0 0) (0 0) (0 0 0)) ((0) (0 0 0) (0 0) (0 0 0 0) (0)) ((0) (0 0) (0))) (((0 0 0) (0) (0) (0 0)) ((0 0) (0) (0) (0) (0 0 0)) ((0) (0) (0 0) (0 0) (0)) ((0) (0 0) (0 0 0) (0 0))) (((0 0 0 0 0) (0 0 0 0) (0) (0)) ((0 0) (0 0) (0) (0 0) (0 0 0)) ((0 0 0) (0 0) (0 0) (0 0 0)) ((0 0 0) (0 0 0 0) (0) (0 0 0))) (((0 0 0) (0 0) (0 0 0) (0 0) (0 0 0)) ((0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0)) ((0 0 0) (0 0) (0) (0 0 0) (0 0)) ((0) (0 0 0 0) (0 0) (0 0))) (((0 0) (0) (0 0) (0 0) (0 0 0) (0 0)) ((0 0) (0 0 0) (0) (0) (0)) ((0 0) (0) (0 0) (0 0 0) (0)) ((0 0) (0) (0) (0) (0 0 0 0) (0 0) (0))) (((0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0)) ((0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0)) ((0 0 0 0) (0) (0) (0 0)) ((0 0 0 0) (0) (0) (0 0) (0 0))) (((0 0) (0 0 0) (0) (0 0) (0 0)) ((0) (0 0 0) (0 0 0 0 0) (0 0) (0)) ((0 0) (0 0 0) (0) (0)) ((0) (0 0 0) (0) (0))) (((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0)) ((0) (0 0) (0) (0) (0 0 0) (0 0)) ((0 0) (0 0) (0) (0 0)) ((0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0))) (((0 0) (0) (0 0) (0) (0 0) (0)) ((0) (0) (0 0)) ((0 0) (0 0 0) (0)) ((0) (0 0 0) (0 0 0) (0))) (((0) (0 0 0) (0) (0) (0)) ((0 0) (0) (0) (0) (0 0 0)) ((0 0 0) (0 0) (0 0 0) (0 0 0)) ((0 0 0) (0) (0 0 0))) (((0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0)) ((0) (0) (0 0 0) (0 0 0)) ((0 0 0) (0 0 0 0) (0) (0) (0 0 0 0 0)) ((0) (0 0) (0 0) (0) (0))) (((0) (0 0) (0 0) (0 0 0) (0)) ((0 0 0) (0) (0 0) (0 0)) ((0) (0 0 0) (0) (0 0)) ((0 0) (0) (0 0 0 0) (0 0) (0 0))) (((0 0) (0 0 0 0) (0) (0)) ((0 0 0 0) (0 0) (0) (0 0 0)) ((0 0) (0) (0) (0 0 0) (0 0)) ((0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0))) (((0 0 0 0) (0 0) (0) (0 0 0 0) (0)) ((0 0 0) (0 0 0) (0 0) (0 0 0)) ((0 0 0) (0 0 0) (0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0) (0 0 0))) (((0) (0) (0 0) (0 0) (0) (0 0)) ((0) (0 0) (0)) ((0 0 0) (0) (0 0 0 0) (0 0)) ((0 0) (0) (0 0 0) (0))) (((0 0) (0 0 0 0 0) (0 0 0 0 0) (0)) ((0) (0 0) (0) (0 0 0 0) (0 0) (0 0 0)) ((0 0 0) (0) (0) (0) (0 0 0 0)) ((0) (0 0) (0) (0 0) (0 0 0 0))) (((0 0) (0) (0) (0)) ((0 0) (0) (0 0) (0) (0 0 0) (0)) ((0) (0 0) (0 0 0 0 0) (0) (0)) ((0 0 0 0) (0 0) (0 0 0) (0) (0 0))) (((0 0 0) (0 0 0) (0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0 0 0) (0 0) (0 0)) ((0 0) (0 0) (0 0 0) (0 0)) ((0) (0 0) (0 0 0) (0 0) (0))) (((0) (0) (0) (0 0)) ((0 0) (0) (0 0 0) (0) (0)) ((0 0) (0) (0 0) (0)) ((0) (0 0 0) (0) (0 0))) (((0) (0 0 0 0) (0 0 0 0)) ((0 0 0 0) (0 0 0) (0) (0 0 0) (0) (0)) ((0) (0 0 0 0 0) (0 0) (0 0 0) (0 0)) ((0 0) (0 0) (0) (0 0) (0 0))) (((0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0)) ((0 0) (0 0) (0 0) (0 0 0)) ((0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0)) ((0) (0))) (((0) (0) (0 0 0 0 0 0) (0 0)) ((0 0) (0 0 0 0 0) (0) (0 0 0) (0 0)) ((0) (0) (0 0 0 0 0 0) (0 0) (0 0 0)) ((0 0 0 0) (0) (0) (0 0))) (((0 0 0) (0 0 0) (0 0) (0) (0) (0 0)) ((0) (0 0) (0 0) (0 0) (0)) ((0 0 0 0 0) (0) (0)) ((0 0 0) (0) (0 0 0) (0 0 0 0) (0))) (((0) (0 0) (0 0) (0) (0 0 0)) ((0) (0 0) (0 0 0) (0) (0 0)) ((0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0)) ((0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0))) (((0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0) (0 0)) ((0 0 0 0) (0) (0) (0)) ((0) (0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0 0)) ((0 0) (0 0 0) (0) (0) (0 0))) (((0 0) (0 0 0) (0) (0 0 0)) ((0 0) (0) (0) (0 0) (0 0) (0)) ((0) (0 0 0) (0) (0 0 0 0 0) (0)) ((0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0))) (((0) (0 0 0 0 0) (0) (0) (0 0 0 0)) ((0) (0) (0 0) (0 0 0 0)) ((0) (0) (0 0 0 0) (0 0)) ((0 0 0 0) (0 0) (0 0 0) (0 0 0 0))) (((0) (0) (0 0 0) (0)) ((0 0 0 0) (0) (0) (0 0) (0 0 0 0)) ((0) (0 0) (0) (0) (0 0 0)) ((0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0) (0 0) (0))) (((0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0)) ((0 0 0 0) (0 0) (0 0 0) (0) (0) (0)) ((0) (0 0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0)) ((0) (0 0 0) (0 0 0 0) (0 0))) (((0 0) (0 0 0) (0 0) (0 0) (0 0 0 0)) ((0 0 0) (0) (0 0) (0 0 0) (0 0)) ((0 0) (0) (0 0) (0 0 0) (0 0)) ((0 0 0 0) (0) (0 0 0) (0) (0) (0) (0))) (((0 0) (0) (0) (0 0 0 0) (0) (0 0)) ((0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0)) ((0) (0) (0) (0) (0 0)) ((0 0 0) (0 0 0) (0) (0 0 0) (0 0))) (((0) (0) (0 0 0) (0) (0 0) (0)) ((0) (0 0) (0) (0 0) (0 0) (0 0)) ((0 0) (0) (0) (0) (0) (0 0 0)) ((0 0 0) (0 0) (0 0 0) (0 0) (0 0 0))) (((0 0 0) (0 0) (0) (0 0 0) (0) (0 0)) ((0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0 0)) ((0 0) (0 0) (0) (0) (0)) ((0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0))) (((0) (0 0) (0) (0 0) (0 0 0 0)) ((0 0 0 0) (0) (0 0 0 0) (0 0) (0 0) (0 0)) ((0 0) (0 0 0 0) (0 0) (0) (0 0)) ((0 0 0) (0) (0 0) (0 0 0 0))) (((0 0 0 0) (0) (0 0) (0 0 0) (0)) ((0) (0) (0 0 0 0 0) (0 0 0 0)) ((0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0) (0) (0))) (((0 0) (0) (0 0 0) (0) (0 0) (0)) ((0) (0 0 0) (0 0 0) (0) (0) (0 0)) ((0 0) (0 0 0) (0 0) (0) (0) (0 0 0)) ((0 0 0) (0) (0 0 0 0))) (((0 0) (0) (0) (0) (0 0) (0 0)) ((0 0 0 0) (0 0 0) (0 0 0 0)) ((0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0) (0 0)) ((0 0) (0 0 0) (0) (0 0 0 0 0) (0 0 0))) (((0 0) (0 0) (0 0 0 0) (0) (0) (0 0 0 0)) ((0) (0 0 0) (0 0 0) (0)) ((0 0) (0) (0 0 0) (0 0) (0)) ((0 0 0) (0 0) (0 0 0) (0 0) (0) (0))) (((0) (0 0) (0) (0 0 0) (0)) ((0) (0 0) (0 0 0 0) (0)) ((0 0) (0) (0 0) (0 0) (0)) ((0) (0) (0) (0 0 0 0) (0 0))) (((0) (0 0) (0 0) (0 0) (0 0)) ((0 0 0) (0 0) (0 0) (0 0 0) (0) (0 0)) ((0 0) (0) (0) (0)) ((0) (0) (0 0) (0 0) (0 0 0 0) (0 0))) (((0 0) (0 0) (0) (0 0) (0) (0)) ((0 0 0) (0 0 0) (0) (0 0 0) (0)) ((0 0 0) (0 0 0) (0) (0 0)) ((0) (0 0 0) (0) (0 0) (0))) (((0) (0 0 0) (0 0) (0) (0 0)) ((0) (0 0) (0 0 0) (0 0) (0 0 0 0 0)) ((0 0 0 0 0) (0) (0 0 0) (0) (0)) ((0 0) (0 0 0 0) (0) (0 0 0 0))) (((0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0)) ((0) (0 0) (0 0) (0 0 0) (0)) ((0) (0 0) (0 0) (0) (0) (0 0 0)) ((0) (0 0) (0) (0 0) (0 0))) (((0 0) (0 0) (0) (0)) ((0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0)) ((0 0 0) (0) (0 0 0 0) (0 0 0) (0)) ((0) (0 0) (0 0) (0 0) (0 0) (0 0))) (((0 0) (0 0) (0) (0 0) (0)) ((0) (0) (0) (0 0 0) (0 0)) ((0 0) (0) (0) (0 0 0) (0 0) (0)) ((0) (0 0) (0 0 0) (0 0) (0 0 0))) (((0) (0 0) (0 0 0) (0) (0)) ((0) (0 0) (0 0) (0)) ((0 0 0) (0) (0 0) (0 0) (0)) ((0) (0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0))) (((0 0 0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0)) ((0 0) (0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0 0)) ((0 0) (0) (0) (0) (0) (0 0 0)) ((0 0 0) (0) (0) (0 0 0))) (((0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0) (0 0)) ((0) (0) (0) (0 0) (0)) ((0) (0) (0 0) (0 0 0 0) (0) (0 0 0))) (((0) (0) (0 0) (0) (0) (0 0)) ((0 0 0) (0) (0 0 0) (0 0)) ((0) (0 0) (0 0 0) (0) (0)) ((0) (0) (0 0 0) (0) (0 0 0 0))) (((0 0 0 0) (0) (0 0) (0 0 0) (0 0 0)) ((0 0 0) (0) (0 0) (0 0 0 0 0 0 0)) ((0 0 0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0)) ((0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0))) (((0 0 0) (0) (0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0) (0 0)) ((0) (0) (0) (0 0)) ((0 0) (0 0) (0 0 0) (0 0) (0 0 0 0))) (((0 0) (0 0) (0 0 0 0)) ((0 0 0 0) (0) (0) (0 0 0) (0 0)) ((0 0) (0 0) (0 0) (0 0 0) (0)) ((0 0) (0 0) (0))) (((0) (0 0) (0 0 0) (0 0) (0 0)) ((0 0) (0) (0)) ((0 0 0) (0 0 0) (0) (0 0)) ((0 0 0) (0) (0) (0 0 0))) (((0 0) (0 0 0) (0) (0 0) (0 0) (0)) ((0 0) (0 0 0 0) (0 0) (0 0)) ((0 0) (0 0 0) (0) (0) (0 0)) ((0 0 0) (0 0 0) (0 0 0 0) (0))) (((0) (0 0) (0 0 0) (0)) ((0 0) (0) (0 0 0) (0 0) (0) (0)) ((0) (0) (0 0 0 0) (0) (0 0)) ((0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0 0))) (((0 0) (0) (0 0 0) (0 0) (0 0 0)) ((0 0) (0 0 0) (0 0 0 0) (0 0)) ((0 0 0 0) (0 0) (0) (0) (0 0 0 0)) ((0 0 0 0) (0) (0 0) (0 0 0 0))) (((0) (0) (0) (0 0) (0 0) (0)) ((0 0 0) (0 0 0) (0) (0)) ((0) (0 0 0) (0 0) (0) (0 0)) ((0 0) (0) (0 0 0))) (((0 0 0) (0 0 0) (0 0) (0 0) (0 0 0)) ((0) (0) (0 0 0 0) (0)) ((0 0) (0) (0 0 0 0) (0 0)) ((0 0 0) (0) (0 0 0) (0 0 0) (0 0) (0))) (((0) (0 0 0) (0) (0 0) (0 0)) ((0 0) (0) (0 0) (0 0)) ((0 0) (0) (0 0) (0 0 0) (0)) ((0) (0 0 0 0) (0) (0 0) (0 0))) (((0) (0 0 0) (0 0 0) (0 0 0) (0 0)) ((0 0) (0) (0 0 0) (0 0) (0 0) (0)) ((0) (0 0) (0 0)) ((0 0) (0 0 0) (0 0 0)))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :interval) 0 0 (om-make-point 0 25) (om-make-point 1440 847) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 20 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-TEMPOMAP" (quote get-tempomap) (quote ((om-load-inputfun (quote input-funbox) "a musical object or MIDI sequence" "SELF" nil))) (om-make-point 460 258) (om-make-point 90 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 33 120) (om-make-point 938 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4700) (4000) (6400 5900 5200) (7600) (4700 4000) (5700 4700) (6900) (3800) (4700 3900 5400) (4000 5500) (6000) (6000) (4700 4000) (5400) (6600) (5400 4700 4000 3600) (6400) (5200) (5200) (4700 4000) (5700) (5700) (6700 4700 5400) (4000) (5500) (6000) (6000) (4700 4000) (5400) (5400) (6600) (4700 4000) (6900) (5200) (6900) (3900 5400 4700) (4000) (4000) (5200 4700) (6900) (5900 5200) (4700 6900 5500) (5400 4700 4500) (4700 4000) (4700 4000) (4700) (5200) (6900 4000) (5200) (6900 6600 5500) (5400 4700 3800) (7100 4000) (4000 4700) (4000 6900) (6900 6600 5200) (5400 4700 3800) (4000) (4700) (4000) (4700 6400 5900 4700) (4700) (6400) (4700) (6600 4000) (5900) (6700 6400 5900) (4700) (5900 4000) (6400) (6700 5900) (6100 4700 3700) (6600 4000) (6400 5900) (3900 6600) (6700 6400 5900 5500) (4700) (4000) (6400) (6700 6400 6000 5900) (4700 4000) (6600) (5700) (6400 6000 5700) (6400 5200 4700) (4000) (6400) (6700 6000 5900) (6100 5200 4700 4000) (6600 4000) (6600 6400 6000 5700) (6700 6400 6000 5700) (4700 4500) (6400 4000) (7100 6000 5900) (5900) (5200 4700) (4000 6400) (7800 6600 5900) (4700 4000) (6200) (6900 6600 5900) (5200 6700) (5400 4600 3900) (5700 5300 4700 4000) (6000) (6000) (5300) (4000 4700) (6000) (6200) (4700 3800) (6400 4000) (6000 5700) (6600) (6700) (4700 4000) (6900 4000) (5700) (7100 5200) (8300 5200) (6600 5700 4100 6900) (5200) (6000 5700 5400 5100 4500) (6300 4700 3500) (4500) (4700 4000 6400) (5500) (5900 5200) (5500) (5200) (4700) (5700 4500 4000) (5400) (5700) (4000) (5200 4700) (4000) (4700) (5900 5200) (5500) (4700 4000) (4000) (5400) (3800 5400) (4000) (5500 4700 4000) (5500) (4700 4000) (5500) (4700) (4600) (5400 4000) (5400 3800) (5100) (5400 4700 4000) (4700) (5900 5200) (4700) (5200) (4000 4700) (5400 4000) (5400) (4000) (5900 5200) (6400 4700) (4000) (6400 5900) (3900) (4700) (6700) (6300 6600 5900 4000) (3900 6700 6400 5900) (4700) (4000) (6400) (6700 5900) (3900) (6100 4700 4500) (6600 4000) (6400 5900) (6600) (6700 6400 5900) (4700 3900) (4000) (6400) (5900) (6700 6400 6000 5900) (5200 4700) (4700 4000) (6400 5700) (6600 6400 6000 5700) (5200 4700) (4000) (7100) (6400 5900) (6400) (3900) (6100 4700) (6600 4000) (5700 7800) (6400 6000 5700) (4500 3900) (6400 4700 4000) (7100 6700 6000) (7100) (6900 5200 4700) (6400 4000) (6600) (5900) (6400 5200 4700) (6200 4000) (6900 6600 5900) (6700) (5700) (6000 5700 5300 4700 4000) (6000) (6000 5300) (4700) (4000) (6000) (6200 5900) (3900) (5200 4700) (6400 4000) (5700) (6600) (6700) (6900 5400 4700) (4700 4000) (8300 5700) (7100) (5900 5200) (6900 5400 5200) (5200 5700 4100) (5700 5400 5100 4500 3600) (4700) (3500) (4500) (8300 6800 4700 7500 5600) (4000) (6300 7100) (7500 5900 5600) (7100 5600 5400 5100) (4700 3900 4400) (7500 6600 5700 4500 4000) (4700 7500) (6800) (7600 4700 4000) (5600 4700) (6300) (5600) (4700 4400 3900) (7500 6600 5700 4000) (7100) (7500) (4000) (7500 5600 4700) (6600 6300) (6600 4000) (5900 5600) (6300) (4700 3900) (6600 5700 4000) (7500) (7800 7500 4700 4000) (7500 5600 4700 4000) (7300 6300 4700) (5900 5600) (7400 5600) (4700 3900) (5700 4000) (4000) (4700 4000) (7300) (7500) (6800 5900 5600) (4700) (8300 8500 4700 4400 4000) (4700 5700) (8300 4700 6800) (4000 5600) (8000) (7500 4700 6800 6300 5900) (5600) (4700 4400) (6600 5700 4000) (7500 7300 4700 4000) (4700) (7500 5600 5200 4700) (7500) (5900 5600) (7500) (7500 4700 3900) (6900 4000) (5700) (4700 4000) (7300 4700) (7100 5400 4700) (6800 5600) (6300 5900) (5600 4700) (4700 4400 3900) (5700 4700 3900) (4700 4000) (4700 6400 5600) (8300) (5900) (7800 7100 6400 5600 4700) (8300) (3700 4700) (4000) (5700 5400 7100) (6300) (7100) (6100) (4000 7100) (6300 4700 4000) (5600 5200) (5900 7100 6400) (4700) (7100 4000) (6800) (8300) (6600) (7100) (6400 5200 4700) (7100 5900 5600) (5600) (8300) (6800 4700 4000) (6300 5700 4000) (4000) (4700 4000) (5900) (7100 5600) (5900) (4700) (7100 5700 4700 4000) (4700) (4000) (6400 4700) (5600 5200) (5200 4000) (6600 4700) (4000) (6400 5700 5400) (6400 6100 5700 5400) (6400 4700 5200) (5900 4000) (6400 5600 5200) (5200 8300) (6400 5600) (6100 4700) (4000 6600) (6400 5700 5400) (6600) (6400 5700 5400 4000) (4700) (4000) (6400 6100 5700) (8300) (7100 5700) (5200 4700) (4000 6700) (7800 6900 6600) (6900 6400) (4000 4700) (6400 5700) (6800 5700) (6100 4700) (6600 4000) (6400 6900 6200) (6900 6400 6200 5900) (4700 4000) (6400 4000) (7100 6700) (6000) (6900 5200 4700) (6400 4000) (7100 6600 6300) (6600) (6400 5200 4700) (6200 4000) (6900 6600 6200 5900) (5200) (5200 6700) (5400) (5700 4700 4100) (4000) (4600) (4000 4700) (6000) (6200) (4700) (6400 4700 4000) (5700) (6600) (6700 4700) (6900 4700) (4000) (7000 5700) (8300 7100 5200) (6400 3800) (7200 6000 5700 5200 4100) (6000 5100 3500 3900) (4700) (4500) (4000 4500) (4700 4000) (5900) (5200 5500) (6700 6400 5900) (4700 4500) (6600 4000) (6700 6400 5900) (6700 6300 4700) (6400 5200 4700 4000) (5900) (6700 6400 6200) (6700 5900) (6400 4700 4000) (6600 4000) (6400 5900 5200) (6700 6300 5900 3900) (6400 4700 4000) (4000) (7100 6700 5900) (6700 5900) (4700) (6700 6600 4000) (6600 5700) (6400) (6700 5700 6400 6000) (4700 5200) (5900 4000) (6400) (6100 4700) (6400 4000) (7100 5700 6700) (6600 6700) (3900 6400) (6700 6000 5700) (6400) (4700) (4000) (7100 6000) (5900) (4700 6900) (6400 4700 4500) (4000) (7100 6600) (5900) (7800) (6400) (6700 6200 5200 4700) (4000 6100) (6500) (6900 6700 5900 7000) (6800) (7200 5200) (7500) (3900 8000 5200) (5700 4700 4100) (7200 7400) (6400 6500) (6000 6200) (5900 3900) (5300 4700 5900 5200) (4000) (5900) (6000 4700) (7600 6200 4000 3500) (5700) (6600) (6700 4700) (5200 4700) (6900 4700 4000) (6400) (5700 5200) (8300 5200) (3900) (5700 5200 4100) (5700 6000 5400 5100 4700) (3500 4700) (4500) (5200 5400) (4000 5500 6900) (4700) (5400) (4000) (6600 5900 5200) (4700) (4000) (5700 4700 4000) (4000) (6300 6200 4700) (5900 5200) (5900 6000 4700) (6000 5900) (5200) (5900 5500) (5900) (4700) (6400 5900 5700) (4700 5400) (5900 5400) (4000) (4700 4000) (6400 5500) (6900 5900 5200 4700 6700) (7400 7300) (7900 5200) (8500 3900 8300 8100 4700) (5400 4000) (4700) (5400 4000) (4700) (5200 4700) (7400) (7300) (5200 4700) (4700 3900) (5400 6100 4000) (4000) (7300) (6900 5200 4700) (6900 6600 4000) (5500) (4700) (7100 5400 4000) (5200) (4000) (6400) (4700 4000) (6000) (5900) (6000) (5900 6900 5200) (5900 6000) (6000 4700 4000) (5900 5400 4000) (4000) (6900 5200 4700) (5900) (7100 6900 5200 4700) (4700 4000) (7100 5700 4000) (8300 5400 4700) (5200) (4000) (4700) (5200 4700 4500) (5900 5500 5200) (6900 6200 5500 5200) (4700) (4700) (7100 5700 5400 4600 4000) (4700) (4000 5400) (4700 4000) (5500) (7100) (5200) (7100 4000) (5200 4700) (5700 5400 4000) (5700) (6400 6100 4700) (5400) (4700 4500) (5400 4000) (7600) (6600 6200 5900) (7600) (4700 3800) (4000) (7100 6700 6400 5900) (6900 6000) (4700 3900) (4700 6900 5400 4000) (7100) (7100 6900 6600 5900) (4700 3800) (4000) (7100 6700 5200) (6900 4700) (4000) (7600) (6900 6600 6200) (7600 4700) (4700 3800) (4000) (7100 5200) (5500 5200) (7600 7200 6900 5700) (4700 4500) (4000) (7100 6700 6400 6000) (5200) (6000 5700 3800) (4700 4500 3800) (6900 4000) (7100 6400 6000) (7400 7100 6700) (4700) (6200 4000) (6700 5900) (6200 5900 5500) (5500 3900) (5700 4700 4100) (4000) (6000) (6000 5700) (4700 4000) (5200) (5700 5300) (4100) (6200 5900) (5200) (4000 4700 4500) (6600) (3900 6700 6400 6000) (4700 3900) (6900 4000) (7100) (6900 6600 6200) (5400) (5200 4100) (6000 5700 5400 4500 3500) (4700) (5300 4500) (5900) (6400 5200 4700 4000) (6400 5900) (6600 4700 4000) (4000) (5900) (3900) (6400 3900 4700 4000) (4700) (5900 4000) (6400) (4000 4700) (6100 4700 3900 4500) (6600 4000) (6400) (6600) (4700) (4000 6400) (4700) (4700 4000) (6400) (6400 6000 5900) (5500) (4700 4500) (7800 6600 6700 6600 4000) (5700) (5900) (6400 6000 5700 4700) (4700 4500) (5900 4700 4000) (6400) (5900 4700) (6100 3700 4700) (7800 4700 4000) (5700) (6400 7100) (4700 4000) (6400 6000 4000) (5200 4700 4500 4800) (5900 3900) (7100 4000) (4700 8300) (6900 4700 4000) (6400 5900) (6600) (4700 4000) (6400 5200 4700) (6200 4000) (6900) (4700) (6700) (5700 3900) (4700 4100) (4000) (4000 5400 4700) (5900) (6000) (6200 4000) (4700) (6400 4000) (5700) (6600) (6700 4700 4000) (4700) (6900 4000) (5700) (7100 4700 8300 5200) (5700 5200 4100 6900) (5400 5100 3600 4500) (5700 4700 3500) (4500) (4700 4000 7100) (7100) (5500) (7100) (7100 6900 5900 5500 5200) (7100 4500) (4500 4700 4000) (7100 4000) (4700 5400) (5400) (6400 6700) (4000 4700) (6700) (7100 6900 6400 5200) (6400 6700) (6700 5500 5200 4700) (7100 4700 4000 7800 6600 5700 4000) (7600 7400) (8100 4000) (8500 4700) (8600 5200 4500) (8500 4700) (6600 6900 5900 5200) (5500) (4700 4500 4000) (7100 5400 4000) (4700) (5400) (4000) (8100) (7600 4000 7900 5500 5200 4700) (6900 5200) (4700 4000) (8300 7100 5400 4700 4000) (5400) (4700 4500 4000) (5200 4700) (5500) (7100) (7600 6900 6600 5900 5500 5200) (4500 5400) (4500 7600 4700) (4700 7100 5700 4000) (5400) (4000) (7900 7100) (7600 4700 4000) (5900 5500 5200) (6900 5200) (4500) (5200) (4700 3800) (4500) (7100 4000) (5400 4700) (4700 4000) (7100) (4500 4000 7600 5200 4700) (7900) (8100) (6900 5900 5200) (5500) (4700 4500 3900) (5400 4700 7100 4000) (4000) (5500 4700) (8300 4000) (4700) (6900 5900 5200) (5500) (4600 4500) (7100 5400 4000) (5400) (4700 4000) (8300 5200 4700 5400) (5200 8600 8500 5500 4700) (8300) (6900 6400 5900) (5500 4700) (4000 4600) (7900 7100 5400 4500 4000) (8600 8300 4700) (8300 4700 4000) (8600) (8300 5200 4700 4500) (4700 8600 5500 4000) (8500 8300) (6900 5900 5200) (7900) (7600 4700) (7100 5400 4000 7800) (7400) (7300) (4500) (7600 4000) (7300) (7900 6600 4700 4000) (6600 5200 6900 5900) (6400 4700) (6600 4700) (6100 4600 3900) (4000) (6400) (6000 4700) (4700 4000 5900) (5400) (5200 4700 4500) (4700 5500) (6900) (5200) (4600 4500) (5400 4000) (6400) (7400 6900 6700) (4700) (8300 8100 7800 5500 4000) (8500) (5200 6900 5900) (5400 4500 4000) (4000 4700) (5400 7100 4600 4000) (4700 8300) (4700 4000) (8100) (4000 7900 6900 5500 4600) (4700) (7600) (6900 5900 5500 5200) (4700) (5500) (4500 4600) (8300 7100 5400 4000) (4700) (4000) (5500 6900 4600 4500) (8300 4700) (5500 5200 6900 5900) (8300 4600) (8300 3800 4600) (4700 8600 7100 4000) (4700) (4000) (6900 4700 4000) (4700) (7900 5500 6900 5200) (4700) (7600) (4500 4000) (7100 5400 4000 4600) (4000) (6900 4700) (7800) (5400) (6900 5900 5200) (7600 5500 4700) (7400 7100) (4600 3800 7800 4600) (5400 7600 7100 4000) (5400) (4700 4000) (5500) (6900 5200 4600) (7400 4700) (7800 7600 4700 5400) (7400 4000) (7400 6900 5900) (7800 5500 4600) (8100 4700 8300 4000) (7400 7600) (7100 5400 4000) (7400) (7800) (4000) (7600) (6900 5200 4700 7400) (7800) (8300 4700) (6900 5900 8500) (7600 5500 5200) (7400 7100) (7400) (3800 7600 4700) (7100 4700 4000 4500) (7600 5400) (7300 4700 7400) (8500 4000) (4700 4500) (6400 5500 5400 5200) (6900 6200 5900) (6400) (4000 4600) (7100 4000 4700) (5400 4700) (4000) (4600 4000) (6700 4700 6400) (8300 5400) (7100 5900 5200 5500) (5200) (4000 4700 4500) (7600) (4700) (5400) (4000) (4700 6700) (6400) (4700) (6700 5500 5400 3900) (6400) (6900 5200) (6700 5500 4700) (6400) (7100 6700 4600 4500) (4000) (6700 4700 6400) (6400) (4000) (6700) (4700) (5500 4700) (5200 7900 5900) (4700 5500 8500) (4500) (5400 4600 3900) (4700 4000) (5400) (8300) (4000 5200 4700) (8300) (5500 5400) (5900) (5500 5200) (4700) (4600 4000) (4500 4700) (4000 4700) (4700) (4000) (4600) (8300) (8600 6900 5400) (4700 4000) (4600 5900 5200) (8300 5500) (8600 5400 4700) (7100 4000) (4700) (4700 4000 5400) (7900) (7600 4700) (7600 5400 4700 6900) (5900 5200) (5500 4600 7600) (7600 6400 5400 4600 4500 3800) (4700 4700) (7100 4000) (4700) (4000) (4700) (4600) (7600 5500 6900 4700) (5500) (7600 5900 5200) (5400 4600 3800) (4000) (7100 4700) (6400) (5400 4000) (6700 5200 4700 4500) (5500) (4700 6900 6400 4700) (5500 5200) (5200 4000) (6200 5500) (5400 4600 4500 4000) (7100 4000) (4000) (6400 5200) (6700 5200 4700) (6900) (5500 5200) (4700 5900 5500 5200) (4600) (4500 4700) (7400 5400 4000) (4700) (4000) (5900 5500 7100 5200 4700) (5500 5200 5400 4700) (5500 4700 6600 5900 5200) (4000 4600 4500) (4700 4000) (5400 4700) (4600 6400) (6900 4000) (6900 5200 4700) (6900 5500) (4700) (6900) (4700 3800) (3800) (4700 7400 4000) (4600) (7300 4000) (7600) (5900 5200 4600) (5500 5400 4700) (5200) (5500) (5500 5200) (4600 4000) (4700 4500 4000) (6600 6700) (4000) (7300) (6900 5200 4600) (7900) (8500 5400 4000 4700) (6900 5200) (5500) (8300) (4600) (7100 4000) (8000 4700) (6900 5200 4700 7800) (6900 4700 5200) (4700 7300 6900 5200) (7900 5500) (4600 8300 5500 4500) (4000) (8000 4700 4000) (4700) (4700 4000) (5200 4700) (5400 5200 4700) (7100) (4700 7400 7300 6900 5200) (8300 5500 8100) (4600 3900) (4700 4500) (8000 4700 7100 4000) (4000) (7800) (5200 7400 6900 4700) (5500) (5200 5500 4600) (6900 5500 5200) (4700) (4600 4000) (4500) (7600 4700 4000) (7400 4700) (4000) (4000 7400 4500) (8300 4700) (5500 5200 5400) (6900 5200) (7100) (4600) (4000) (6900 4700) (5700) (4700 4500 4000) (6700) (6400 4500) (5900 5500 4700 4000) (5500) (6900 5200) (4700) (4600 4500) (4700 4000) (4000) (4700) (6400) (6900 4000 6700 5500) (6900 5500) (4600) (5200 4000) (4700 4000) (4700 4000) (7900 6700) (4000 6400 4500) (4700 5200) (5500 4000) (6900 5500 5200) (5500) (3900 4600) (4700 4000) (6700) (7300) (4000) (7900) (8300) (4700 4000) (4700 5400) (8300 6900 5500 5200) (7900 4700) (7800 4600) (4600) (4000 4700) (7600) (5400) (4700 7400 4000) (6900 4700 7300) (5400) (6900 5200 5500) (6200) (5200 6100 5500) (4600 3900 4600) (5200) (7100 4000) (4700) (4000 7800 4700) (7600) (7800 4700) (5400) (6900 6700 5200) (5500 6600) (4600) (7300 4000) (4700) (4000 5400) (4700 4500 7300) (6200 6100) (4700 4000 6900 5500 5200) (4700) (8300 4500 4000) (4700) (4000) (6900 8100) (4000 5500 5200 4700) (8200) (5200 4700 7900 6900) (7800) (7900 4700 4500) (4000 7600 4700) (4700) (5400) (6900) (6900 4700) (4700 5400) (6700 6900 5200) (6600) (4600) (3900 4600) (4700 4000) (5400) (4000) (6700 4600 6400) (4700) (4000 4700) (6500) (6900 5200) (7900 7700) (3800 4600) (4700 4000) (7800) (4000) (5900 6900 6700) (4700) (7600 5500 5400 4600 4000) (8300 6900 5200) (7900) (6600 4000 4700 4500) (6600 5400 4000) (4700) (6500 4000) (4700 4500) (8000 6900) (6300 6800) (6300 4700) (4700 4000) (4700) (6600 4000) (6300) (4700) (4000) (4700 8500 5400) (6900 5200) (4700) (6400) (7300 4700 3900) (4700 4000) (4700) (4000) (5200 4700) (7900 5400 4700) (6900 5200) (6700 4700 4000) (6600) (4600 4500) (4700 4000 4500) (4700) (4000) (6400) (4000 4500) (5500 4700) (5400) (8300 6900 5900) (5200) (4600 4500) (4500 4000) (4700) (4000) (4700 4500 4000) (7700 4600 8300 5500 5400) (8000 7900 6900 5200 4700) (7900) (7900 4600 4000) (4000 4700) (7600) (7800 6900 5200 4700) (6600 5500) (5400 5200 4100) (6900 6400 5900 5500 5200) (6500) (4600 5900 4500 4000) (4700 4000) (4000 5200) (5200) (4700) (4000) (4500) (6900 6700 6400) (4700) (5500) (6900 5900 5200) (8100 4500) (7400 4600 3600) (5500 3900) (4700 4000) (5500 4000) (5200 4600) (8300 5500) (5400 4700 4000) (6900 5200) (5500 4700) (5500) (4600) (4700) (7100 4000) (4000) (7600) (4700) (8300 4700) (6900 5900 5500 5200) (7100) (7100 4700 4500) (4000) (7600) (5200 4700) (4000) (8300) (5200 4500) (4700 3900 5500) (5400) (6900 5200 4000) (8100 4700) (4600) (8100 4000) (4000 8300 4700) (4700) (4000) (4500) (5500 5200 4700) (7600) (8300 4700 6900 5200) (5500) (4700 4000) (4700 4000 7100) (6900 4600 8100) (8100) (5200 4600) (5500 5000 4000 8300 5000 4700 3900) (6900 5900 5200) (5500) (4700) (7100 4700 4000) (4000) (4700) (7600 5500 5400 4700) (7600 5500 6900 5200) (4700) (5200 7600 4600 3900) (4500 4000 4800) (5200) (5400) (4700 4000) (7600 4700) (5000 4000 4000) (5500 4700) (5200 6900) (4700) (4600) (4000) (4700 4000) (5200 4700) (5500 5400 3800) (8300 4700) (6900 5900 5500 5200) (4700 8300) (4600 4000) (7100 4700 4600 4000) (4000) (6900) (6700 5200 4700) (6400 4700) (6900 5200) (5500 4700) (4600 3900) (6600 4700 4000) (4000) (6400 6200) (5900 4700) (4700) (6900 5200) (5500 5900 4700) (4000 4700) (6200 4000) (6600 6400) (5400) (4700) (4700 4500 4000) (6900 5900 5200) (5500) (4700 4000) (6600 5700 4000) (4700) (4000) (4700 4500 4000) (5400 4700) (6900 5500 5200) (6600) (6600 4700) (4700 4000) (4700) (4000 5400) (5900 5500 4500 6400) (5200 4700) (5900 5400) (6900 5200 4000) (4700) (4100) (4600 3900) (7100 5400 4000) (5400 4700 4000) (7600 6600 4700 6700) (4000) (4700) (7100 5200) (6700 6400 5900) (4700) (6600 4000) (6400) (5500 4700 3900) (6400 4700) (4000) (6400) (4700) (5900) (6600 3900 6100 4700) (5900) (6400 5900) (7800 6600) (4700 3900) (6700 6300 5900 4000) (4700 3900) (4000) (6400 5500) (4700 4000) (6400) (5500 5200 4700) (6600 4000) (6600 5700 6700) (6600 7900) (6600 7900 6700) (6600 6000 4700 6700) (7800 6700) (6400 5900 5200 4700) (7100 4000) (6400) (7600) (6400 6000 4700 4000) (6100 4600 3900 5200) (4000) (6400 5700) (6400 6000 4700 4000) (5700) (4700) (4000) (7100 6400) (8300 4700) (4700) (6400 4700 4000) (7100 6600 5900) (5900) (4700) (6400 5200 4700) (6200 4000) (5900) (6900 5900) (4700) (7900 6700 5200) (5100 3800 5700) (5400 4700 4100) (7100 7200) (6000 6400) (7100 4700 4000) (6000) (6200) (7600 4000 5900 4700) (6600) (7900 6700) (4500) (6900 4700 4000 4600) (8300 6900) (5900 5700 5200) (4700) (5700 5200 4100) (4700 5400 3600) (3500 5100) (4500) (7500) (4000 5600 4700) (5600) (6800 5900) (8000 5600) (4700) (4000 5900) (4500 4000) (7800 4700) (8000) (7800 4000) (7500 8300 4700) (4700) (7300 7100 5900 5600) (4700) (5700 4000) (7500 4700) (7800) (7500 4700 8300) (7800 7300 4700) (5400 7500 5900) (7100 5600) (8300) (7500 4700 3900) (4000 4500) (7100 5700) (4700) (4500 4000) (5600 4700) (3900 6800 6300) (6300 5900 5600) (8500) (4700) (4500) (4700 6900 4000) (4000) (4700 4000) (7100 5900 7800) (8000))) :lonset (quote (626 741 962 1426 1776 2063 2488 2683 2787 2956 3138 3571 3890 4203 4651 4965 5276 5426 5723 6073 6346 6809 7097 7221 7331 7449 7918 8252 8547 8846 9038 9342 9707 9985 10105 10470 10694 11196 11558 11832 12184 12294 12675 12902 13375 13734 13913 14023 14348 14469 14837 15092 15900 16175 16630 16989 17228 17389 17692 18099 18667 18769 19026 19201 19420 19845 20116 20228 20484 20942 21190 21360 21560 21711 22070 22297 22445 22682 23137 23409 23520 23788 24277 24547 24665 24928 25329 25681 25807 26074 26550 26789 26898 27189 27647 27870 27979 28262 28925 29110 29441 29880 30225 30349 30464 31173 31355 31532 31860 32175 32383 32536 32766 32890 33226 33477 33587 33809 33943 34175 34509 34671 34856 34989 35296 35487 35654 36019 36150 36363 36472 36703 36822 37059 37173 37521 37679 37999 38129 38232 38612 38831 38946 39165 39306 39603 39888 40056 40194 40585 40709 40816 41262 41528 41636 41847 42245 42368 42595 42746 42963 43326 43430 43664 43805 44433 44558 44690 44806 44984 45103 45817 46062 46170 46412 46871 47006 47115 47297 47513 47649 47955 48196 48318 48598 48839 49078 49340 49460 49730 50229 50492 50605 50771 50876 51353 51481 51610 51729 51967 52481 52639 52818 53146 53580 53837 53950 54190 54667 54908 55032 55357 55748 55924 56071 56674 56902 57182 57300 57546 57914 58035 58158 58261 58482 58595 58954 59214 59335 59536 59764 59932 60288 60429 60765 60947 61092 61507 61770 61929 62197 62442 62711 62867 63133 63461 63829 63935 64522 64623 64849 64987 65203 65317 65424 65672 65992 66147 66302 66495 66709 66827 66940 67044 67336 67706 68153 68308 68665 68804 69050 69512 69893 70129 70239 70496 70672 70964 71248 71978 72123 72396 72666 73006 73131 73388 73826 74078 74239 74531 74801 74958 75255 75497 75608 75964 76203 76318 76675 76879 77029 77397 77633 78104 78433 78676 78792 78999 79139 79399 79508 79671 79868 80021 80218 80365 80575 80760 81151 81644 81866 81973 82076 82321 82430 82675 82948 83288 83401 83761 84023 84481 84857 85061 85479 85580 85964 86140 86369 86683 87069 87372 87797 88128 88306 88514 88978 89194 89368 89631 89995 90170 90354 90468 90733 90846 91209 91479 91598 91860 91977 92298 92559 92729 92877 93396 93643 94033 94491 94733 94915 95148 95579 95847 95992 96251 96385 96919 97039 97309 97504 98002 98119 98485 98745 98886 99106 99232 99968 100228 100406 100782 101162 101456 101571 101798 101920 102318 102617 102739 102914 103442 103685 103821 104030 104149 104580 104786 104959 105230 105509 105722 105929 106099 106339 106757 107019 107130 107364 107806 108065 108213 108394 108760 109109 109227 109467 109914 110158 110299 110463 110714 110952 111115 111270 111573 112267 112377 112502 112688 112839 113048 113164 113289 113406 113699 113961 114277 114384 114502 114692 114954 115154 115258 115402 115526 115694 115808 116031 116222 116405 116519 116693 116867 117162 117302 117440 117638 117851 118306 118680 118791 119050 119194 119540 119778 119895 120114 120246 120493 120763 120988 121245 121382 121723 121833 121934 122035 122337 122457 122597 123038 123152 123317 123765 124008 124127 124265 124521 124691 124810 125018 125169 125402 125513 125716 125849 126213 126556 126710 126994 127137 127253 127513 127671 127940 128177 128305 128655 128769 128886 129352 129610 130045 130280 130410 131017 131124 131474 131745 131962 132186 132424 132540 132720 132944 133061 133169 133392 133623 133851 134296 134650 134924 135269 135726 135974 136096 136336 136439 136679 136791 137024 137388 137550 137852 138067 138239 138427 138878 139020 139233 139473 139600 139844 139970 140310 140556 140662 140916 141032 141301 141635 141753 141993 142161 142438 142827 143097 143215 143586 143871 144215 144346 144952 145318 145431 145677 146050 146154 146391 146530 146795 147117 147229 147443 147564 147932 148173 148282 148490 148680 149034 149395 149634 149746 150098 150473 150714 150851 151294 151569 151816 151941 152142 152284 152506 152659 152884 152998 153348 153704 153939 154057 154382 154772 154897 155050 155286 155567 155816 156033 156148 156920 157124 157232 157453 157655 157814 158135 158240 158477 158825 159075 159305 159510 159625 159850 159960 160189 160292 160571 161009 161135 161246 161403 161550 161705 162063 162308 162428 162658 163023 163317 163501 163648 163766 164082 164200 164386 164559 164821 165094 165476 165608 165849 166173 166542 166650 166996 167200 167387 167536 167662 168376 168695 168871 169050 169377 169620 169742 169923 170051 170416 170615 170769 170957 171274 171644 171911 172072 172467 172710 172946 173123 173224 173358 173702 173846 174063 174168 174416 174655 174840 175202 175360 175545 175762 176008 176387 176556 176720 176896 177039 177455 177641 177916 178161 178311 178494 178611 178835 178942 179503 179975 180215 180525 180645 180975 181145 181320 181564 181817 182008 182231 182371 182687 182817 183024 183259 183593 183828 183931 184049 184153 184268 184374 184711 184866 184979 185196 185346 185605 185838 186059 186300 186721 186965 187085 187408 187641 187743 188086 188310 188635 188746 189011 189288 189438 189659 189773 190121 190320 190445 190765 190999 191106 191239 191446 191678 192039 192169 192281 192496 192621 192728 192830 192991 193163 193666 193848 194092 194212 194412 194531 194639 194763 195107 195212 195379 195802 196126 196271 196476 196975 197097 197239 197353 197526 197810 198144 198273 198497 198649 198967 199180 199284 199391 199533 199843 199960 200184 200362 200554 200798 200959 201298 201634 201866 202055 202303 202538 202756 202981 203326 203636 203870 204044 204186 204331 204451 204949 205296 205473 205599 205843 205986 206167 206286 206442 206848 206963 207172 207296 207485 207586 207762 207865 207979 208206 208384 208541 208664 208853 209001 209143 209257 209569 209673 209777 209945 210124 210249 210369 210500 210707 210850 211034 211363 211695 211875 212272 212389 212523 212730 213048 213391 213539 213718 213843 214292 214407 214633 214747 214969 215077 215293 215418 215553 215690 215869 215985 216093 216317 216432 216567 216671 216993 217099 217200 217431 217764 217933 218110 218334 218451 218686 219021 219356 219478 219696 219814 219929 220033 220140 220382 220500 220699 220835 221169 221504 221630 221765 221886 222081 222403 222564 222744 222929 223076 223396 223591 223761 224068 224183 224534 224636 224765 224869 225106 225350 225535 225788 225995 226106 226543 226685 226787 227109 227212 227537 227652 227783 227929 228093 228212 228558 228778 229218 229431 229566 229707 229870 230111 230436 230551 230804 230941 231229 231538 231858 232104 232549 232760 232874 233435 233618 233884 234192 234300 234451 234571 234718 234830 235155 235263 235384 235606 235948 236176 236306 236537 236653 236872 237168 237401 237581 237698 237829 237934 238321 238481 238608 238729 238875 239063 239615 240055 240239 240401 240622 240759 240924 241052 241367 241696 241999 242104 242223 242375 242624 242766 242900 243319 243537 243661 243831 243969 244198 244330 244556 244733 244860 245009 245330 245668 245850 245979 246229 246566 246685 246877 247007 247230 247338 247559 247684 247872 248008 248225 248344 248563 248798 249321 249620 249725 249953 250203 250548 250667 250883 251333 251548 251651 251815 252004 252225 252353 252682 252877 253013 253229 253335 253445 253582 253726 254047 254391 254699 254881 255044 255160 255371 255586 255693 255907 256242 256470 256652 256769 256899 257069 257186 257335 257622 257859 258028 258300 258545 258655 259020 259214 259329 259531 259781 260088 260229 260588 260846 261033 261367 261489 261673 261814 262206 262610 262726 262831 263060 263290 263468 263718 264077 264297 264419 264541 264761 264973 265174 265429 265641 265849 265986 266154 266279 266418 266590 266731 266972 267165 267387 267646 267825 268018 268130 268403 268678 269029 269130 269402 270005 270247 270432 270610 270853 271112 271307 271448 271552 271889 272262 272407 272564 272895 273093 273215 273570 273865 274188 274401 274529 274753 274871 275019 275207 275510 275735 275858 276047 276168 276377 276511 276850 277063 277225 277462 277740 277966 278149 278380 278611 278724 279158 279586 279730 279913 280132 280333 280463 280588 280707 280924 281129 281238 281599 281730 281929 282040 282156 282469 282584 282696 282835 283284 283603 283740 283951 284177 284293 284506 284618 284743 284850 285271 285504 285626 285952 286219 286526 286696 286857 286979 287191 287299 287443 287588 287818 287951 288186 288388 288511 288617 288766 288945 289265 289574 289813 289923 290101 290352 290500 290734 291474 291592 291701 291808 292141 292246 292567 292801 293236 293571 293893 294142 294290 294562 294714 294908 295126 295233 295566 295710 295879 296027 296219 296411 296602 296729 297471 297788 297900 298001 298123 298434 298667 299081 299296 299412 299642 299958 300061 300391 300641 301112 301285 301416 301616 302000 302113 302463 302690 302825 303054 303299 303524 304132 304240 304606 304820 304966 305295 305707 305981 306253 306360 306731 306941 307094 307320 307680 307960 308118 308360 308472 308708 308830 309036 309503 309759 309911 310129 310467 310599 310828 310940 311174 311589 311893 312005 312281 312605 312726 312979 313197 313347 313457 313693 313800 314051 314173 314441 314782 314922 315122 315246 315368 315553 315711 315854 316009 316194 316313 316550 316915 317018 317177 317371 317577 317971 318113 318306 318415 318674 319010 319338 319445 319692 319919 320125 320364 320506 320700 320844 321055 321199 321306 321501 322159 322404 322614 322914 323259 323510 323936 324270 324386 324525 324834 324972 325251 325641 325849 325992 326304 326525 326655 327078 327190 327338 327524 327648 327858 327972 328190 328343 328459 328626 329166 329643 329854 329958 330140 330277 330603 330829 331179 331524 331666 331770 331978 332203 332308 332653 332804 333223 333531 333646 333786 333900 334331 334659 335140 335401 335852)) :ldur (quote ((845) (709) (830 488 1108) (345) (287 1054) (767 577) (363) (147) (349 224 105) (850 859) (433) (369) (802 1075) (762) (334) (334 398 800 104) (806) (297) (254) (1083 1148) (463) (347) (304 610 124) (786) (588) (469) (375) (1090 774) (299) (381) (369) (1128 1088) (398) (536) (416) (160 280 785) (502) (1706) (295 503) (462) (477 662) (291 482 460) (264 227 286) (473 473) (359 648) (476) (182) (446 808) (621) (455 478 455) (339 843 248) (336 472) (309 781) (681 455) (394 438 257) (787 400 239) (464) (342) (1158) (470 203 521 98) (359) (194) (577) (701 654) (425) (355 262 383) (1074) (271 734) (804) (346 346) (216 899 192) (351 681) (222 510) (331 402) (303 231 208 280) (481) (621) (216) (290 315 338 267) (1138 918) (1052) (489) (270 295 318) (381 148 882) (715) (818) (344 296 344) (211 186 788 126) (360 685) (421 179 251 476) (322 348 251 276) (715 176) (326 722) (523 476 151) (250) (210 439) (892 330) (734 751 185) (1424 1424) (363) (824 562 824) (290 326) (173 126 173) (806 761 940 1252) (709) (182) (135) (715 358) (344) (410) (451 180) (411 941) (271 383) (418) (465) (1194 110) (216 732) (376) (618 232) (286 496) (742 253 324 248) (172) (451 563 215 781 235) (533 373 468) (161) (532 934 462) (496) (489 344) (380) (481) (260) (305 209 470) (270) (213) (506) (294 478) (933) (613) (373 304) (618) (214 219) (475) (219) (175 208) (297) (285 453 453) (306) (529 531) (563) (221) (218) (446 498) (374 319) (222) (114 211 1170) (521) (441 350) (378) (235) (157 226) (363 467) (238) (415) (135 181) (250 1001) (670) (251 203) (168) (563) (186) (229 766 714 694) (203 301 278 233) (784) (698) (801) (364 434) (138) (214 513 190) (352 611) (209 442) (376) (330 235 884) (757 89) (660) (211) (239) (312 409 336 239) (442 120) (716 740) (499 499) (293 341 293 293) (276 474) (801) (415) (477 701) (347) (146) (260 862) (815 1089) (491 600) (337 348 277) (238 167) (366 742 742) (434 507 484) (306) (189 305 790) (307 700) (779) (211) (220 220 828) (322 1039) (288 490 423) (234) (237) (513 558 831 1111 1229) (228) (152 130) (720) (646) (423) (412 234) (202) (168 1056) (446 804) (741) (448) (405) (230 164 167) (292 810) (852 390) (651) (213 356) (565 127 216) (282 336 390) (830 327 1008 223 290) (670) (592) (333) (1322 405 472 249 672) (848) (312 578) (591 357 333) (226 406 138 202) (232 209 179) (328 477 703 161 802) (376 172) (167) (631 587 1268) (327 465) (626) (423) (216 125 216) (221 456 478 469) (160) (568) (382) (185 503 557) (171 162) (393 508) (211 211) (145) (113 100) (418 464 396) (292) (441 92 370 370) (586 602 447 1130) (235 212 651) (457 357) (219 431) (695 221) (472 462) (381) (414 700) (226) (211) (670 337 337) (292) (989 178 353 107 1254) (352 564) (458 713 688) (928 453) (322) (1154 371 528 741 385) (329) (252 181) (444 538 438) (325 171 252 1459) (161) (292 298 158 696) (218) (436 414) (297) (1072 215 215) (784 467) (279) (239 1055) (217 115) (447 170 711) (964 354) (1519 484) (380 368) (236 127 236) (465 471 443) (179 1143) (510 308 566) (463) (201) (202 270 409 844 400) (451) (91 421) (948) (882 698 350) (205) (344) (244) (119 212) (255 369 1061) (415 991) (329 392 162) (733) (279 790) (242) (325) (149) (518) (192 214 1086) (480 386 340) (493) (427) (139 825 262) (202 539 458) (376) (497 1283) (519) (235 841) (304) (176) (496 471 229 543) (314) (461) (658 512) (790 518) (344 509) (351 874) (696) (225 464 464) (276 359 359 289) (377 464 168) (303 730) (585 539 462) (382 221) (236 424) (217 754) (663 378) (166 476 476) (262) (412 651 366 389) (747) (651) (157 458 438) (202) (229 276) (199 710) (510 354) (600 519 577) (359 290) (650 716) (814 458) (356 241) (231 697) (190 538) (368 431 431) (433 200 293 688) (724 145) (275 602) (297 668) (326) (211 188 491) (325 628) (405 195 522) (585) (228 205 818) (366 794) (666 428 358 405) (238) (239 242) (235) (708 804 875) (260) (144) (772 788) (436) (491) (115) (443 395 830) (843) (481) (445 299) (337 865) (767) (592 907) (279 327 379) (131 108) (1036 252 1200 233 233) (503 901 668 95) (544) (206) (99 166) (970 733) (492) (116 183) (337 223 199) (828 175) (277 502) (418 149 172) (202 268 262) (345 185 695 585) (676) (442 329 418) (175 154) (329 381 148) (255 454) (363 461 363) (257 169 213 375) (381 737 118) (463) (290 447 447) (476 220) (600) (168 164 504) (561 540) (238) (290 290 273 318) (450 244) (224 492) (804) (165 725) (189 504) (186 488 186) (201 360) (428 325) (373 283 327) (189) (469) (533) (668 352) (113) (104 271) (302 685 140) (498) (465 647) (499) (163) (195) (191 145 238 730) (614 209) (187) (307 256 411 122) (127) (250 297) (173) (268 191 113) (496 1034 450) (158 162) (161 163) (206 160) (145 136) (170 721 668 191) (645) (858) (207 860) (442 142 697 119) (762) (410) (435 238) (150 117) (474 658 728) (417) (742 247) (454 200) (184) (350 121 235) (536 629 270 730 137) (385 389) (151) (122 103) (441 467 201) (428) (126) (695) (578 394 486) (279) (165) (727 691 448) (1417) (126 173 257) (217 564) (177 316 552) (168 289) (309) (208 190) (73) (399) (553 314 461) (433 203) (194 559) (364) (581 1091) (221 358) (189 395 343 459 204) (195 127) (237 305) (1186 192 212 142 418) (427 427) (300) (285 1446) (128) (269 581) (197) (1511) (570 466) (245 245) (289 363 435) (468) (233) (607 504 1064) (626 226 414) (590) (452) (158 561 441) (108) (354) (354) (1083 734) (341) (296) (331) (230 365 695) (135 231) (77 737 228) (222 556 445) (1073) (619 619 391) (212) (319 544 264 457) (370 248) (375 375 465) (441 323 583) (106) (397) (112) (233 759 206) (480 135 364) (530 346 690 277) (302) (387) (401 379 360 80 457) (413) (354 156) (600 350) (486) (367) (371) (462 370) (194 499) (340 692 653) (267) (489 420 360) (370) (745 224) (156 629) (452) (455 431 335) (456) (768 216) (625) (323 830 830 251) (388 344) (171 98) (604 656 149 633) (367) (379 486 388 533) (791 189) (685) (390 390 246) (732 548) (767) (477) (503 432 432) (399 237) (795 162) (749) (368 86) (93 115) (330 354 424 261) (699 186) (718) (443 675 837 350) (109) (487 650 208) (781 202 163) (345 669) (361 315 246) (350 325 703) (482) (370 763) (434 375) (301 429 291) (93 95) (965 1090 1154) (647) (247) (234 468) (429 863) (182) (452 201) (230) (350 372) (125) (725 941 169) (408) (159 300 344 322) (869 132) (395 795) (359) (370 348 258) (133) (181 224) (476 808 189 254 675) (305) (168 145) (239) (211 167 613 976) (176 132) (845 690 108) (582) (202) (232) (239 172 321 426) (690) (270 683) (735) (382 336) (187 689 118 250) (320 317) (203) (409) (339) (281 237) (103) (159 622) (438) (302 326 256) (293) (817 135) (676 700 236 78 588) (513) (476) (235 282 282 245) (120 155) (225 59 1073) (801) (242 294) (220 173 184) (314 581 581) (547) (362 215) (348 118) (162 375 115) (215 287 145 142) (558 582) (368 296) (359 471) (228 697 697) (329 236) (760) (369 477) (205 182 658) (324 622) (297) (462) (178) (840 119) (1033 1051) (136) (619 130 623) (269) (381) (434 365) (796) (428 428) (719) (433) (316 199 353) (387) (166 981) (340) (204 318 408 455) (343 251 251 152) (256 878 165 160) (759 482 482) (203) (585 1068 236) (278) (235) (231) (247 538 375 770 492) (361 241) (163 399 217) (344 847) (595 248) (176) (121 124) (1098 922) (343) (186 421 271 402) (172 274) (194 345 181 346) (324 612 448 191 191 703 100) (163 161) (272 1015) (319 319) (211 304 211) (811 649) (323 579 440 579) (554) (395 187 245) (358 333 450) (631) (209) (425) (191) (268 939 177 1261 561 1033) (492 746) (240 240) (801 541 310 430 430) (370) (330 181 1126) (242 750) (419) (312) (444 483 483 345 299 322) (208 185) (161 1016 321) (459 586 579 456) (625) (337) (228 179) (202 712 1012) (430 430 334) (491 338) (325) (455) (325 197) (163) (396 443) (220 337) (268 354) (214) (200 984 170 626 193) (208) (1669) (583 352 237) (418) (327 312 243) (215 579 371 421) (364) (778 443) (2015 988) (411) (501 385 316) (630) (171 403) (433 325 436) (376) (354 389) (338 263 188 310) (854 216 147 485 485) (1007) (490 512 351) (536 191) (149 142) (173 425 562 127 445) (224 320 320) (341 341 474) (240) (340 572 178 219) (576 253 1173 868) (143 661) (526 429 548) (211) (197 127) (334 334 450 155) (241) (370) (241) (133 333) (140) (177 573 685 776) (356 689 643 482) (276 244) (102 263) (398 328 213) (436) (172) (180 209) (364 390 475) (202) (637 190 214) (563 564) (565) (335) (143 261) (516 877) (174) (228 622 163) (710) (216 311 151 976 791) (1016) (356 401 448) (137 114 185) (168 175) (583 424 116 470) (260 602) (424 378) (282) (912 342 559 559 107) (569) (258) (531 391 341 786) (274) (422) (209 151) (668 445 421 405) (315) (408) (576 568 161 253) (421 350) (541 428 551 482) (317 248) (203 113 204) (129 174 467 443) (363) (345) (334 310 763) (408) (296 636 650 332) (294) (220) (97 200) (396 601 418 181) (434) (338 690) (576) (127) (413 413 736) (155 547 247) (184 275) (268 129 247 72) (315 184 558 521) (314) (107 364) (460) (569 313 125) (277 153) (135 206 324 163) (103 444) (214 498 403) (187 596 218) (163 826 298 335) (184 215) (412 578 460) (195) (124) (755) (189) (492 289 323 146) (165) (177 296) (434 269 145) (344 652 189) (125 405) (191) (143 338 160) (453 401 505 105) (229 299) (802 216 156) (698 768) (252 252) (164 223 177 782) (580 439 487) (368) (161 134) (394 432 207) (258 419) (343) (105 1075) (143 537 165) (1626 148) (1426 340 350 231) (198) (611 340 313) (364) (621) (329) (637) (185 455) (204) (540) (408 345 81 139) (169) (192 309) (354 386 316) (115) (154 252 163 302) (532) (227 459 322) (252) (1311) (138) (333) (414 436) (304 152 455) (164 139 1306) (263) (310 217 194) (472 472) (417) (340) (274 288 428) (490) (219 68) (584) (385 292) (360) (107 355) (234 199) (432 136) (330) (391) (80) (210) (799 724 167) (279 858) (286 385 269) (226 156) (850 512 365) (370 429) (244) (149 772 200) (272) (254 254) (338 192 285 760) (361 568) (345 289 351) (977 263 356 102 310 148) (164 69) (379 341) (481) (1579) (161) (114) (343 133 346 484) (161) (250 349 511) (441 142 188) (527) (243 451) (266) (440 440) (277 392 246 139) (138) (309 677 284 91) (212 164) (504 465) (270 339) (293 85 316 220) (371 440) (416) (179 135) (206 304 367) (1165) (154 241) (340 165 693 715) (139) (208 138) (803 689 425) (597) (378) (497 322 1064 368 320) (287 198 95 335) (432 316 405 405 381) (158 169 309) (114 858) (242 452) (236 173) (266 934) (308 550 416) (259 526) (271) (433) (342 147) (190) (375 529 433) (133) (192 765) (191) (255 570 207) (129 57 924) (361) (231) (425 234) (190 219) (545 234 283) (206 416) (630) (169) (360 219 266) (158) (356 121 844 501) (346 253) (115) (222) (146) (459 938) (614 643) (425 349 425 176) (108 169 184) (376 187 527 437) (183 221) (180 190 417 144) (165) (704 128 443) (315) (329 419) (303 303) (127 224 291) (135) (266 220 130 379 492) (324 483 159) (203 203) (142 176) (632 358 405 419) (397) (202) (299 1025 331 285) (138) (183 229 276) (372 697 464) (310) (154 304) (232) (222 149 470) (659 841) (381) (952 299 206) (325 1157) (625 169 151) (503 295) (258) (139) (461) (622 331) (285) (245 346 534) (207) (243 198) (627 136 472 490) (354) (526 343) (201) (280 257) (777 523) (428) (691) (235) (268 326 240 250) (1124 479) (251) (547 216) (193 450) (182 390) (197 520) (281 556 257) (394 185) (221 436) (356 128 519) (531) (116 155) (452 458) (175) (148) (391) (197) (215) (384 1271) (589 187) (356 703 499 726) (264 461) (326 163) (95) (462 180) (306) (315) (209 181 366) (566 473 632) (182) (484 251 299) (186) (255 485 115) (176 200 87) (232) (370 486) (287) (719 406 166) (254) (363 710) (137) (562 193 471) (324 383) (155) (567 402) (315) (264 183) (485 112 164) (73 208) (270 528 470 447 494) (231) (589 258 521) (355) (403) (640 161) (1160 732 354 601) (378) (460 452 520 574) (148) (173 105 126) (1236 138 229) (403) (219) (250) (579 427) (325 113) (165 384 314) (403) (220) (280 154) (456 456) (444) (654) (263 126 163) (137) (648 591) (211) (530 530) (111 98) (142 137) (915 434) (128) (407) (248 386 207) (442) (195 783 129 106 651) (138 365 410) (139) (202 202 228 205) (474 497 452) (373) (173 341) (707 229) (196 287) (204 114) (159 178) (243 502) (279) (265 440) (192) (536) (619) (423 373 253) (612 689) (488) (277) (150 198 174) (122 477) (650) (412) (304 323) (162 167 341) (304 374) (210 564 564) (209) (160 148) (114 417 82) (840) (404) (156) (326 218) (679 471) (141) (303 557 418) (284) (176 213) (184 399) (345) (278) (409 151 871) (143 143 161 895 110) (221 231 502 759 575) (231) (180 133 180) (865 558) (124) (725 546 327 725) (463 159) (141 219 280) (507 295 331 553 248) (189) (71 316 222 125) (144 215) (435 217) (209) (476) (771) (243) (330 205 207) (388) (159) (540 446 564) (205 157) (1346 184 208) (261 143) (550 449) (362 409) (327 207) (260 190) (120 342 664) (556 508) (151 450) (416) (162) (555) (379 421) (1586) (193) (326) (652 328) (407 316 731 200) (260) (324 139 276) (442) (244) (397 238) (428) (1082) (343 298) (548 137 386) (277) (475 499 431) (183 378) (265) (227 204) (444 283 179) (355) (1235) (206) (241 288 332) (268) (1377 453 548 296) (480) (194 292) (569 454 443) (603 163 118) (185) (440 192) (342 151 897 1693 96 433 131) (355 193 355) (507) (234) (349 536 435) (1316) (322) (290 343 123 397) (326 549 526 294) (286) (264 706 199 223) (216 435 93) (153) (302) (333 477) (204 313) (215 799 93) (185 340) (512 665) (294) (281) (127) (454 901) (315 429) (213 108 177) (223 294) (498 274 498 387) (217 1298) (233 233) (325 745 102 414) (1256) (662) (305 236 230) (281 419) (425 799) (462 322) (155 155) (662 567 471) (1429) (138 210) (697 200) (497) (394 834) (416 501 350) (149 175) (168 486) (670 131) (318) (225) (681 264 852) (564 220 318) (234) (360 214) (807 562 475) (196) (412) (274 165 970) (160 356) (522 522 740) (371) (480 210) (153 463) (310) (677 231) (366 400 279 135) (400 240) (227 130) (511 702 463) (280) (163) (136 184) (384 467 467) (107 346 408) (329 140 280 182) (620) (699) (228 158) (308 213 213) (761) (321 649) (204) (307 304 260) (388 712) (624) (750) (374) (233) (389 625 242 714) (150) (182 182) (429 405) (358 122) (323 371 228 373) (731 96) (609) (182 396) (340 464) (274) (97 145 383) (195 691) (167 568 343) (183 158) (163 130 143) (126 295 240 155) (152 143) (356 436 126 364) (293 705) (555) (426) (260 230 206 353) (218 194 114 164) (346) (470 536) (227 365 335 444) (253) (704) (592) (675 771) (430 328) (107) (337 680 588) (478 706 227) (365) (239) (216 193 691) (255 644) (144) (239 192) (446) (203 249 318) (245 245 919) (176 1113 861) (386 158) (197 186) (248 316 590) (403) (399) (410 1023 376 876) (359) (413 436) (115) (222 639 684 66) (732 417) (526 669 669) (427) (284 263 217) (479 166 166) (400 755) (200) (200) (991 423 511) (260) (483 218) (114 335) (448) (142 134) (234 485) (371 487) (212) (148 1311) (200 188 167) (377) (255 331 353 510) (315) (477 1479) (147 418) (191) (181 227 212) (206 182 455) (159 183 709) (359 337) (199) (148 172 196) (457 229) (160 322) (214) (293 410) (274 623) (115 379 419) (215 191 284) (1068) (340) (372) (449 721 431) (328) (1193 427) (405 567 178) (150))) :lvel (quote ((91) (73) (63 41 53) (48) (75 87) (71 64) (58) (35) (78 97 83) (68 58) (81) (57) (62 85) (62) (48) (56 79 74 70) (71) (39) (43) (65 85) (72) (65) (49 66 95) (71) (46) (77) (52) (52 80) (58) (40) (47) (70 67) (52) (44) (58) (39 41 68) (101) (80) (45 66) (66) (42 34) (51 56 48) (43 73 64) (73 105) (62 90) (81) (66) (61 74) (41) (64 53 49) (43 64 60) (66 97) (89 66) (72 58) (54 48 44) (44 77 56) (105) (53) (93) (71 83 65 68) (53) (77) (86) (109 74) (67) (51 88 63) (80) (82 73) (109) (50 55) (68 85 63) (98 67) (81 57) (51 101) (49 83 56 41) (91) (80) (94) (55 58 53 68) (81 78) (101) (71) (50 62 62) (79 60 93) (78) (104) (49 57 68) (62 49 76 74) (89 74) (95 75 56 63) (46 84 52 52) (80 87) (80 73) (75 65 48) (52) (58 93) (77 92) (66 62 84) (78 87) (71) (65 55 54) (47 85) (60 54 69) (72 82 77 101) (89) (68) (67) (91 93) (108) (108) (76 76) (115 84) (58 58) (106) (106) (72 89) (105 82) (75) (66 63) (51 57) (84 64 84 82) (69) (59 62 60 77 76) (31 69 61) (62) (98 88 78) (58) (64 73) (52) (73) (83) (63 84 105) (61) (72) (107) (69 105) (95) (77) (70 71) (68) (79 78) (112) (88) (89 77) (97) (75 94 107) (69) (86 88) (63) (75) (73) (73 105) (60 81) (75) (90 90 94) (84) (54 67) (73) (70) (73 81) (77 111) (73) (101) (77 71) (90 94) (89) (75 79) (65) (93) (106) (55 110 50 73) (50 48 100 64) (101) (83) (105) (52 58) (38) (67 80 72) (98 73) (80 60) (104) (47 89 61) (80 87) (80) (94) (73) (55 66 58 80) (59 93) (92 79) (84 71) (85 52 54 59) (84 81) (85) (57) (56 79) (88) (51) (61 81) (84 79) (65 65) (83 50 52) (77 57) (80 80 69) (85 55 61) (68) (86 56 87) (95 80) (88) (58) (97 65 88) (74 79) (86 55 69) (105) (79) (83 70 78 70 98) (54) (70 76) (96) (84) (100) (104 51) (42) (66 86) (104 80) (57) (115) (114) (110 73 107) (76 82) (64 77) (69) (51 48) (67 57 71) (70 63 91) (58 68 69 82 89) (73) (58) (62) (65 56 89 87 60) (71) (47 95) (50 61 71) (67 57 72 54) (85 60 62) (82 59 68 77 102) (83 98) (107) (75 104 108) (77 90) (53) (63) (80 69 55) (99 60 73 99) (96) (110) (103) (72 63 93) (74 62) (85 79) (81 65) (79) (98 93) (59 81 107) (94) (105 80 72 101) (98 59 98 87) (86 61 62) (87 75) (69 71) (90 66) (77 109) (108) (98 105) (100) (99) (82 103 62) (95) (82 78 92 73 100) (84 77) (84 97 82) (74 57) (99) (100 65 55 63 70) (65) (79 69) (66 72 101) (88 84 67 88) (113) (100 57 69 78) (82) (74 76) (73) (102 83 67) (55 101) (68) (82 92) (80 89) (91 84 86) (82 65) (100 76) (59 66) (87 64 77) (74 85 89) (75 95) (74 86 78) (91) (85) (61 73 53 64 82) (61) (48 73) (86) (67 59 86) (88) (71) (65) (73 75) (81 78 88) (59 73) (51 78 83) (94) (77 95) (95) (77) (87) (90) (76 68 82) (71 61 79) (50) (65) (78 88 74) (83 77 102) (106) (80 98) (83) (74 63) (71) (93) (114 81 83 98) (89) (98) (107 90) (66 85) (79 81) (102 91) (74) (80 64 62) (48 43 55 56) (100 79 50) (80 77) (111 66 61) (61 69) (74 54) (73 79) (75 99) (77 60 55) (83) (77 55 53 60) (87) (76) (84 52 72) (67) (79 70) (58 92) (76 90) (74 61 75) (57 90) (73 93) (96 66) (55 67) (74 82) (66 70) (92 64 60) (57 75 48 48) (81 80) (85 69) (73 59) (51) (78 56 77) (86 75) (59 94 56) (83) (87 64 78) (78 82) (81 54 56 55) (55) (59 87) (66) (72 73 125) (90) (70) (83 96) (104) (107) (88) (107 86 78) (56) (104) (108 77) (76 85) (78) (109 59) (50 54 48) (71 62) (86 64 63 81 73) (61 74 76 69) (78) (64) (85 38) (77 88) (65) (57 56) (42 42 50) (83 75) (77 73) (53 75 51) (50 49 66) (90 52 74 70) (68) (52 102 47) (54 53) (103 78 86) (96 80) (87 51 50) (36 48 52 57) (88 78 73) (70) (70 55 60) (58 69) (89) (98 84 76) (107 65) (45) (43 58 75 53) (83 43) (62 68) (104) (64 80) (67 75) (85 84 87) (70 82) (41 76) (49 56 54) (75) (77) (81) (99 65) (33) (37 77) (91 80 93) (77) (57 91) (42) (67) (75) (77 68 60 78) (78 76) (78) (63 85 63 84) (76) (83 68) (87) (97 97 80) (83 84 112) (81 92) (108 110) (87 86) (102 75) (73 80 94 68) (79) (75) (78 74) (74 81 89 68) (57) (94) (94 57) (57 91) (72 72 74) (46) (63 71) (56 65) (54) (73 86 94) (71 61 76 78 85) (54 73) (60) (46 61) (92 64 80) (94) (111) (78) (65 62 77) (98) (81) (85 89 116) (98) (90 70 82) (82 68) (88 101 71) (94 68) (74) (80 62) (82) (94) (57 70 64) (68 84) (57 59) (107) (84 97) (91 68) (83 73 71 74 96) (80 98) (102 82) (106 75 78 104 85) (89 108) (65) (69 99) (93) (79 95) (109) (115) (66 82) (74 74) (70 58 109) (105) (96) (77 84 87) (74 67 91) (77) (85) (85 68 107) (67) (106) (77) (85 97) (95) (80) (67) (85 69 67) (92 66) (66 77 83) (83 67 107) (102) (63 56 83) (87) (76 61 72 75) (86 88) (79 62 93) (55 64 74) (75) (89) (104) (80 77 87) (68 60 55) (61 49 52 65) (61) (92) (76 62 72 67 106) (60) (110 79) (69 107) (66) (86) (62) (82 60) (58 81) (54 59 78) (59) (51 43 49) (52) (82 91) (72 70) (71) (52 49 55) (68) (86 68) (84) (63 65 66 63) (65 73) (87 79) (78 64 79 83) (105) (90 56 52 63) (76 70) (87) (59 53 66) (66 94) (84) (62) (59 54 46) (70 56) (84 75) (93) (69 71) (61 68) (51 55 62 40) (82 66) (82) (87 60 61 75) (60) (64 60 55) (82 85 39) (53 74) (67 59 56) (60 71 61) (81) (53 78) (54 61) (44 54 50) (54 69) (65 65 97) (72) (43) (51 57) (68 76) (48) (57 65) (72) (40 51) (68) (85 79 83) (61) (37 51 45 50) (73 73) (62 78) (64) (64 58 47) (46) (69 76) (67 71 68 63 63) (74) (52 60) (83) (87 60 81 95) (66 69) (102 78 75) (93) (32) (57) (83 60 63 55) (80) (94 77) (101) (79 70) (63 76 70 74) (99 88) (87) (107) (72) (57 93) (80) (55 88) (93) (64 55 70) (51) (79 91) (82 72 78 82 83) (63) (56) (94 54 58 69) (85 86) (84 67 81) (100) (59 76) (75 85 59) (73 84 86) (60) (93 98) (69 61) (77 53 65) (47 72 87 64) (54 79) (82 81) (58 47) (82 87 88) (97 63) (96) (74 68) (96 64 98) (83 89) (83) (96) (101) (74 67) (76 115) (84) (101 78 86) (75) (107) (115 70) (87) (108 84) (56) (105) (104 65 65) (96) (84 83) (77) (62 53 65 69) (64 84 86 71) (77 77 87 74) (61 74 59) (66) (85 90 97) (105) (95) (93) (83 67 63 57 61) (98 71) (58 75 71) (98 108) (59 81) (84) (100 100) (103 92) (106) (94 72 80 56) (82 97) (92 64 67 94) (70 70 105 72 57 69 65) (72 96) (89 93) (86 73) (80 57 82) (75 68) (50 65 55 57) (51) (74 67 77) (70 63 99) (65) (72) (101) (98) (91 86 102 56 62 71) (67 61) (80 80) (64 76 67 67 105) (54) (60 62 83) (81 74) (64) (73) (90 62 52 46 57 58) (82 67) (59 100 78) (69 64 58 98) (52) (101) (73 67) (61 70 90) (60 58 67) (64 69) (62) (66) (73 64) (57) (64 97) (65 63) (77 105) (92) (88 85 92 57 66) (105) (105) (68 55 55) (62) (71 65 61) (64 68 66 100) (105) (68 76) (77 92) (81) (66 55 58) (64) (77 62) (66 69 101) (79) (59 79) (85 72 80 80) (66 78 89 60 70) (69) (68 50 65) (58 57) (74 96) (85 66 71 71 97) (91 73 77) (84 66 100) (102) (76 56 80 82) (72 82 58 79) (84 75) (63 59 59) (99) (94 84) (71 70 104 92) (90) (104) (84) (103 105) (96) (71 93 81 93) (79 61 67 53) (75 63) (73 69) (71 71 60) (99) (86) (84 71) (67 90 76) (86) (50 65 80) (61 49) (61) (69) (79 66) (67 107) (102) (72 72 98) (79) (83 77 91 59 84) (93) (58 72 66) (69 60 69) (69 95) (77 93 76 88) (61 88) (65 99) (71) (85 95 69 56 78) (62) (98) (67 58 53 51) (63) (63) (72 84) (86 79 57 86) (74) (98) (51 73 81 86) (85 67) (60 54 64 63) (92 57) (90 61 84) (80 80 73 102) (64) (107) (63 79 96) (76) (84 54 82 59) (70) (105) (68 67) (85 60 97 54) (88) (76 84) (104) (96) (71 61 70) (84 64 65) (86 84) (82 62 88 84) (73 84 94 92) (74) (57 92) (85) (77 79 86) (82 66) (86 84 76 70) (74 86) (84 76 58) (82 57 68) (91 79 80 81) (81 90) (85 64 101) (77) (95) (99) (79) (73 73 94 104) (91) (93 68) (85 61 90) (78 67 64) (99 67) (91) (63 76 98) (81 66 94 83) (82 73) (101 66 97) (75 87) (67 96) (83 58 87 58) (64 79 58) (82) (83 96) (84 100 61) (69 70) (106) (85 94) (92 72 85) (64 107) (68 56 58 57) (75) (89 77 72) (80) (71) (69) (92) (84 84) (76) (80) (77 79 90 73) (72) (75 55) (88 63 65) (80) (63 85 69 84) (99) (87 80 80) (93) (105) (86) (103) (88 85) (66 84 58) (49 56 88) (82) (50 75 69) (64 102) (77) (87) (71 67 78) (80) (73 87) (52) (55 61) (68) (60 89) (68 97) (110 58) (75) (108) (110) (97) (91 75 81) (62 75) (65 49 60) (68 72) (90 60 80) (80 101) (50) (86 91 71) (98) (82 90) (79 85 65 73) (47 50) (54 52 81) (94 32 49 79 63 56) (53 46) (75 97) (75) (97) (76) (104) (78 85 67 71) (52) (83 48 57) (55 103 66) (93) (89 76) (76) (63 85) (88 58 82 90) (64) (73 69 69 67) (71 54) (54 52) (44 56) (61 86 77 62) (94 108) (88) (68 72) (81 63 83) (107) (56 81) (64 58 58 64) (74) (66 85) (85 62 104) (54) (88) (58 60 81 63 89) (50 53 82 79) (58 55 45 46 54) (72 84 71) (75 101) (63 71) (76 91) (77 94) (78 53 71) (81 59) (61) (88) (81 70) (76) (76 78 98) (74) (68 87) (74) (62 68 98) (59 83 65) (76) (66) (53 56) (80 63) (67 76 98) (88 82) (105) (95) (78 74 90) (92) (76 79 75 77) (65 63) (49) (71) (82) (64 90) (94 72) (60 57 86 79) (70 64 103) (69 90 65 71) (77 89) (81 82 60 68) (79) (91 84 100) (80) (69 92) (61 91) (73 64 73) (89) (70 71 90 58 53) (80 56 73) (75 52) (68 85) (86 70 73 102) (87) (93) (51 86 60 87) (57) (48 76 75) (65 48 56) (63) (76 69) (71) (74 71 101) (83 69) (105) (86 76 91) (62 55) (49 52 99) (58 75) (75) (87) (104) (66 74) (62) (67 55 92) (75) (83 72) (71 62 66 61) (59) (53 51) (66) (72 68) (73 105) (102) (82) (75) (104 73 92 80) (106 54) (89) (55 78) (76 103) (69 98) (66 67) (91 84 86) (55 52) (79 76) (52 56 54) (56) (56 88) (85 107) (91) (99) (110) (94) (94) (100 99) (71 108) (55 63 60 66) (71 63) (97 64) (103) (108 81) (101) (84) (61 67 95) (66 79 106) (70) (62 65 74) (61) (52 74 63) (90 70 59) (52) (63 99) (72) (94 105 88) (100) (99 81) (109) (62 82 51) (51 93) (97) (109 105) (77) (98 54) (82 85 81) (77 78) (61 62 57 49 52) (88) (84 67 106) (67) (103) (69 73) (68 63 67 86) (76) (71 68 77 65) (95) (68 81 88) (102 77 78) (80) (87) (80) (77 101) (85 98) (87 64 63) (97) (59) (67 102) (75 108) (55) (102) (88 98 105) (54) (95 73) (84) (64 67) (106 87) (76 106) (84 112) (79) (107) (63 67 84) (81) (78 77 75 60 78) (85 76 60) (101) (74 88 77 81) (79 59 105) (86) (74 107) (90 94) (89 67) (94 82) (85 107) (92 112) (98) (88 112) (104) (105) (99) (81 95 109) (66 74) (94) (89) (96 101 76) (86 112) (95) (104) (73 105) (72 89 90) (77 72) (81 65 78) (82) (72 78) (80 105 72) (79) (104) (86) (95 97) (71 68) (96) (65 66 55) (61) (81 80) (85 112) (77) (113) (81 99 93) (67 58 68 64 88) (79 91 63 67 61) (84) (76 88 80) (105 84) (94) (55 66 71 75) (70 73) (56 64 69) (59 70 52 53 54) (68) (57 66 64 59) (68 61) (102 56) (73) (70) (89) (92) (96 95 88) (77) (60) (82 45 55) (74 77) (95 81 58) (50 48) (69 101) (63 95) (65 89) (61 55) (73 64 67) (61 54) (53 72) (62) (90) (77) (87 106) (103) (94) (97) (79 71) (58 47 57 55) (86) (87 74 75) (99) (86) (71 66) (90) (80) (57 94) (75 69 62) (89) (63 63 59) (77 58) (81) (104 75) (101 86 76) (79) (92) (89) (75 79 73) (104) (82 57 62 53) (53) (93 85) (74 98 66) (63 89 95) (66) (56 71) (85 59 71 72 70 59 65) (59 53 62) (59) (94) (62 76 106) (101) (101) (81 63 88 75) (81 55 60 54) (64) (34 89 86 57) (68 99 56) (91) (75) (73 103) (87 92) (67 87 107) (69 67) (58 61) (58) (91) (87) (84 94) (69 91) (64 90 78) (60 70) (57 61 52 58) (64 62) (88 81) (71 70 68 104) (92) (77) (86 62 87) (82 66) (63 58) (55 62) (70 68) (105 71 107) (94) (105 72) (78 88) (72) (57 55) (46 63 57) (77 76) (66 98) (75 69) (64) (57) (73 92 93) (56 53 50) (61) (82 75) (86 58 104) (67) (108) (72 84 93) (79 67) (56 50 49) (75) (80 91) (72 96) (66) (83 68) (75 54 87 82) (45 62) (75 77) (50 52 45) (61) (65) (81 71) (105 75 98) (57 67 99) (78 92 86 97) (103) (70) (59 62) (35 48 50) (87) (93 81) (93) (40 66 60) (88 95) (79) (96) (54) (63) (79 82 58 83) (25) (66 42) (63 59) (63 59) (43 43 55 69) (84 72) (89) (95 61) (66 63) (70) (57 61 70) (81 79) (87 56 83) (96 82) (92 78 75) (77 50 56 97) (65 83) (69 63 50 82) (53 74) (93) (46) (67 49 62 48) (54 94 63 45) (101) (64 54) (57 50 58 58) (46) (91) (79) (78 61) (55 61) (115) (90 81 81) (55 78 59) (36) (75) (81 51 84) (68 75) (78) (72 67) (73) (70 71 50) (53 74 60) (78 71 106) (61 73) (92 73) (61 85 85) (81) (83) (67 90 61 76) (94) (73 70) (49) (91 74 77 106) (63 61) (52 57 54) (53) (65 80 90) (81 88 89) (55 69) (66) (72) (80 75 92) (51) (60 85) (78 52) (88) (55 73) (91 101) (82 78) (104) (81 95) (76 85 62) (84) (69 74 40 62) (89) (62 80) (70 66) (73) (56 57 73) (64 65 67) (62 62 38) (42 49) (67) (59 64 51) (67 53) (57 48) (50) (43 56) (40 52) (35 31 44) (31 40 38) (43) (53) (38) (39 29 52) (54) (32 45) (24 16 23) (24))) :loffset (quote ((0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (51 51 0) (84 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (82 59 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (51 0 0) (0) (0) (0 0) (0) (0 0) (90 0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (43 0) (77 0) (0 0 0) (0 0 0) (0) (0) (0) (98 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0) (71 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0 0 0) (0) (0) (98 98 0) (0 0 0 0) (0 0) (93 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0) (0 0) (54 0) (68 0 0) (0 0) (0) (0 0 0) (65 0) (0 0 0) (0 0 0 0) (0) (0) (0) (69 0) (0) (0) (44 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (100 0) (94 94 94 0) (0) (0 0 0 0 0) (61 21 0) (0) (64 64 0) (0) (0 0) (0) (0) (0) (51 0 0) (0) (0) (0) (46 0) (0) (0) (0 0) (0) (0 0) (0) (0) (75 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (60 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (67 0 0 0) (52 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (23 0) (0 0 0) (47 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (90 90 0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (71 71 0) (46 0) (0 0) (0) (0 0) (0 0 0) (75 0 0) (0 0 0 0 0) (0) (0) (0) (67 67 67 0 0) (0) (45 0) (100 0 0) (64 64 64 0) (60 60 0) (0 0 0 0 0) (98 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0 0 0) (68 0) (84 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0) (70 23 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0) (94 0 0 0 0) (69 0) (69 69 0) (95 0) (0) (94 94 0 0 0) (0) (0 0) (0 0 0) (88 0 0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (56 0 0) (0) (0) (0 0 0 0 0) (0) (54 0) (0) (93 93 0) (0) (0) (0) (91 0) (0 0 0) (46 0) (87 0 0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (100 0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0 0) (93 0) (91 0) (0) (0 0 0) (0 0 0 0) (60 60 0) (0 0) (0 0 0) (98 0) (46 0) (0 0) (78 0) (0 0 0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0 0) (0 0) (53 0) (0 0 0) (0 0) (66 0) (0 0) (0 0) (0 0) (0 0) (63 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0) (97 0) (0) (0 0 0) (0) (0) (88 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0) (43 43 43 0) (0) (0) (74 0) (0 0) (0) (67 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (95 95 95 0) (0 0 0) (0) (0 0 0) (0 0) (0) (91 0 0) (0 0) (0) (51 51 0 0) (84 0) (89 0) (0) (0 0) (0 0) (58 58 0) (81 0) (64 0) (0 0 0) (0) (0) (0) (0 0) (0) (68 0) (65 65 0) (0) (0 0) (0) (0) (0) (0 0 0 0) (44 0) (0) (43 43 43 0) (0) (0 0) (0) (59 0 0) (0 0 0) (72 0) (93 0) (46 0) (53 0) (89 89 0 0) (0) (0) (0 0) (70 0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (93 0 0 0 0) (66 0) (0) (41 0) (82 62 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (79 0 0) (60 0) (0) (0 0) (0) (0) (0 0 0) (55 0) (0 0) (0) (0 0) (0 0) (84 84 84 84 0) (0 0) (0 0) (65 65 0 0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (97 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (71 0 0) (78 0) (0 0 0) (99 0 0) (0) (0 0 0) (0) (85 0 0 0) (0 0) (0 0 0) (66 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (97 0) (74 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0 0) (53 0 0 0) (0) (82 0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (71 0) (0) (0 0 0 0) (0) (0 0 0) (55 55 0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (83 0 0) (50 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (79 0 0) (0) (76 0 0 0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0 0) (0) (68 68 68 0) (0 0) (0 0 0) (0) (0) (0) (73 73 0 0) (0) (0 0) (0) (98 0) (86 86 86 0) (0 0) (0) (0) (0) (51 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (78 78 0 0 0) (0) (0) (0 0 0 0) (0 0) (0 0 0) (0) (99 0) (64 64 0) (0 0 0) (0) (72 0) (0 0) (0 0 0) (44 44 44 0) (0 0) (0 0) (23 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (63 0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (90 67 0 0) (85 85 85 0) (65 65 65 0) (0 0 0) (0) (68 68 0) (0) (0) (0) (97 0 0 0 0) (0 0) (97 0 0) (0 0) (77 0) (0) (95 0) (70 0) (0) (71 0 0 0) (86 0) (57 0 0 0) (100 100 100 0 0 0 0) (45 0) (0 0) (0 0) (0 0 0) (0 0) (47 0 0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (94 94 0 0 0 0) (0 0) (0 0) (85 0 0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0 0 0) (69 0) (86 0 0) (98 0 0 0) (0) (0) (89 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (86 86 0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (86 86 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (89 89 89 0) (75 0 0 0 0) (0) (0 0 0) (0 0) (50 0) (0 0 0 0 0) (99 0 0) (0 0 0) (0) (0 0 0 0) (45 0 0 0) (0 0) (0 0 0) (0) (0 0) (99 99 99 0) (0) (0) (0) (98 0) (0) (0 0 0 0) (70 70 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (85 85 0) (0) (0 0 0) (23 0) (0) (0) (0 0) (0 0) (0) (91 91 0) (0) (96 96 0 0 0) (0) (45 0 0) (0 0 0) (56 0) (78 0 0 0) (58 0) (0 0) (0) (61 0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (80 0) (52 0 0 0) (0) (0) (92 0 0 0) (0 0) (100 100 0 0) (0 0) (69 69 0) (89 0 0 0) (0) (0) (0 0 0) (0) (82 82 0 0) (0) (0) (0 0) (80 80 80 0) (0) (0 0) (0) (0) (0 0 0) (0 0 0) (43 0) (72 72 0 0) (91 0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (52 52 52 0) (0 0) (0 0 0) (54 0 0) (87 87 0 0) (96 0) (0 0 0) (0) (0) (0) (0) (93 93 93 0) (0) (0 0) (65 65 0) (80 80 0) (0 0) (0) (71 0 0) (29 29 29 0) (0 0) (80 80 0) (0 0) (0 0) (83 0 0 0) (0 0 0) (0) (66 0) (93 93 0) (0 0) (0) (0 0) (91 91 0) (0 0) (99 99 99 0) (0) (59 0 0) (0) (0) (0) (0) (75 0) (0) (0) (58 58 58 0) (0) (0 0) (63 0 0) (0) (78 78 0 0) (0) (91 91 0) (0) (0) (0) (0) (0 0) (80 0 0) (90 68 0) (0) (0 0 0) (0 0) (0) (0) (83 0 0) (0) (0 0) (0) (0 0) (0) (0 0) (82 0) (38 0) (0) (0) (0) (0) (0 0 0) (46 0) (99 0 0) (0 0) (0 0 0) (0 0) (0) (97 97 0) (0) (0 0) (84 84 84 0) (0 0) (62 62 0) (0 0 0 0 0 0) (69 0) (0 0) (0) (0) (0) (0) (74 74 0 0) (0) (99 0 0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0 0) (0) (91 0 0 0) (71 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (87 0) (100 0 0 0) (0) (91 0) (0 0 0) (0) (0) (69 46 0 0 0) (48 48 0 0) (89 89 0 0 0) (53 0 0) (0 0) (0 0) (78 0) (0 0) (0 0 0) (0 0) (0) (0) (0 0) (0) (83 0 0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (92 0) (0) (0) (0 0 0) (0) (97 97 97 0) (0 0) (0) (0) (0) (47 0) (0 0) (91 91 91 0) (76 76 0) (61 0 0 0) (0 0) (54 0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (67 0 0 0 0) (84 84 0) (0 0) (85 0) (93 93 0 0) (0) (0) (55 0 0 0) (0) (46 0 0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0) (43 0 0) (24 0) (81 81 0) (0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0) (0 0) (45 0) (0) (0) (0) (78 78 0 0) (96 0) (0) (0 0) (0 0) (0 0) (0 0) (72 0 0) (69 0) (0 0) (0 0 0) (0) (86 0) (0 0) (0) (0) (0) (0) (0) (0 0) (63 0) (0 0 0 0) (0 0) (0 0) (0) (71 0) (0) (0) (95 50 0) (90 90 0) (0) (93 93 0) (0) (45 0 0) (87 87 0) (0) (0 0) (0) (50 0 0) (0) (0 0) (0) (0 0 0) (83 0) (0) (0 0) (0) (85 0) (52 52 0) (0 0) (89 89 0 0 0) (0) (0 0 0) (0) (0) (77 0) (97 0 0 0) (0) (68 68 0 0) (0) (0 0 0) (99 0 0) (0) (0) (0) (0 0) (68 0) (56 0 0) (0) (0) (61 0) (0 0) (0) (0) (82 82 0) (0) (97 0) (0) (0 0) (48 0) (33 0) (0 0) (0) (0) (71 0 0) (0) (0 0 0 0 0) (0 0 0) (0) (73 73 0 0) (0 0 0) (0) (77 0) (0 0) (0 0) (71 0) (90 0) (0 0) (0) (0 0) (0) (0) (0) (95 0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0) (51 0 0) (0 0) (83 0 0) (0) (0 0) (74 74 0) (0) (0) (0) (56 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0) (98 98 0 0 0) (0 0 0 0 0) (0) (0 0 0) (67 0) (0) (0 0 0 0) (0 0) (69 0 0) (0 0 0 0 0) (0) (82 0 0 0) (0 0) (96 0) (0) (0) (0) (0) (96 96 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (94 0) (0 0) (94 0) (0 0 0) (0 0) (62 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0 0) (0) (90 0 0) (0) (0) (0 0) (0) (0) (0 0) (22 22 0) (0) (0 0 0) (46 0) (0) (0 0) (55 0 0) (0) (0) (0) (0 0 0) (0) (44 44 0 0) (0) (98 0) (58 58 0) (64 64 0) (0) (0 0) (96 96 96 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (53 0 0 0) (94 94 0 0) (0) (82 0 0 0) (84 84 0) (0) (0) (0 0) (0 0) (93 93 0) (0 0) (63 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (71 0) (0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (85 0 0) (78 0) (0 0) (0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (84 0) (72 72 72 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (90 90 90 0) (0) (0) (0 0) (0 0 0) (0) (0 0) (0) (47 0 0) (0 0) (0) (0) (0) (0) (89 89 0 0) (0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0 0) (0 0) (73 73 0) (55 0) (80 0 0) (100 100 100 0) (88 0) (0 0 0 0) (0 0) (0) (0) (87 0 0 0) (65 65 65 0) (0) (23 0) (99 99 0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0 0 0) (80 80 0) (0 0 0) (69 0) (79 0) (0 0 0) (0) (0) (79 79 0 0) (0) (0 0) (0) (87 87 87 0) (0 0) (0 0 0) (0) (0 0 0) (87 0 0) (23 0) (0) (0) (70 0 0) (0) (0 0) (0 0) (0) (68 0) (0 0) (0 0) (0) (0 0) (99 0 0) (0) (98 0 0 0) (0) (0 0) (0 0) (0) (99 99 0) (90 0 0) (70 0 0) (0 0) (0) (0 0 0) (81 0) (0 0) (0) (0 0) (0 0) (54 0 0) (0 0 0) (0) (0) (0) (86 0 0) (0) (0 0) (99 99 0) (0))) :lchan (quote ((1) (1) (1 1 1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1 1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1 1 1) (1) (1 1 1 1 1) (1 1 1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1 1 1 1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1) (1 1) (1) (1 1 1) (1 1) (1) (1) (1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1) (1 1) (1 1 1) (1) (1) (1 1 1 1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1 1) (1) (1 1 1 1 1) (1 1) (1 1 1) (1 1) (1) (1 1 1 1 1) (1) (1 1) (1 1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1 1) (1) (1) (1 1 1 1 1) (1) (1 1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1) (1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1 1 1) (1 1 1) (1) (1 1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1) (1 1 1 1) (1) (1) (1 1 1) (1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1) (1 1 1) (1 1) (1 1 1 1) (1) (1 1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1 1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1 1 1) (1 1 1) (1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1) (1 1 1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1) (1) (1) (1 1) (1) (1 1) (1 1 1) (1) (1 1) (1) (1) (1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1) (1 1) (1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1) (1) (1 1) (1 1 1 1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1) (1 1 1) (1 1 1 1 1) (1 1) (1) (1 1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1) (1) (1 1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1 1 1 1) (1 1) (1 1) (1 1 1 1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1 1 1) (1 1 1) (1) (1 1 1) (1) (1 1 1 1) (1 1) (1 1 1) (1 1 1) (1) (1) (1) (1 1 1) (1 1 1) (1 1 1 1) (1) (1) (1 1 1 1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1 1 1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1 1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1 1 1 1) (1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1) (1 1 1) (1 1 1) (1 1) (1 1 1) (1 1 1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1 1) (1) (1 1 1 1) (1 1) (1 1) (1) (1 1 1) (1) (1 1) (1 1 1 1 1) (1) (1 1) (1) (1 1 1 1) (1 1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1) (1) (1 1) (1 1 1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1 1 1 1 1) (1) (1) (1 1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1 1) (1 1 1) (1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1 1 1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1 1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1) (1 1 1 1 1 1) (1 1) (1 1) (1 1 1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1 1 1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1 1 1 1) (1) (1) (1 1 1) (1) (1 1 1) (1 1 1 1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1 1) (1 1 1) (1) (1 1) (1 1 1 1) (1 1 1 1 1) (1) (1 1 1) (1 1) (1 1) (1 1 1 1 1) (1 1 1) (1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1) (1) (1 1) (1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1 1 1 1 1) (1) (1 1 1) (1 1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1) (1 1 1 1 1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1 1 1 1) (1) (1) (1 1 1 1) (1 1) (1 1 1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1) (1 1 1) (1) (1 1 1 1) (1) (1) (1 1) (1 1 1 1) (1) (1 1) (1) (1) (1 1 1) (1 1 1) (1 1) (1 1 1 1) (1 1 1 1) (1) (1 1) (1) (1 1 1) (1 1) (1 1 1 1) (1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1) (1 1 1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1 1) (1 1 1) (1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1 1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1 1) (1 1 1) (1) (1 1 1 1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1 1 1) (1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1) (1 1 1) (1) (1 1) (1 1 1 1) (1 1) (1 1 1) (1 1 1 1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1 1) (1 1 1) (1) (1 1) (1) (1 1) (1 1 1 1) (1) (1 1 1 1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1) (1) (1 1) (1 1 1) (1) (1 1) (1 1 1 1) (1) (1 1) (1 1 1) (1) (1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1) (1) (1 1 1) (1) (1 1 1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1) (1 1 1) (1) (1 1) (1 1) (1 1 1) (1) (1 1 1 1 1) (1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1) (1 1 1 1) (1) (1 1 1) (1 1 1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1 1 1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1 1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1 1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1 1 1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1 1 1) (1) (1 1 1) (1) (1) (1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1 1) (1) (1 1 1 1 1) (1 1 1) (1) (1 1 1 1) (1 1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1 1 1) (1 1) (1) (1) (1 1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1) (1 1 1) (1 1) (1) (1 1 1 1) (1 1) (1 1 1) (1 1 1 1 1) (1) (1 1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1 1 1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1 1) (1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1 1 1 1) (1) (1 1) (1 1 1) (1 1 1) (1) (1 1) (1 1 1 1 1 1 1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1) (1) (1 1 1) (1 1 1) (1) (1 1) (1 1 1) (1) (1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1) (1) (1 1) (1 1 1) (1 1 1) (1 1 1 1) (1) (1) (1 1) (1 1 1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1) (1 1) (1 1) (1 1 1 1) (1 1) (1) (1 1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1) (1 1 1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1 1 1) (1) (1) (1 1 1) (1 1) (1) (1 1) (1) (1 1 1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1) (1) (1 1 1 1) (1) (1 1) (1) (1 1 1 1) (1 1) (1 1 1) (1) (1 1 1) (1 1 1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1 1) (1) (1 1 1 1) (1) (1 1) (1 1) (1) (1 1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1 1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1 1) (1 1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0 0 0 0) (0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0 0) (0) (0 0 0 0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0 0) (0 0 0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0) (0 0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0 0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0 0) (0) (0) (0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0 0 0) (0 0 0) (0) (0 0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0 0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 4/5 nil 1000 0 (om-make-point 1328 473) (om-make-point 400 38) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "My_Favorite_Things_MIDI_FrMelodyne.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 325 0) (om-make-point 224 71) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "neg" "Documents")) :device nil :host nil :name "My_Favorite_Things_MIDI_FrMelodyne" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "My_Favorite_Things_MIDI_FrMelodyne.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (0 0 11 0 nil 0) (4 0 11 1 nil 0) (3 0 11 2 nil 0) (13 0 12 0 nil 3) (15 0 13 0 nil 0) (17 0 14 0 nil 12) (16 0 14 1 nil 5) (14 0 15 0 nil 2) (17 0 16 0 nil 5) (18 0 17 0 nil 1))) nil 7.06))